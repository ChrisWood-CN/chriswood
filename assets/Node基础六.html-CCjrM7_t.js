import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as n}from"./app-DFf4DPSS.js";const e={},l=n(`<h2 id="六-buffer的使用" tabindex="-1"><a class="header-anchor" href="#六-buffer的使用"><span>六.Buffer的使用</span></a></h2><h3 id="_1-1-数据的二进制" tabindex="-1"><a class="header-anchor" href="#_1-1-数据的二进制"><span>1.1. 数据的二进制</span></a></h3><p>计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。</p><p>JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。</p><p>不对啊，JavaScript不是也可以处理图片吗？</p><ul><li>事实上在网页端，图片我们一直是交给浏览器来处理的；</li><li>JavaScript或者HTML，只是负责告诉浏览器一个图片的地址；</li><li>浏览器负责获取这个图片，并且最终将这个图片渲染出来；</li></ul><p>但是对于服务器来说是不一样的：</p><ul><li>服务器要处理的本地文件类型相对较多;</li><li>比如某一个保存文本的文件并不是使用 <code>utf-8</code>进行编码的，而是用 <code>GBK</code>，那么我们必须读取到他们的二进制数据，再通过GKB转换成对应的文字；</li><li>比如我们需要读取的是一张图片数据（二进制），再通过某些手段对图片数据进行二次的处理（裁剪、格式转换、旋转、添加滤镜），Node中有一个Sharp的库，就是读取图片或者传入图片的Buffer对其再进行处理；</li><li>比如在Node中通过TCP建立长连接，TCP传输的是字节流，我们需要将数据转成字节再进行传入，并且需要知道传输字节的大小（客服端需要根据大小来判断读取多少内容）；</li></ul><p>我们会发现，对于前端开发来说，通常很少会和二进制打交道，但是对于服务器端为了做很多的功能，我们必须直接去操作其二进制的数据；</p><p>所以Node为了可以方便开发者完成更多功能，提供给了我们一个类Buffer，并且它是全局的。</p><h3 id="_1-2-buffer和二进制" tabindex="-1"><a class="header-anchor" href="#_1-2-buffer和二进制"><span>1.2. Buffer和二进制</span></a></h3><p>我们前面说过，Buffer中存储的是二进制数据，那么到底是如何存储呢？</p><ul><li>我们可以将Buffer看成是一个存储二进制的数组；</li><li>这个数组中的每一项，可以保存8位二进制：<code>00000000</code></li></ul><p>为什么是8位呢？</p><ul><li>在计算机中，很少的情况我们会直接操作一位二进制，因为一位二进制存储的数据是非常有限的；</li><li>所以通常会将8位合在一起作为一个单元，这个单元称之为一个字节（byte）；</li><li>也就是说 <code>1byte = 8bit</code>，<code>1kb=1024byte</code>，<code>1M=1024kb</code>;</li><li>比如很多编程语言中的int类型是4个字节，long类型是8个字节；</li><li>比如TCP传输的是字节流，在写入和读取时都需要说明字节的个数；</li><li>比如RGB的值分别都是255，所以本质上在计算机中都是用一个字节存储的；</li></ul><p>也就是说，Buffer相当于是一个字节的数组，数组中的每一项对于一个字节的大小：</p><p>如果我们希望将一个字符串放入到Buffer中，是怎么样的过程呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const buffer01 = new Buffer(&quot;why&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(buffer01);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bevAGibs37XDGEb7HHVPQj1As5ok5tu2TJr3aB84cpVk5XkTjPSnAfbg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">字符串存储buffer的过程</p><p>当然目前已经不希望我们这样来做了：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bnrXt2YmvsbBaRPhuky6dLMicrBQj06zhPRz6icCJue7SRBjIhpBpClIg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">VSCode的警告</p><p>那么我们可以通过另外一个创建方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const buffer2 = Buffer.from(&quot;why&quot;);</span></span>
<span class="line"><span>console.log(buffer2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是中文呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const buffer3 = Buffer.from(&quot;王红元&quot;);</span></span>
<span class="line"><span>console.log(buffer3);</span></span>
<span class="line"><span>// &lt;Buffer e7 8e 8b e7 ba a2 e5 85 83&gt;</span></span>
<span class="line"><span>const str = buffer3.toString();</span></span>
<span class="line"><span>console.log(str);</span></span>
<span class="line"><span>// 王红元</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果编码和解码不同：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const buffer3 = Buffer.from(&quot;王红元&quot;, &#39;utf16le&#39;);</span></span>
<span class="line"><span>console.log(buffer3);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const str = buffer3.toString(&#39;utf8&#39;);</span></span>
<span class="line"><span>console.log(str); // �s�~CQ</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="buffer其他用法" tabindex="-1"><a class="header-anchor" href="#buffer其他用法"><span>Buffer其他用法</span></a></h2><h3 id="_2-1-buffer的其他创建" tabindex="-1"><a class="header-anchor" href="#_2-1-buffer的其他创建"><span>2.1. Buffer的其他创建</span></a></h3><p>Buffer的创建方式有很多：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bEGVONgOsCZ6utEwUAuoHjUib2nF5MhBtMloTJovgt02CIstHgpX3m1Q/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">buffer的创建</p><p>来看一下<code>Buffer.alloc</code>:</p><ul><li>我们会发现创建了一个8位长度的Buffer，里面所有的数据默认为00；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const buffer01 = Buffer.alloc(8);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(buffer01); // &lt;Buffer 00 00 00 00 00 00 00 00&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以对其进行操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>buffer01[0] = &#39;w&#39;.charCodeAt();</span></span>
<span class="line"><span>buffer01[1] = 100;</span></span>
<span class="line"><span>buffer01[2] = 0x66;</span></span>
<span class="line"><span>console.log(buffer01);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用相同的方式来获取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(buffer01[0]);</span></span>
<span class="line"><span>console.log(buffer01[0].toString(16));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-buffer和文件读取" tabindex="-1"><a class="header-anchor" href="#_2-2-buffer和文件读取"><span>2.2. Buffer和文件读取</span></a></h3><p>文本文件的读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.readFile(&#39;./test.txt&#39;, (err, data) =&gt; {</span></span>
<span class="line"><span>  console.log(data); // &lt;Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64&gt;</span></span>
<span class="line"><span>  console.log(data.toString()); // Hello World</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片文件的读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.readFile(&#39;./zznh.jpg&#39;, (err, data) =&gt; {</span></span>
<span class="line"><span>  console.log(data); // &lt;Buffer ff d8 ff e0 ... 40418 more bytes&gt;</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>图片文件的读取和转换：</p><ul><li>将读取的某一张图片，转换成一张200x200的图片；</li><li>这里我们可以借助于 <code>sharp</code> 库来完成；</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> sharp</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;sharp&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sharp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./test.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    fs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">writeFileSync</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;./test_copy.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-buffer使用" tabindex="-1"><a class="header-anchor" href="#_2-3-buffer使用"><span>2.3. buffer使用</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//buffer与字符串转换</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">([</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">encoding</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//复制buffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//ArrayBuffer转换到buffer arrayBuffer类型为TypedArray.buffer属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arrayBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">byteOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//buffer 转 Uint8Array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Uint8Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//Uint8Array 转 ArrayBuffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> arraybuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//ArrayBuffer 转 Buffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> bufferCopy</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//ArrayBuffer 转 DataView </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> view</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DataView</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">arraybuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//DataView 转 ArrrayBuffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> arraybuffer2</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> view</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-buffer-和-typearray-arraybuffer-unit8array" tabindex="-1"><a class="header-anchor" href="#_2-4-buffer-和-typearray-arraybuffer-unit8array"><span>2.4. Buffer 和 TypeArray，ArrayBuffer, Unit8Array</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>TypedArray</span></span>
<span class="line"><span>概念: TypedArray ES6中新出的一个接口, 不能直接被实例化, Uint8Array 就是实现 TypedArray 接口的一个子类</span></span>
<span class="line"><span>子类有:</span></span>
<span class="line"><span>Int8Array: 每个元素是8个二进制位(1个字节)的有符号整数</span></span>
<span class="line"><span>Uint8Array： 每个元素是8个二进制位(1个字节)的无符号整数</span></span>
<span class="line"><span>Int16Array： 每个元素是16个二进制位(2个字节)的有符号整数</span></span>
<span class="line"><span>Uint16Array：每个元素是16个二进制位(2个字节)的无符号整数</span></span>
<span class="line"><span>Int32Array： 每个元素是32个二进制位(4个字节)的有符号整数</span></span>
<span class="line"><span>Uint32Array： 每个元素是32个二进制位(4个字节)的无符号整数</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ArrayBuffer</span></span>
<span class="line"><span>概念: TypedArray 的作用是操作二进制数据, 其内部还有一个buffer属性, 这个buffer就是 ArrayBuffer 实例. ArrayBuffer 就存储了要操作的二进制数据,TypedArray 是一个操作二进制数据的接口, 内部的 ArrayBuffer 存储了要操作的二进制数据.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Uint8Array</span></span>
<span class="line"><span>概念: 数组中的每一个元素都是 8个二进制位(1个字节)的无符号整数.无符号的含义是, 该二进制的首位不表示符号位. 而对于有符号的二进制位, </span></span>
<span class="line"><span></span></span>
<span class="line"><span>Buffer</span></span>
<span class="line"><span>概念: Node中才有, 继承自 Unit8array, 拥有更多强大的二进制数据操作.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="buffer的内存分配" tabindex="-1"><a class="header-anchor" href="#buffer的内存分配"><span>Buffer的内存分配</span></a></h2><p>事实上我们创建Buffer时，并不会频繁的向操作系统申请内存，它会默认先申请一个8 * 1024个字节大小的内存，也就是8kb</p><ul><li>node/lib/buffer.js：135行</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">poolSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 8</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> poolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">poolOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">allocPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> encodingsMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ObjectCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> encodings</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  encodingsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">encodings</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  poolSize</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">poolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  allocPool</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> createUnsafeBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">poolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  markAsUntransferable</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">allocPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  poolOffset</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">createPool</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假如我们调用Buffer.from申请Buffer：</p><ul><li>这里我们以从字符串创建为例</li><li>node/lib/buffer.js：290行</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Buffer.from = function from(value, encodingOrOffset, length) {</span></span>
<span class="line"><span>  if (typeof value === &#39;string&#39;)</span></span>
<span class="line"><span>    return fromString(value, encodingOrOffset);</span></span>
<span class="line"><span> </span></span>
<span class="line"><span> // 如果是对象，另外一种处理情况</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们查看fromString的调用：</p><ul><li>node/lib/buffer.js：428行</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>function fromString(string, encoding) {</span></span>
<span class="line"><span>  let ops;</span></span>
<span class="line"><span>  if (typeof encoding !== &#39;string&#39; || encoding.length === 0) {</span></span>
<span class="line"><span>    if (string.length === 0)</span></span>
<span class="line"><span>      return new FastBuffer();</span></span>
<span class="line"><span>    ops = encodingOps.utf8;</span></span>
<span class="line"><span>    encoding = undefined;</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    ops = getEncodingOps(encoding);</span></span>
<span class="line"><span>    if (ops === undefined)</span></span>
<span class="line"><span>      throw new ERR_UNKNOWN_ENCODING(encoding);</span></span>
<span class="line"><span>    if (string.length === 0)</span></span>
<span class="line"><span>      return new FastBuffer();</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return fromStringFast(string, ops);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们查看fromStringFast：</p><ul><li>这里做的事情是判断剩余的长度是否还足够填充这个字符串；</li><li>如果不足够，那么就要通过 <code>createPool</code> 创建新的空间；</li><li>如果够就直接使用，但是之后要进行 <code>poolOffset</code>的偏移变化；</li><li>node/lib/buffer.js：428行</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>function fromStringFast(string, ops) {</span></span>
<span class="line"><span>  const length = ops.byteLength(string);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if (length &gt;= (Buffer.poolSize &gt;&gt;&gt; 1))</span></span>
<span class="line"><span>    return createFromString(string, ops.encodingVal);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if (length &gt; (poolSize - poolOffset))</span></span>
<span class="line"><span>    createPool();</span></span>
<span class="line"><span>  let b = new FastBuffer(allocPool, poolOffset, length);</span></span>
<span class="line"><span>  const actual = ops.write(b, string, 0, length);</span></span>
<span class="line"><span>  if (actual !== length) {</span></span>
<span class="line"><span>    // byteLength() may overestimate. That&#39;s a rare case, though.</span></span>
<span class="line"><span>    b = new FastBuffer(allocPool, poolOffset, actual);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  poolOffset += actual;</span></span>
<span class="line"><span>  alignPool();</span></span>
<span class="line"><span>  return b;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="stream" tabindex="-1"><a class="header-anchor" href="#stream"><span>Stream</span></a></h2><h3 id="_4-1-认识stream" tabindex="-1"><a class="header-anchor" href="#_4-1-认识stream"><span>4.1. 认识Stream</span></a></h3><p>什么是流呢？</p><ul><li>我们的第一反应应该是流水，源源不断的流动；</li><li>程序中的流也是类似的含义，我们可以想象当我们从一个文件中读取数据时，文件的二进制（字节）数据会源源不断的被读取到我们程序中；</li><li>而这个一连串的字节，就是我们程序中的流；</li></ul><p>所以，我们可以这样理解流：</p><ul><li>是连续字节的一种表现形式和抽象概念；</li><li>流应该是可读的，也是可写的；</li></ul><p>在之前学习文件的读写时，我们可以直接通过 <code>readFile</code>或者 <code>writeFile</code>方式读写文件，为什么还需要流呢？</p><ul><li>直接读写文件的方式，虽然简单，但是无法控制一些细节的操作；</li><li>比如从什么位置开始读、读到什么位置、一次性读取多少个字节；</li><li>读到某个位置后，暂停读取，某个时刻恢复读取等等；</li><li>或者这个文件非常大，比如一个视频文件，一次性全部读取并不合适；</li></ul><p>事实上Node中很多对象是基于流实现的：</p><ul><li>http模块的Request和Response对象；</li><li>process.stdout对象；</li></ul><p>官方：另外所有的流都是EventEmitter的实例：</p><p>我们可以看一下Node源码中有这样的操作：</p><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5b13taMLiadNO0YXJwqHyURQRtaGIdgXRc8arnuncuqfAXrkuOyOWPghg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>Stream和EventEmitter关系</p><p>流（Stream）的分类：</p><ul><li><code>Writable</code>：可以向其写入数据的流（例如 <code>fs.createWriteStream()</code>）。</li><li><code>Readable</code>：可以从中读取数据的流（例如 <code>fs.createReadStream()</code>）。</li><li><code>Duplex</code>：同时为<code>Readable</code>和的流<code>Writable</code>（例如 <code>net.Socket</code>）。</li><li><code>Transform</code>：<code>Duplex</code>可以在写入和读取数据时修改或转换数据的流（例如<code>zlib.createDeflate()</code>）。</li></ul><p>这里我们通过fs的操作，讲解一下Writable、Readable，另外两个大家可以自行学习一下。</p><h3 id="_4-2-readable" tabindex="-1"><a class="header-anchor" href="#_4-2-readable"><span>4.2. Readable</span></a></h3><p>之前我们读取一个文件的信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.readFile(&#39;./foo.txt&#39;, (err, data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式是一次性将一个文件中所有的内容都读取到程序（内存）中，但是这种读取方式就会出现我们之前提到的很多问题：</p><ul><li>文件过大、读取的位置、结束的位置、一次读取的大小；</li></ul><p>这个时候，我们可以使用 <code>createReadStream</code>，我们来看几个参数，更多参数可以参考官网：</p><ul><li>start：文件读取开始的位置；</li><li>end：文件读取结束的位置；</li><li>highWaterMark：一次性读取字节的长度，默认是64kb；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const read = fs.createReadStream(&quot;./foo.txt&quot;, {</span></span>
<span class="line"><span>  start: 3,</span></span>
<span class="line"><span>  end: 8,</span></span>
<span class="line"><span>  highWaterMark: 4</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们如何获取到数据呢？</p><ul><li>可以通过监听data事件，获取读取到的数据；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>read.on(&quot;data&quot;, (data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以监听其他的事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>read.on(&#39;open&#39;, (fd) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件被打开&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>read.on(&#39;end&#39;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件读取结束&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>read.on(&#39;close&#39;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件被关闭&quot;);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至我们可以在某一个时刻暂停和恢复读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>read.on(&quot;data&quot;, (data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  read.pause();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  setTimeout(() =&gt; {</span></span>
<span class="line"><span>    read.resume();</span></span>
<span class="line"><span>  }, 2000);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-writable" tabindex="-1"><a class="header-anchor" href="#_4-3-writable"><span>4.3. Writable</span></a></h3><p>之前我们写入一个文件的方式是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.writeFile(&#39;./foo.txt&#39;, &quot;内容&quot;, (err) =&gt; {</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式相当于一次性将所有的内容写入到文件中，但是这种方式也有很多问题：</p><ul><li>比如我们希望一点点写入内容，精确每次写入的位置等；</li></ul><p>这个时候，我们可以使用 <code>createWriteStream</code>，我们来看几个参数，更多参数可以参考官网：</p><ul><li>flags：默认是<code>w</code>，如果我们希望是追加写入，可以使用 <code>a</code>或者 <code>a+</code>；</li><li>start：写入的位置；</li></ul><p>我们进行一次简单的写入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const writer = fs.createWriteStream(&quot;./foo.txt&quot;, {</span></span>
<span class="line"><span>  flags: &quot;a+&quot;,</span></span>
<span class="line"><span>  start: 8</span></span>
<span class="line"><span>});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.write(&quot;你好啊&quot;, err =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;写入成功&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们希望监听一些事件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>writer.on(&quot;open&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件打开&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.on(&quot;finish&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件写入结束&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.on(&quot;close&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件关闭&quot;);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会发现，我们并不能监听到 <code>close</code> 事件：</p><ul><li>这是因为写入流在打开后是不会自动关闭的；</li><li>我们必须手动关闭，来告诉Node已经写入结束了；</li><li>并且会发出一个 <code>finish</code> 事件的；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>writer.close();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.on(&quot;finish&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件写入结束&quot;);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.on(&quot;close&quot;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;文件关闭&quot;);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外一个非常常用的方法是 <code>end</code>：</p><ul><li><code>end</code>方法相当于做了两步操作：<code>write</code>传入的数据和调用<code>close</code>方法；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>writer.end(&quot;Hello World&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-4-pipe方法" tabindex="-1"><a class="header-anchor" href="#_4-4-pipe方法"><span>4.4. pipe方法</span></a></h3><p>正常情况下，我们可以将读取到的 <code>输入流</code>，手动的放到 <code>输出流</code>中进行写入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span>const { read } = require(&#39;fs/promises&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const reader = fs.createReadStream(&#39;./foo.txt&#39;);</span></span>
<span class="line"><span>const writer = fs.createWriteStream(&#39;./bar.txt&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>reader.on(&quot;data&quot;, (data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span>  writer.write(data, (err) =&gt; {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  });</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以通过pipe来完成这样的操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>reader.pipe(writer);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>writer.on(&#39;close&#39;, () =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;输出流关闭&quot;);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,117),p=[l];function t(r,d){return a(),i("div",null,p)}const k=s(e,[["render",t],["__file","Node基础六.html.vue"]]),u=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%85%AD.html","title":"Node基础六","lang":"zh-CN","frontmatter":{"title":"Node基础六","date":"2022-10-01T12:26:50.000Z","categories":"Node","tags":"Node Node基础系列","pre":"Node基础五","next":"Node基础七","description":"六.Buffer的使用 1.1. 数据的二进制 计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。 JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。 不对啊，JavaScript不是也可以处理图片吗？ 事实上在网页端，图片我们一直是交给浏览器来处理的； JavaScript或者HT...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%85%AD.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础六"}],["meta",{"property":"og:description","content":"六.Buffer的使用 1.1. 数据的二进制 计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。 JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。 不对啊，JavaScript不是也可以处理图片吗？ 事实上在网页端，图片我们一直是交给浏览器来处理的； JavaScript或者HT..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bevAGibs37XDGEb7HHVPQj1As5ok5tu2TJr3aB84cpVk5XkTjPSnAfbg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-10-01T12:26:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础六\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bevAGibs37XDGEb7HHVPQj1As5ok5tu2TJr3aB84cpVk5XkTjPSnAfbg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bnrXt2YmvsbBaRPhuky6dLMicrBQj06zhPRz6icCJue7SRBjIhpBpClIg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bEGVONgOsCZ6utEwUAuoHjUib2nF5MhBtMloTJovgt02CIstHgpX3m1Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5b13taMLiadNO0YXJwqHyURQRtaGIdgXRc8arnuncuqfAXrkuOyOWPghg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-10-01T12:26:50.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"六.Buffer的使用","slug":"六-buffer的使用","link":"#六-buffer的使用","children":[{"level":3,"title":"1.1. 数据的二进制","slug":"_1-1-数据的二进制","link":"#_1-1-数据的二进制","children":[]},{"level":3,"title":"1.2. Buffer和二进制","slug":"_1-2-buffer和二进制","link":"#_1-2-buffer和二进制","children":[]}]},{"level":2,"title":"Buffer其他用法","slug":"buffer其他用法","link":"#buffer其他用法","children":[{"level":3,"title":"2.1. Buffer的其他创建","slug":"_2-1-buffer的其他创建","link":"#_2-1-buffer的其他创建","children":[]},{"level":3,"title":"2.2. Buffer和文件读取","slug":"_2-2-buffer和文件读取","link":"#_2-2-buffer和文件读取","children":[]},{"level":3,"title":"2.3. buffer使用","slug":"_2-3-buffer使用","link":"#_2-3-buffer使用","children":[]},{"level":3,"title":"2.4. Buffer 和 TypeArray，ArrayBuffer, Unit8Array","slug":"_2-4-buffer-和-typearray-arraybuffer-unit8array","link":"#_2-4-buffer-和-typearray-arraybuffer-unit8array","children":[]}]},{"level":2,"title":"Buffer的内存分配","slug":"buffer的内存分配","link":"#buffer的内存分配","children":[]},{"level":2,"title":"Stream","slug":"stream","link":"#stream","children":[{"level":3,"title":"4.1. 认识Stream","slug":"_4-1-认识stream","link":"#_4-1-认识stream","children":[]},{"level":3,"title":"4.2. Readable","slug":"_4-2-readable","link":"#_4-2-readable","children":[]},{"level":3,"title":"4.3. Writable","slug":"_4-3-writable","link":"#_4-3-writable","children":[]},{"level":3,"title":"4.4. pipe方法","slug":"_4-4-pipe方法","link":"#_4-4-pipe方法","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":10.35,"words":3105},"filePathRelative":"zh/posts/node/base/Node基础六.md","localizedDate":"2022年10月1日","excerpt":"<h2>六.Buffer的使用</h2>\\n<h3>1.1. 数据的二进制</h3>\\n<p>计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。</p>\\n<p>JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。</p>\\n<p>不对啊，JavaScript不是也可以处理图片吗？</p>\\n<ul>\\n<li>事实上在网页端，图片我们一直是交给浏览器来处理的；</li>\\n<li>JavaScript或者HTML，只是负责告诉浏览器一个图片的地址；</li>\\n<li>浏览器负责获取这个图片，并且最终将这个图片渲染出来；</li>\\n</ul>","autoDesc":true}');export{k as comp,u as data};

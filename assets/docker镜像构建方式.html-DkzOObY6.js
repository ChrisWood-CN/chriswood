import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,b as a}from"./app-BzNy2ypN.js";const t={},l=a(`<p>创建镜像的方法主要有三种：</p><ul><li>基于已有镜像的容器创建</li><li>基于本地模板导入</li><li>基于 Dockerfile 创建（*推荐）</li></ul><h2 id="一、基于容器创建镜像" tabindex="-1"><a class="header-anchor" href="#一、基于容器创建镜像"><span>一、基于容器创建镜像</span></a></h2><p>基于已有容器构建镜像主要是通过 docker commit 命令来构建新的镜像，语法规则如下：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [OPTIONS] CONTAINER [REPOSITORY:TAG]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;centos7+java8+zh&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;chriswoodcn&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4b40b9568be3</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> centos7_java8_zh:1.0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 上面-m选项指定了新镜像的提交信息，-a标注作者信息，4b40b9568be3是容器ID，centos7_java8_zh:1.0.0是指定的新镜像名称和版本。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、基于本地模板导入" tabindex="-1"><a class="header-anchor" href="#二、基于本地模板导入"><span>二、基于本地模板导入</span></a></h2><p>用户也可以从模板文件中导入镜像，主要使用 docker import 命令</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 创造出一个模板，即 将容器导入到一个模板文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> export</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 4b40b9568be3</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /root/centos7_java8_zh.tar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 利用模板导入成镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> import</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /root/centos7_java8_zh.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chriswoodcn/centos7_java8_zh:1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> images</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># chriswoodcn/centos7_java8_zh      1.0              498afccbfb2d        5 seconds ago          560MB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、基于-dockerfile-构建" tabindex="-1"><a class="header-anchor" href="#三、基于-dockerfile-构建"><span>三、基于 Dockerfile 构建</span></a></h2><p>基于 Dockerfile 构建镜像就目前而言是使用最为广泛的 Dockerfile 是由一组指令组成的文件，其每条指令对应 Linux 中的一条命令，Docker 程序通过读取 Dockerfile 中的指令最终生成镜像。</p><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">FROM 镜像名称</td><td style="text-align:left;">指定新镜像基于的镜像，第一条指令必须为 FROM 指令</td></tr><tr><td style="text-align:left;">MAINTAINER 名字</td><td style="text-align:left;">镜像维护人信息</td></tr><tr><td style="text-align:left;">RUN 命令</td><td style="text-align:left;">在基于的镜像上执行命令，并提交到新镜像中，可以多条</td></tr><tr><td style="text-align:left;">CMD[&quot;要运行的程序&quot;,&quot;参数 1&quot;,&quot;参数 2&quot;]</td><td style="text-align:left;">指定启动容器时要执行的命令或者脚本 Dockerfile 只能有一条 CMD 命令 不可以追加命令</td></tr><tr><td style="text-align:left;">EXPOSE 端口号</td><td style="text-align:left;">指定新镜像加载到 docker 时要开启的端口号</td></tr><tr><td style="text-align:left;">ENV 环境变量 变量值</td><td style="text-align:left;">设置环境变量 后面可以使用 可以多个</td></tr><tr><td style="text-align:left;">ADD 源文件/目录 目标文件/目录</td><td style="text-align:left;">将源文件复制到目标文件</td></tr><tr><td style="text-align:left;">COPY 源文件/目录 目标文件/目录</td><td style="text-align:left;">将主机上的文件/目录复制到目标地点</td></tr><tr><td style="text-align:left;">VOLUME[&quot;目录&quot;]</td><td style="text-align:left;">在容器中创建一个挂载点</td></tr><tr><td style="text-align:left;">USER 用户名/UID</td><td style="text-align:left;">指定运行容器时的用户</td></tr><tr><td style="text-align:left;">WORKDIR 路径</td><td style="text-align:left;">为后续的 RUN、CMD、ENTRYPOINT 指定工作目录</td></tr><tr><td style="text-align:left;">ONBUILD 命令</td><td style="text-align:left;">指定所生成的镜像作为一个基础镜像时所要运行的命令</td></tr><tr><td style="text-align:left;">HEALTHCHECK</td><td style="text-align:left;">健康检查</td></tr><tr><td style="text-align:left;">ENTRYPOINT</td><td style="text-align:left;">指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有其他传入值作为该命令的参数</td></tr></tbody></table><ul><li>ENTRYPOINT 写法 <ol><li>exec 格式 -&gt; ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</li><li>shell 格式 -&gt; ENTRYPOINT command param1 param2</li></ol></li><li>CMD 和 ENTRYPOINT 区别</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                   # 指定这个容器启动的时候要运行的命令，不可以追加命令</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            # 指定这个容器启动的时候要运行的命令，可以追加命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令</li></ul><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">ENTRYPOINT</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&lt;CMD&gt;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#dockerfile</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定父镜像</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> centos:centos7</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定维护者信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">MAINTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> chriswoodcn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mkdir -p /fitness/server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mkdir -p /fitness/server/logs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mkdir -p /fitness/server/temp</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">WORKDIR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> /fitness/server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> SERVER_PORT=8080</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ACTIVE=dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> \${SERVER_PORT}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ./target/fitness-admin.jar ./app.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ENTRYPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-Dserver.port=\${SERVER_PORT}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-Dspring.profiles.active=\${ACTIVE}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-Dfile.encoding=UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;app.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> dockerfile</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> fitness-server:1.0.0</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="四、将本地-docker-镜像上传到-docker-hub-上" tabindex="-1"><a class="header-anchor" href="#四、将本地-docker-镜像上传到-docker-hub-上"><span>四、将本地 Docker 镜像上传到 Docker Hub 上</span></a></h2><p>1.创建并登录https://hub.docker.com/</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> login</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --username=chriswoodcn</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 提示输入密码，正确输入密码后，提示Login Succeeded</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.构建镜像</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> centos7_java8_zh_dockerfile</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chriswoodcn/centos7_java8_zh</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.网页登录 Docker Hub，创建仓库 chriswoodcn/centos7_java8_zh 4.给镜像打标签</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chriswoodcn/centos7_java8_zh</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chriswoodcn/centos7_java8_zh:1.1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>5.上传镜像到 Docker Hub 上</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> chriswoodcn/centos7_java8_zh:1.1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="五、多阶段构建" tabindex="-1"><a class="header-anchor" href="#五、多阶段构建"><span>五、多阶段构建</span></a></h3><p>多阶段构建指在 Dockerfile 中使用多个 FROM 语句，每个 FROM 指令都可以使用不同的基础镜像，并且是一个独立的子构建阶段。 使用多阶段构建打包 Java 应用具有构建安全、构建速度快、镜像文件体积小等优点</p><div class="language-dockerfile line-numbers-mode" data-highlighter="shiki" data-ext="dockerfile" data-title="dockerfile" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#例子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#First statge : define basic image for build</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> maven:3.6.0-jdk-8-alpine </span><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mj</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#add pom.xml and source code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ./pom.xml pom.xml</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">ADD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ./src src/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#build code and generate jar package</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> mvn clean package</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#Second stage: define mini image of java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">From</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> openjdk:8-jre-alpine</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#copy jar from the first stage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">COPY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> --from=mj target/my-app-1.0-SNAPSHOT.jar my-app-1.0-SNAPSHOT.jar</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#expose service port</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> 8080</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#start service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#61AFEF;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;-jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;my-app-1.0-SNAPSHOT.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),n=[l];function h(k,d){return e(),s("div",null,n)}const c=i(t,[["render",h],["__file","docker镜像构建方式.html.vue"]]),o=JSON.parse('{"path":"/zh/posts/docker/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%96%B9%E5%BC%8F.html","title":"docker镜像构建方式","lang":"zh-CN","frontmatter":{"title":"docker镜像构建方式","date":"2023-02-08T11:04:06.000Z","categories":"docker","tags":["docker"],"description":"创建镜像的方法主要有三种： 基于已有镜像的容器创建 基于本地模板导入 基于 Dockerfile 创建（*推荐） 一、基于容器创建镜像 基于已有容器构建镜像主要是通过 docker commit 命令来构建新的镜像，语法规则如下： 二、基于本地模板导入 用户也可以从模板文件中导入镜像，主要使用 docker import 命令 三、基于 Dockerf...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/docker/docker%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"docker镜像构建方式"}],["meta",{"property":"og:description","content":"创建镜像的方法主要有三种： 基于已有镜像的容器创建 基于本地模板导入 基于 Dockerfile 创建（*推荐） 一、基于容器创建镜像 基于已有容器构建镜像主要是通过 docker commit 命令来构建新的镜像，语法规则如下： 二、基于本地模板导入 用户也可以从模板文件中导入镜像，主要使用 docker import 命令 三、基于 Dockerf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:published_time","content":"2023-02-08T11:04:06.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker镜像构建方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-08T11:04:06.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"一、基于容器创建镜像","slug":"一、基于容器创建镜像","link":"#一、基于容器创建镜像","children":[]},{"level":2,"title":"二、基于本地模板导入","slug":"二、基于本地模板导入","link":"#二、基于本地模板导入","children":[]},{"level":2,"title":"三、基于 Dockerfile 构建","slug":"三、基于-dockerfile-构建","link":"#三、基于-dockerfile-构建","children":[]},{"level":2,"title":"四、将本地 Docker 镜像上传到 Docker Hub 上","slug":"四、将本地-docker-镜像上传到-docker-hub-上","link":"#四、将本地-docker-镜像上传到-docker-hub-上","children":[{"level":3,"title":"五、多阶段构建","slug":"五、多阶段构建","link":"#五、多阶段构建","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":3.67,"words":1102},"filePathRelative":"zh/posts/docker/docker镜像构建方式.md","localizedDate":"2023年2月8日","excerpt":"<p>创建镜像的方法主要有三种：</p>\\n<ul>\\n<li>基于已有镜像的容器创建</li>\\n<li>基于本地模板导入</li>\\n<li>基于 Dockerfile 创建（*推荐）</li>\\n</ul>\\n<h2>一、基于容器创建镜像</h2>\\n<p>基于已有容器构建镜像主要是通过 docker commit 命令来构建新的镜像，语法规则如下：</p>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> commit</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> [OPTIONS] CONTAINER [REPOSITORY:TAG]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> commit</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -m</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"centos7+java8+zh\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -a</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"chriswoodcn\\"</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> 4b40b9568be3</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> centos7_java8_zh:1.0.0</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 上面-m选项指定了新镜像的提交信息，-a标注作者信息，4b40b9568be3是容器ID，centos7_java8_zh:1.0.0是指定的新镜像名称和版本。</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};

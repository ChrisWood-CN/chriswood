import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as i}from"./app-Di2jApqi.js";const t={},n=i(`<h4 id="一、opsforvalue" tabindex="-1"><a class="header-anchor" href="#一、opsforvalue"><span>一、opsForValue</span></a></h4><p>Key-Value 操作</p><h5 id="_1、set-k-key-v-value" tabindex="-1"><a class="header-anchor" href="#_1、set-k-key-v-value"><span>1、set(K key, V value)</span></a></h5><p>向 Redis 新增一个 key-value，k-v 可以是泛型。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(obj1,obj2);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_2-get-object-key" tabindex="-1"><a class="header-anchor" href="#_2-get-object-key"><span>2.get(Object key)</span></a></h5><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 以对象为key的，只要对象属性全都相同就可以获取到</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(obj1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、set-k-key-v-value-long-timeout-timeunit-unit" tabindex="-1"><a class="header-anchor" href="#_3、set-k-key-v-value-long-timeout-timeunit-unit"><span>3、set(K key, V value, long timeout, TimeUnit unit)</span></a></h5><p>在原有的 set 基础上增加了过期时间,过了这个时间,这对 key-value 就会被 Redis 删除</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 300秒后过期</span></span>
<span class="line"><span>redisTemplate.opsForValue().set(obj1,obj2,300,TimeUnit.SECONDS);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>4.append(K key, String value) 在原有的值基础上新增字符串到末尾 5.get(K key, long start, long end) 截取 key 键对应值得字符串，从开始下标位置开始到结束下标的位置(包含结束下标)的字符串 6.getAndSet(K key, V value) 获取原来 key 键对应的值并重新赋新值 7.setBit(K key, long offset, boolean value) key 键对应的值 value 对应的 ascii 码,在 offset 的位置(从左向右数)变为 value。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>redisTemplate.opsForValue().setBit(&quot;key&quot;,1,false);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>8.getBit(K key, long offset) 断指定的位置 ASCII 码的 bit 位是否为 1</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>boolean bitBoolean = redisTemplate.opsForValue().getBit(&quot;key&quot;,1);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>9.size(K key) 获取指定字符串的长度 10.increment(K key, double delta),increment(K key, long delta) 以增量的方式将 double,long 值存储在变量中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>double valueDouble = redisTemplate.opsForValue().increment(&quot;doubleKey&quot;,5);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>11.setIfAbsent(K key, V value) 如果键不存在则新增,存在则不改变已经有的值 12.set(K key, V value, long offset) 覆盖从指定位置开始的值 13.multiSet(Map&lt;? extends K,? extends V&gt; map) 设置 map 集合到 redis</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> valueMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> HashMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">valueMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;valueMap1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;map1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">valueMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;valueMap2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;map2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">valueMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;valueMap3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;map3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">multiSet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(valueMap);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>14.multiGet(Collection&lt;?&gt; keys) 根据集合的 keys 取出对应的 value 值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>//根据List集合取出对应的value值</span></span>
<span class="line"><span>List paraList = new ArrayList();</span></span>
<span class="line"><span>paraList.add(&quot;valueMap1&quot;);</span></span>
<span class="line"><span>paraList.add(&quot;valueMap2&quot;);</span></span>
<span class="line"><span>paraList.add(&quot;valueMap3&quot;);</span></span>
<span class="line"><span>List&lt;String&gt; valueList = redisTemplate.opsForValue().multiGet(paraList);</span></span>
<span class="line"><span>for (String value : valueList){</span></span>
<span class="line"><span>    System.out.println(&quot;通过multiGet(Collection&lt;K&gt; keys)方法获取map值:&quot; + value);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>15.multiSetIfAbsent(Map&lt;? extends K,? extends V&gt; map) 如果对应的 map 集合名称不存在，则添加；如果存在则不做修改</p><h4 id="二、opsforlist" tabindex="-1"><a class="header-anchor" href="#二、opsforlist"><span>二、opsForList</span></a></h4><p>List 集合相关操作。</p><h5 id="_1、leftpush-k-key-v-value-rightpush-k-key-v-value" tabindex="-1"><a class="header-anchor" href="#_1、leftpush-k-key-v-value-rightpush-k-key-v-value"><span>1、leftPush(K key, V value) / rightPush(K key, V value)</span></a></h5><p>向集合左边添加元素值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// list：[c,b,a]</span></span>
<span class="line"><span>redisTemplate.opsForList().leftPush(&quot;list&quot;,&quot;a&quot;);</span></span>
<span class="line"><span>redisTemplate.opsForList().leftPush(&quot;list&quot;,&quot;b&quot;);</span></span>
<span class="line"><span>redisTemplate.opsForList().leftPush(&quot;list&quot;,&quot;c&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-leftpushall-k-key-v-values-rightpushall-k-key-v-values" tabindex="-1"><a class="header-anchor" href="#_2-leftpushall-k-key-v-values-rightpushall-k-key-v-values"><span>2.leftPushAll(K key, V …values) / rightPushAll(K key, V …values)</span></a></h5><p>向集合左边批量添加元素，参数可以是数组、多参数、集合</p><h5 id="_3-leftpop-k-key-rightpop-k-key-v-values" tabindex="-1"><a class="header-anchor" href="#_3-leftpop-k-key-rightpop-k-key-v-values"><span>3.leftPop(K key) / rightPop(K key, V …values)</span></a></h5><p>移除集合左边的第一个元素并返回这个元素 4.index(K key, long index) 获取集合指定位置的值 5.range(K key, long start, long end) 获取指定区间的值 6.ize(K key) 获取集合长度 7.leftPop(K key, long timeout, TimeUnit unit) / rightPop(K key, long timeout, TimeUnit unit) 移除集合中左边的元素在等待的时间里，如果超过等待的时间仍没有元素则退出 8.trim(K key, long start, long end) 截取集合元素长度，保留长度内的数据 9.remove(K key, long count, Object value) 从存储在键中的列表中删除等于值的元素的第一个计数事件。 count&gt; 0：删除等于从左到右移动的值的第一个元素； count&lt; 0：删除等于从右到左移动的值的第一个元素； count = 0：删除等于 value 的所有元素。</p><h4 id="三、opsforhash" tabindex="-1"><a class="header-anchor" href="#三、opsforhash"><span>三、opsForHash</span></a></h4><p>Hash 类型相关操作</p><h5 id="_1、put-h-key-hk-hashkey-hv-value" tabindex="-1"><a class="header-anchor" href="#_1、put-h-key-hk-hashkey-hv-value"><span>1、put(H key, HK hashKey, HV value)</span></a></h5><p>新增一个 Hash 值，key 为外层的 Hash 的 key 值，hashKey 为内层 Hash 的 key 值，value 为内层 Hash 的 key 对应的 value</p><h5 id="_2-get-h-key-object-hashkey" tabindex="-1"><a class="header-anchor" href="#_2-get-h-key-object-hashkey"><span>2.get(H key, Object hashKey)</span></a></h5><p>获取内层 hashKey 对应的 value</p><h5 id="_3-values-h-key" tabindex="-1"><a class="header-anchor" href="#_3-values-h-key"><span>3.values(H key)</span></a></h5><p>获取外层 Key 的存储的所有 hash，并将其封装在一个 Map 对象返回</p><h5 id="_4-haskey-h-key-object-hashkey" tabindex="-1"><a class="header-anchor" href="#_4-haskey-h-key-object-hashkey"><span>4.hasKey(H key, Object hashKey)</span></a></h5><p>判断 Key 中是否存在 hashKey 这个键值对</p><h5 id="_5-keys-h-key-、values-h-key" tabindex="-1"><a class="header-anchor" href="#_5-keys-h-key-、values-h-key"><span>5.keys(H key)、values(H key)</span></a></h5><p>前者获取所有 key，后者获取所有 key 对应的 value</p><h5 id="_6-size-h-key" tabindex="-1"><a class="header-anchor" href="#_6-size-h-key"><span>6.size(H key)</span></a></h5><p>获取 Hash 的长度</p><h5 id="_7-putall-h-key-map-extends-hk-extends-hv-m" tabindex="-1"><a class="header-anchor" href="#_7-putall-h-key-map-extends-hk-extends-hv-m"><span>7.putAll(H key, Map&lt;? extends HK,? extends HV&gt; m)</span></a></h5><p>以 Map 集合的形式添加键值对</p><h4 id="四、opsforset" tabindex="-1"><a class="header-anchor" href="#四、opsforset"><span>四、opsForSet</span></a></h4><p>Set 类型相关操作</p><h5 id="_1、add-k-key-v-values" tabindex="-1"><a class="header-anchor" href="#_1、add-k-key-v-values"><span>1、add(K key, V… values)</span></a></h5><p>向 key 对应的 value 值中批量添加值，可以是集合、数组、多参数</p><h5 id="_2-members-k-key" tabindex="-1"><a class="header-anchor" href="#_2-members-k-key"><span>2.members(K key)</span></a></h5><p>获取 key 对应的 value</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Set set = redisTemplate.opsForSet().members(&quot;key&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_3、size-k-key" tabindex="-1"><a class="header-anchor" href="#_3、size-k-key"><span>3、size(K key)</span></a></h5><p>获取 key 对应的值的长度</p><h5 id="_4、ismember-k-key-object-o" tabindex="-1"><a class="header-anchor" href="#_4、ismember-k-key-object-o"><span>4、isMember(K key, Object o)</span></a></h5><p>检查给定的元素是否在 Set 变量中</p><h5 id="_5、pop-k-key" tabindex="-1"><a class="header-anchor" href="#_5、pop-k-key"><span>5、pop(K key)</span></a></h5><p>弹出变量中的元素</p><h5 id="_6、remove-k-key-object-values" tabindex="-1"><a class="header-anchor" href="#_6、remove-k-key-object-values"><span>6、remove(K key, Object… values)</span></a></h5><p>批量移除元素。可以是集合、数组、多参数</p><h5 id="_7、randommember-k-key" tabindex="-1"><a class="header-anchor" href="#_7、randommember-k-key"><span>7、randomMember(K key)</span></a></h5><p>随机获取变量中的一个元素</p><h5 id="_8、randommembers-k-key-long-count" tabindex="-1"><a class="header-anchor" href="#_8、randommembers-k-key-long-count"><span>8、randomMembers(K key, long count)</span></a></h5><p>随机获取变量中的 count 个元素</p><h5 id="_9、delete-h-key-object-hashkeys" tabindex="-1"><a class="header-anchor" href="#_9、delete-h-key-object-hashkeys"><span>9、delete(H key, Object… hashKeys)</span></a></h5><p>删除 Key 变量中的键值对，可以传入多个参数，删除多个键值对。可以是集合、数组、多参数</p><h4 id="五、opsforzset" tabindex="-1"><a class="header-anchor" href="#五、opsforzset"><span>五、opsForZSet</span></a></h4><p>ZSet 相关操作,根据 score 分数进行从小到大排序</p><h5 id="_1、add-k-key-v-value-double-score" tabindex="-1"><a class="header-anchor" href="#_1、add-k-key-v-value-double-score"><span>1、add(K key, V value, double score)</span></a></h5><p>添加元素到变量中同时指定元素的分值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>redisTemplate.opsForZSet().add(&quot;zSetKey&quot;,&quot;A&quot;,1);</span></span>
<span class="line"><span>redisTemplate.opsForZSet().add(&quot;zSetKey&quot;,&quot;B&quot;,3);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、range-k-key-long-start-long-end" tabindex="-1"><a class="header-anchor" href="#_2、range-k-key-long-start-long-end"><span>2、range(K key, long start, long end)</span></a></h5><p>获取变量指定区间的元素，从下标 0 开始</p><h5 id="_3、score-k-key-object-o" tabindex="-1"><a class="header-anchor" href="#_3、score-k-key-object-o"><span>3、score(K key, Object o)</span></a></h5><p>获取元素的分值</p><h5 id="_4-rangebyscore-k-key-double-min-double-max" tabindex="-1"><a class="header-anchor" href="#_4-rangebyscore-k-key-double-min-double-max"><span>4.rangeByScore(K key, double min, double max)</span></a></h5><p>根据设置的 score 获取区间值。</p><h5 id="_5-rangebyscore-k-key-double-min-double-max-long-offset-long-count" tabindex="-1"><a class="header-anchor" href="#_5-rangebyscore-k-key-double-min-double-max-long-offset-long-count"><span>5.rangeByScore(K key, double min, double max,long offset, long count)</span></a></h5><p>根据设置的 score 获取区间值从给定下标和给定长度获取最终值。</p><h5 id="_6-count-k-key-double-min-double-max" tabindex="-1"><a class="header-anchor" href="#_6-count-k-key-double-min-double-max"><span>6.count(K key, double min, double max)</span></a></h5><p>获取区间值的个数</p><h4 id="所有的键值对都可以通过-delete-删除" tabindex="-1"><a class="header-anchor" href="#所有的键值对都可以通过-delete-删除"><span>所有的键值对都可以通过 delete 删除</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 删除一个Key</span></span>
<span class="line"><span>redisTemplate.delete(&quot;Key&quot;);</span></span>
<span class="line"><span>// 删除多个Key - 可以是集合、数组、多参数</span></span>
<span class="line"><span>redisTemplate.delete(list);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,84),l=[n];function h(p,d){return a(),s("div",null,l)}const k=e(t,[["render",h],["__file","RedisTemplate的opsFor操作.html.vue"]]),u=JSON.parse('{"path":"/zh/posts/java/redisson/RedisTemplate%E7%9A%84opsFor%E6%93%8D%E4%BD%9C.html","title":"RedisTemplate的opsFor操作","lang":"zh-CN","frontmatter":{"title":"RedisTemplate的opsFor操作","date":"2023-03-07T10:04:31.000Z","categories":"Redis","tags":["Redisson","RedisTemplate"],"description":"一、opsForValue Key-Value 操作 1、set(K key, V value) 向 Redis 新增一个 key-value，k-v 可以是泛型。 2.get(Object key) 3、set(K key, V value, long timeout, TimeUnit unit) 在原有的 set 基础上增加了过期时间,过了这个时...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/java/redisson/RedisTemplate%E7%9A%84opsFor%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"RedisTemplate的opsFor操作"}],["meta",{"property":"og:description","content":"一、opsForValue Key-Value 操作 1、set(K key, V value) 向 Redis 新增一个 key-value，k-v 可以是泛型。 2.get(Object key) 3、set(K key, V value, long timeout, TimeUnit unit) 在原有的 set 基础上增加了过期时间,过了这个时..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-20T00:28:24.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:tag","content":"Redisson"}],["meta",{"property":"article:tag","content":"RedisTemplate"}],["meta",{"property":"article:published_time","content":"2023-03-07T10:04:31.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-20T00:28:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RedisTemplate的opsFor操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-07T10:04:31.000Z\\",\\"dateModified\\":\\"2024-06-20T00:28:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[],"git":{"createdTime":1718787514000,"updatedTime":1718843304000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":2}]},"readingTime":{"minutes":4.56,"words":1368},"filePathRelative":"zh/posts/java/redisson/RedisTemplate的opsFor操作.md","localizedDate":"2023年3月7日","excerpt":"<h4>一、opsForValue</h4>\\n<p>Key-Value 操作</p>\\n<h5>1、set(K key, V value)</h5>\\n<p>向 Redis 新增一个 key-value，k-v 可以是泛型。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E5C07B\\">redisTemplate</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">opsForValue</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">().</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">set</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">(obj1,obj2);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,u as data};

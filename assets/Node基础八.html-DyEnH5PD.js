import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,b as a}from"./app-DZw5DSeQ.js";const l={},e=a(`<h2 id="八-深入事件循环" tabindex="-1"><a class="header-anchor" href="#八-深入事件循环"><span>八. 深入事件循环</span></a></h2><p>事件循环是什么？事实上我把事件循环理解成我们编写的JavaScript和浏览器或者Node之间的一个桥梁。</p><p>浏览器的事件循环是一个我们编写的JavaScript代码和浏览器API调用(setTimeout/AJAX/监听事件等)的一个桥梁, 桥梁之间他们通过回调函数进行沟通。</p><p>Node的事件循环是一个我们编写的JavaScript代码和系统调用（file system、network等）之间的一个桥梁, 桥梁之间他们通过回调函数进行沟通的.</p><h2 id="浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#浏览器的事件循环"><span>浏览器的事件循环</span></a></h2><h3 id="_1-1-进程和线程" tabindex="-1"><a class="header-anchor" href="#_1-1-进程和线程"><span>1.1. 进程和线程</span></a></h3><p>线程和进程是操作系统中的两个概念：</p><ul><li>进程（process）：计算机已经运行的程序；</li><li>线程（thread）：操作系统能够运行运算调度的最小单位；</li></ul><p>听起来很抽象，我们直观一点解释：</p><ul><li>进程：我们可以认为，启动一个应用程序，就会默认启动一个进程（也可能是多个进程）；</li><li>线程：每一个进程中，都会启动一个线程用来执行程序中的代码，这个线程被称之为主线程；</li><li>所以我们也可以说进程是线程的容器；</li></ul><p>再用一个形象的例子解释：</p><ul><li>操作系统类似于一个工厂；</li><li>工厂中里有很多车间，这个车间就是进程；</li><li>每个车间可能有一个以上的工人在工厂，这个工人就是线程；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XtUsUn5FSYN6W8GHnyUeVKj5mQBt8e4rOnoZWJE3mIkCL73XDfmsRAA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">操作系统、线程、进程</p><p>操作系统是如何做到同时让多个进程（边听歌、边写代码、边查阅资料）同时工作呢？</p><ul><li>这是因为CPU的运算速度非常快，它可以快速的在多个进程之间迅速的切换；</li><li>当我们的进程中的线程获取获取到时间片时，就可以快速执行我们编写的代码；</li><li>对于用于来说是感受不到这种快速的切换的；</li></ul><p>你可以在Mac的活动监视器或者Windows的资源管理器中查看到很多进程：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XO1TDXZ8GcVxJO1XibKsVsmuWgVIicCeGK487v61ShLCNEkxjwgVGYLmQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">活动监视器</p><h3 id="_1-2-浏览器和javascript" tabindex="-1"><a class="header-anchor" href="#_1-2-浏览器和javascript"><span>1.2. 浏览器和JavaScript</span></a></h3><p>我们经常会说JavaScript是单线程的，但是JavaScript的线程应该有自己的容器进程：浏览器或者Node。</p><p>浏览器是一个进程吗，它里面只有一个线程吗？</p><ul><li>目前多数的浏览器其实都是多进程的，当我们打开一个tab页面时就会开启一个新的进程，这是为了防止一个页面卡死而造成所有页面无法响应，整个浏览器需要强制退出；</li><li>每个进程中又有很多的线程，其中包括执行JavaScript代码的线程；</li></ul><p>但是JavaScript的代码执行是在一个单独的线程中执行的：</p><ul><li>这就意味着JavaScript的代码，在同一个时刻只能做一件事；</li><li>如果这件事是非常耗时的，就意味着当前的线程就会被阻塞；</li></ul><p>分析下面代码的执行过程：</p><ul><li>定义变量name；</li><li>执行log函数，函数会被放入到调用栈中执行；</li><li>调用bar()函数，被压入到调用栈中，但是执行未结束；</li><li>bar因为调用了sum，sum函数被压入到调用栈中，获取到结果后出栈；</li><li>bar获取到结果后出栈，获取到结果result；</li><li>将log函数压入到调用栈，log被执行，并且出栈；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const name = &quot;coderwhy&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 1.将该函数放入到调用栈中被执行</span></span>
<span class="line"><span>console.log(name);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 2. 调用栈</span></span>
<span class="line"><span>function sum(num1, num2) {</span></span>
<span class="line"><span>  return num1 + num2;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function bar() {</span></span>
<span class="line"><span>  return sum(20, 30);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(bar());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-浏览器的事件循环" tabindex="-1"><a class="header-anchor" href="#_1-3-浏览器的事件循环"><span>1.3. 浏览器的事件循环</span></a></h3><p>如果在执行JavaScript代码的过程中，有异步操作呢？</p><ul><li>中间我们插入了一个setTimeout的函数调用；</li><li>这个函数被放到入调用栈中，执行会立即结束，并不会阻塞后续代码的执行；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const name = &quot;coderwhy&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 1.将该函数放入到调用栈中被执行</span></span>
<span class="line"><span>console.log(name);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 2.调用栈</span></span>
<span class="line"><span>function sum(num1, num2) {</span></span>
<span class="line"><span>  return num1 + num2;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function bar() {</span></span>
<span class="line"><span>  return sum(20, 30);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;settimeout&quot;);</span></span>
<span class="line"><span>}, 1000);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const result = bar();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(result);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么，传入的一个函数（比如我们称之为timer函数），会在什么时候被执行呢？</p><ul><li>事实上，setTimeout是调用了web api，在合适的时机，会将timer函数加入到一个事件队列中；</li><li>事件队列中的函数，会被放入到调用栈中，在调用栈中被执行；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XicKiaaY5IS7ibrvzWL2g5xMuqBHjIJqml2TOueicHDAMlAmle9T8L9dZAg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">浏览器的事件循环</p><h3 id="_1-4-宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#_1-4-宏任务和微任务"><span>1.4. 宏任务和微任务</span></a></h3><p>但是事件循环中并非只维护着一个队列，事实上是有两个队列：</p><ul><li>宏任务队列（macrotask queue）：ajax、setTimeout、setInterval、DOM监听、UI Rendering等</li><li>微任务队列（microtask queue）：Promise的then回调、 Mutation Observer API、queueMicrotask()等</li></ul><p>那么事件循环对于两个队列的优先级是怎么样的呢？</p><ul><li><p>1.main script中的代码优先执行（编写的顶层script代码）；</p></li><li><p>2.在执行任何一个宏任务之前（不是队列，是一个宏任务），都会先查看微任务队列中是否有任务需要执行</p></li><li><ul><li>也就是宏任务执行之前，必须保证微任务队列是空的；</li></ul></li><li><p>如果不为空，那么就优先执行微任务队列中的任务（回调）；</p></li></ul><p>我们来看一个面试题：执行结果如何？</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;set1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">      console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;then4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;then2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;pr1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;then1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;set2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">queueMicrotask</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;queueMicrotask1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;then3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>pr1</span></span>
<span class="line"><span>2</span></span>
<span class="line"><span>then1</span></span>
<span class="line"><span>queueMicrotask1</span></span>
<span class="line"><span>then3</span></span>
<span class="line"><span>set1</span></span>
<span class="line"><span>then2</span></span>
<span class="line"><span>then4</span></span>
<span class="line"><span>set2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>async、await是Promise的一个语法糖：</p><ul><li>我们可以将await关键字后面执行的代码，看做是包裹在<code>(resolve, reject) =&gt; {函数执行}</code>中的代码；</li><li>await的下一条语句，可以看做是<code>then(res =&gt; {函数执行})</code>中的代码；</li></ul><p>今日头条的面试题：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> async1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;async1 start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;async1 end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> async2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;async2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;script start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;setTimeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">async1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;promise1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;promise2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;script end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>script start</span></span>
<span class="line"><span>async1 start</span></span>
<span class="line"><span>async2</span></span>
<span class="line"><span>promise1</span></span>
<span class="line"><span>script end</span></span>
<span class="line"><span>async1 end</span></span>
<span class="line"><span>promise2</span></span>
<span class="line"><span>setTimeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node的事件循环" tabindex="-1"><a class="header-anchor" href="#node的事件循环"><span>Node的事件循环</span></a></h2><h3 id="_2-1-node的事件循环" tabindex="-1"><a class="header-anchor" href="#_2-1-node的事件循环"><span>2.1. Node的事件循环</span></a></h3><p>浏览器中的EventLoop是根据HTML5定义的规范来实现的，不同的浏览器可能会有不同的实现，而Node中是由libuv实现的。</p><p>我们来看在很早就给大家展示的Node架构图：</p><ul><li>我们会发现libuv中主要维护了一个EventLoop和worker threads（线程池）；</li><li>EventLoop负责调用系统的一些其他操作：文件的IO、Network、child-processes等</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XmLD9LsQGqIzemGdh5IOTUgR8YibDiciaRFzLdicz8YUkq2BIlSENicJ2Mdg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">Node的架构图</p><p>libuv到底是什么呢？</p><ul><li>libuv is a multi-platform support library with a focus on asynchronous I/O. It was primarily developed for use by Node.js, but it&#39;s also used by Luvit, Julia, pyuv, and others.</li><li>libuv是一个多平台的专注于异步IO的库，它最初是为Node开发的，但是现在也被使用到Luvit、Julia、pyuv等其他地方；</li></ul><p>libuv到底帮助我们做了什么事情呢？</p><ul><li>我们以文件操作为例，来讲解一下它内部的结构；</li></ul><h3 id="_2-2-阻塞io和非阻塞io" tabindex="-1"><a class="header-anchor" href="#_2-2-阻塞io和非阻塞io"><span>2.2. 阻塞IO和非阻塞IO</span></a></h3><p>如果我们希望在程序中对一个文件进行操作，那么我们就需要打开这个文件：通过文件描述符。</p><ul><li>我们思考：JavaScript可以直接对一个文件进行操作吗？</li><li>看起来是可以的，但是事实上我们任何程序中的文件操作都是需要进行系统调用（操作系统封装了文件系统）；</li><li>事实上对文件的操作，是一个操作系统的IO操作（输入、输出）；</li></ul><p>操作系统为我们提供了<code>阻塞式调用</code>和<code>非阻塞式调用</code>：</p><ul><li><strong>阻塞式调用：</strong> 调用结果返回之前，当前线程处于阻塞态（阻塞态CPU是不会分配时间片的），调用线程只有在得到调用结果之后才会继续执行。</li><li><strong>非阻塞式调用：</strong> 调用执行之后，当前线程不会停止执行，只需要过一段时间来检查一下有没有结果返回即可。</li></ul><p>所以我们开发中的很多耗时操作，都可以基于这样的 <code>非阻塞式调用</code>：</p><ul><li>比如网络请求本身使用了Socket通信，而Socket本身提供了select模型，可以进行<code>非阻塞方式的工作</code>；</li><li>比如文件读写的IO操作，我们可以使用操作系统提供的<code>基于事件的回调机制</code>；</li></ul><p>但是非阻塞IO也会存在一定的问题：我们并没有获取到需要读取（我们以读取为例）的结果</p><ul><li>那么就意味着为了可以知道是否读取到了完整的数据，我们需要频繁的去确定读取到的数据是否是完整的；</li><li>这个过程我们称之为轮训操作；</li></ul><p>那么这个轮训的工作由谁来完成呢？</p><ul><li>如果我们的主线程频繁的去进行轮训的工作，那么必然会大大降低性能；</li><li>并且开发中我们可能不只是一个文件的读写，可能是多个文件；</li><li>而且可能是多个功能：网络的IO、数据库的IO、子进程调用；</li></ul><p>libuv提供了一个线程池（Thread Pool）：</p><ul><li>线程池会负责所有相关的操作，并且会通过轮训等方式等待结果；</li><li>当获取到结果时，就可以将对应的回调放到事件循环（某一个事件队列）中；</li><li>事件循环就可以负责接管后续的回调工作，告知JavaScript应用程序执行对应的回调函数；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XDt5ov0ibB9QjGI59tGpFyK7uObjfffVTzm6m95Vpv1pLYOBib2iaeNPww/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">Event loop in node.js</p><p>阻塞和非阻塞，同步和异步有什么区别？</p><ul><li><p>阻塞和非阻塞是对于被调用者来说的；</p></li><li><ul><li>在我们这里就是系统调用，操作系统为我们提供了阻塞调用和非阻塞调用；</li></ul></li><li><p>同步和异步是对于调用者来说的；</p></li><li><ul><li>在我们这里就是自己的程序；</li></ul></li><li><p>如果我们在发起调用之后，不会进行其他任何的操作，只是等待结果，这个过程就称之为同步调用；</p></li><li><p>如果我们再发起调用之后，并不会等待结果，继续完成其他的工作，等到有回调时再去执行，这个过程就是异步调用；</p></li></ul><h3 id="_2-3-node事件循环的阶段" tabindex="-1"><a class="header-anchor" href="#_2-3-node事件循环的阶段"><span>2.3. Node事件循环的阶段</span></a></h3><p>我们最前面就强调过，事件循环像是一个桥梁，是连接着应用程序的JavaScript和系统调用之间的通道：</p><ul><li>无论是我们的文件IO、数据库、网络IO、定时器、子进程，在完成对应的操作后，都会将对应的结果和回调函数放到事件循环（任务队列）中；</li><li>事件循环会不断的从任务队列中取出对应的事件（回调函数）来执行；</li></ul><p>但是一次完整的事件循环Tick分成很多个阶段：</p><ul><li><strong>定时器（Timers）</strong>：本阶段执行已经被 <code>setTimeout()</code> 和 <code>setInterval()</code> 的调度回调函数。</li><li><strong>待定回调（Pending Callback）</strong>：对某些系统操作（如TCP错误类型）执行回调，比如TCP连接时接收到ECONNREFUSED。</li><li><strong>idle, prepare</strong>：仅系统内部使用。</li><li><strong>轮询（Poll）</strong>：检索新的 I/O 事件；执行与 I/O 相关的回调；</li><li><strong>检测</strong>：<code>setImmediate()</code> 回调函数在这里执行。</li><li><strong>关闭的回调函数</strong>：一些关闭的回调函数，如：<code>socket.on(&#39;close&#39;, ...)</code>。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XPV1Jwkricj1K4K44U8PQKJCHtC4JgyreAIK9n8icAibPmwQ7BSmY3Mtaw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">一次tick的事件循环阶段</p><p>我们会发现从一次事件循环的Tick来说，Node的事件循环更复杂，它也分为微任务和宏任务：</p><ul><li>宏任务（macrotask）：setTimeout、setInterval、IO事件、setImmediate、close事件；</li><li>微任务（microtask）：Promise的then回调、process.nextTick、queueMicrotask；</li></ul><p>但是，Node中的事件循环不只是 <code>微任务队列</code>和 <code>宏任务队列</code>：</p><ul><li><p>微任务队列：</p></li><li><ul><li>next tick queue：process.nextTick；</li></ul></li><li><p>other queue：Promise的then回调、queueMicrotask；</p></li><li><p>宏任务队列：</p></li><li><ul><li>timer queue：setTimeout、setInterval；</li></ul></li><li><p>poll queue：IO事件；</p></li><li><p>check queue：setImmediate；</p></li><li><p>close queue：close事件；</p></li></ul><p>所以，在每一次事件循环的tick中，会按照如下顺序来执行代码：</p><ul><li>next tick microtask queue；</li><li>other microtask queue；</li><li>timer queue；</li><li>poll queue；</li><li>check queue；</li><li>close queue；</li></ul><h3 id="_2-4-node代码执行面试" tabindex="-1"><a class="header-anchor" href="#_2-4-node代码执行面试"><span>2.4. Node代码执行面试</span></a></h3><p>面试题一：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>async function async1() {</span></span>
<span class="line"><span>  console.log(&#39;async1 start&#39;)</span></span>
<span class="line"><span>  await async2()</span></span>
<span class="line"><span>  console.log(&#39;async1 end&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>async function async2() {</span></span>
<span class="line"><span>  console.log(&#39;async2&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(&#39;script start&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(function () {</span></span>
<span class="line"><span>  console.log(&#39;setTimeout0&#39;)</span></span>
<span class="line"><span>}, 0)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(function () {</span></span>
<span class="line"><span>  console.log(&#39;setTimeout2&#39;)</span></span>
<span class="line"><span>}, 300)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setImmediate(() =&gt; console.log(&#39;setImmediate&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>process.nextTick(() =&gt; console.log(&#39;nextTick1&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>async1();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>process.nextTick(() =&gt; console.log(&#39;nextTick2&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>new Promise(function (resolve) {</span></span>
<span class="line"><span>  console.log(&#39;promise1&#39;)</span></span>
<span class="line"><span>  resolve();</span></span>
<span class="line"><span>  console.log(&#39;promise2&#39;)</span></span>
<span class="line"><span>}).then(function () {</span></span>
<span class="line"><span>  console.log(&#39;promise3&#39;)</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(&#39;script end&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>script start</span></span>
<span class="line"><span>async1 start</span></span>
<span class="line"><span>async2</span></span>
<span class="line"><span>promise1</span></span>
<span class="line"><span>promise2</span></span>
<span class="line"><span>script end</span></span>
<span class="line"><span>nextTick</span></span>
<span class="line"><span>async1 end</span></span>
<span class="line"><span>promise3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout0</span></span>
<span class="line"><span>setImmediate</span></span>
<span class="line"><span>setTimeout2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>面试题二：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;setTimeout&quot;);</span></span>
<span class="line"><span>}, 0);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setImmediate(() =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;setImmediate&quot;);</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>情况一：</span></span>
<span class="line"><span>setTimeout</span></span>
<span class="line"><span>setImmediate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>情况二：</span></span>
<span class="line"><span>setImmediate</span></span>
<span class="line"><span>setTimeout</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么会出现不同的情况呢？</p><ul><li>在Node源码的deps/uv/src/timer.c中141行，有一个 <code>uv__next_timeout</code>的函数；</li><li>这个函数决定了，poll阶段要不要阻塞在这里；</li><li>阻塞在这里的目的是当有异步IO被处理时，尽可能快的让代码被执行；</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> uv__next_timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> uv_loop_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> loop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> heap_node* heap_node;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> uv_timer_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">* handle;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> diff</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 计算距离当前时间节点最小的计时器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  heap_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> heap_min</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">timer_heap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">loop</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果为空, 那么返回-1,表示为阻塞状态</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">heap_node</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/* block indefinitely */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果计时器的时间小于当前loop的开始时间, 那么返回0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 继续执行后续阶段, 并且开启下一次tick</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> container_of</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">heap_node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">uv_timer_t</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">heap_node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> loop</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 如果不大于loop的开始时间, 那么会返回时间差</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> handle</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">timeout</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> loop</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> INT_MAX</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> INT_MAX</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">diff</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和上面有什么关系呢？</p><ul><li><p>情况一：如果事件循环开启的时间(ms)是小于 <code>setTimeout</code>函数的执行时间的；</p></li><li><ul><li>也就意味着先开启了event-loop，但是这个时候执行到timer阶段，并没有定时器的回调被放到入 timer queue中；</li></ul></li><li><p>所以没有被执行，后续开启定时器和检测到有setImmediate时，就会跳过poll阶段，向后继续执行；</p></li><li><p>这个时候是先检测 <code>setImmediate</code>，第二次的tick中执行了timer中的 <code>setTimeout</code>；</p></li><li><p>情况二：如果事件循环开启的时间(ms)是大于 <code>setTimeout</code>函数的执行时间的；</p></li><li><ul><li>这就意味着在第一次 tick中，已经准备好了timer queue；</li></ul></li><li><p>所以会直接按照顺序执行即可；</p></li></ul>`,100),p=[e];function t(h,d){return n(),i("div",null,p)}const c=s(l,[["render",t],["__file","Node基础八.html.vue"]]),o=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%85%AB.html","title":"Node基础八","lang":"zh-CN","frontmatter":{"title":"Node基础八","date":"2022-10-01T12:28:50.000Z","categories":"Node","tags":"Node Node基础系列","pre":"Node基础七","next":"Node基础九","description":"八. 深入事件循环 事件循环是什么？事实上我把事件循环理解成我们编写的JavaScript和浏览器或者Node之间的一个桥梁。 浏览器的事件循环是一个我们编写的JavaScript代码和浏览器API调用(setTimeout/AJAX/监听事件等)的一个桥梁, 桥梁之间他们通过回调函数进行沟通。 Node的事件循环是一个我们编写的JavaScript代...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%85%AB.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础八"}],["meta",{"property":"og:description","content":"八. 深入事件循环 事件循环是什么？事实上我把事件循环理解成我们编写的JavaScript和浏览器或者Node之间的一个桥梁。 浏览器的事件循环是一个我们编写的JavaScript代码和浏览器API调用(setTimeout/AJAX/监听事件等)的一个桥梁, 桥梁之间他们通过回调函数进行沟通。 Node的事件循环是一个我们编写的JavaScript代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XtUsUn5FSYN6W8GHnyUeVKj5mQBt8e4rOnoZWJE3mIkCL73XDfmsRAA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-10-01T12:28:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础八\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XtUsUn5FSYN6W8GHnyUeVKj5mQBt8e4rOnoZWJE3mIkCL73XDfmsRAA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XO1TDXZ8GcVxJO1XibKsVsmuWgVIicCeGK487v61ShLCNEkxjwgVGYLmQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XicKiaaY5IS7ibrvzWL2g5xMuqBHjIJqml2TOueicHDAMlAmle9T8L9dZAg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XmLD9LsQGqIzemGdh5IOTUgR8YibDiciaRFzLdicz8YUkq2BIlSENicJ2Mdg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XDt5ov0ibB9QjGI59tGpFyK7uObjfffVTzm6m95Vpv1pLYOBib2iaeNPww/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutykVxmqElxsSRqd40pBa9XPV1Jwkricj1K4K44U8PQKJCHtC4JgyreAIK9n8icAibPmwQ7BSmY3Mtaw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-10-01T12:28:50.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"八. 深入事件循环","slug":"八-深入事件循环","link":"#八-深入事件循环","children":[]},{"level":2,"title":"浏览器的事件循环","slug":"浏览器的事件循环","link":"#浏览器的事件循环","children":[{"level":3,"title":"1.1. 进程和线程","slug":"_1-1-进程和线程","link":"#_1-1-进程和线程","children":[]},{"level":3,"title":"1.2. 浏览器和JavaScript","slug":"_1-2-浏览器和javascript","link":"#_1-2-浏览器和javascript","children":[]},{"level":3,"title":"1.3. 浏览器的事件循环","slug":"_1-3-浏览器的事件循环","link":"#_1-3-浏览器的事件循环","children":[]},{"level":3,"title":"1.4. 宏任务和微任务","slug":"_1-4-宏任务和微任务","link":"#_1-4-宏任务和微任务","children":[]}]},{"level":2,"title":"Node的事件循环","slug":"node的事件循环","link":"#node的事件循环","children":[{"level":3,"title":"2.1. Node的事件循环","slug":"_2-1-node的事件循环","link":"#_2-1-node的事件循环","children":[]},{"level":3,"title":"2.2. 阻塞IO和非阻塞IO","slug":"_2-2-阻塞io和非阻塞io","link":"#_2-2-阻塞io和非阻塞io","children":[]},{"level":3,"title":"2.3. Node事件循环的阶段","slug":"_2-3-node事件循环的阶段","link":"#_2-3-node事件循环的阶段","children":[]},{"level":3,"title":"2.4. Node代码执行面试","slug":"_2-4-node代码执行面试","link":"#_2-4-node代码执行面试","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":12.19,"words":3658},"filePathRelative":"zh/posts/node/base/Node基础八.md","localizedDate":"2022年10月1日","excerpt":"<h2>八. 深入事件循环</h2>\\n<p>事件循环是什么？事实上我把事件循环理解成我们编写的JavaScript和浏览器或者Node之间的一个桥梁。</p>\\n<p>浏览器的事件循环是一个我们编写的JavaScript代码和浏览器API调用(setTimeout/AJAX/监听事件等)的一个桥梁, 桥梁之间他们通过回调函数进行沟通。</p>\\n<p>Node的事件循环是一个我们编写的JavaScript代码和系统调用（file system、network等）之间的一个桥梁, 桥梁之间他们通过回调函数进行沟通的.</p>\\n<h2>浏览器的事件循环</h2>\\n<h3>1.1. 进程和线程</h3>","autoDesc":true}');export{c as comp,o as data};

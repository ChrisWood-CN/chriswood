import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as i,b as a}from"./app-DZw5DSeQ.js";const n={},l=a(`<h2 id="docker-搭建-hbase" tabindex="-1"><a class="header-anchor" href="#docker-搭建-hbase"><span>docker 搭建 hbase</span></a></h2><h3 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h3><p>Linux 系统：centos 7.6 Hbase：harisekhon/hbase</p><h3 id="hbase" tabindex="-1"><a class="header-anchor" href="#hbase"><span>Hbase</span></a></h3><p>1.拉取镜像 并部署启动</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>方式一 手动分配所有端口</span></span>
<span class="line"><span>docker run -d -p 2181:2181 \\</span></span>
<span class="line"><span>-p 8080:8080 -p 8085:8085 -p 9090:9090 -p 9095:9095 \\</span></span>
<span class="line"><span>-p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301  -p 16030:16030 -p 16020:16020 \\</span></span>
<span class="line"><span>--name hbase harisekhon/hbase</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方式二 系统自动映射端口（-P主机随机分配端口与宿主机上端口进行映射）</span></span>
<span class="line"><span>docker run -d --name hbase -P harisekhon/hbase</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方式三 只映射web页面的端口（推荐）</span></span>
<span class="line"><span>docker run -d --name hbase -p 16010:16010 harisekhon/hbase</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2181	zookeeper	zkCli.sh -server zookeeper1:2181	客户端接入</span></span>
<span class="line"><span>16000	HBase Master	hbase-client-1.x.x.jar	RegionServer接入</span></span>
<span class="line"><span>16010	HBase Master	http://namenode1:16010/	集群监控</span></span>
<span class="line"><span>16020	HBase RegionServer		客户端接入</span></span>
<span class="line"><span>16030	HBase RegionServer	http://datanode1:16030/	节点监控</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开网址： http://xxx.xxx.xxx.xxx:16010/master-status 2.Host 文件设置 如果在本地访问 Hbase 网址，还需要在 HOST 文件中添加 Hbase 与域名的映射。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>xxx.xxx.xxx.xxx b0fbee058d4e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3.环境变量 实际项目在开发环境利用 Java 来操作 Hbase 所以还需要在本地配置下 Hadoop 环境变量。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>HODOOP_HOME： D:\\Environment\\Hadoop\\2.10.1</span></span>
<span class="line"><span>PATH： %HODOOP_HOME%\\bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>4.hbase 操作</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker exec -it hbase bash</span></span>
<span class="line"><span>cd hbase-2.1.3/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>进入 hbase 客户端</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>./hbase shell</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>创建命名空间</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>create_namespace &#39;test&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>查看命名空间</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>list_namespace</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注：HBase 系统默认定义了两个默认的 namespace hbase：系统内建表，包括 namespace 和 meta 表 default：用户建表时未指定 namespace 的表都创建在此</p></blockquote><ul><li>删除命名空间</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>drop_namespace &#39;test&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>创建表</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>create &#39;命名空间:表名&#39;，{NAME =&gt; ’列族名‘, &#39;列族属性&#39; =&gt;  &#39;&#39;}</span></span>
<span class="line"><span>create &#39;test:user&#39;, {NAME =&gt; &#39;aaa&#39;, VERSIONS =&gt; &#39;3&#39;, TTL =&gt; &#39;2147483647&#39;, &#39;BLOOMFILTER&#39; =&gt; &#39;ROW&#39;},</span></span>
<span class="line"><span>					{NAME =&gt; &#39;bbb&#39;, VERSIONS =&gt; &#39;3&#39;, TTL =&gt; &#39;2147483647&#39;, &#39;BLOOMFILTER&#39; =&gt; &#39;ROW&#39;}</span></span>
<span class="line"><span># 意思是，在 test 命名空间下创建 user 表，表中有两个列族，分别是列 aaa 和 bbb，版本有3个，存活时间 2147483647(s)，布隆过滤器过滤依据是 RowKey。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看表结构</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>desc &#39;命名空间:表名&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>修改列族属性</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>alter &#39;命名空间:表名&#39;, NAME =&gt; &#39;列族名&#39;, 列族属性=&gt; &#39;NewValue&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>查看命名空间下的表</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>list_namespace_tables &#39;命名空间&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>删除表</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>disable &#39;test:user&#39; # 删除前要先禁用表</span></span>
<span class="line"><span>drop &#39;test:user&#39; 	# 执行删除</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>扫描数据（多行）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>scan &#39;命名空间:表名&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>添加数据</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>put ‘命名空间:表名’, &#39;RowKey&#39;, &#39;列族:列&#39;, &#39;具体值&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>put &#39;test:user&#39;,&#39;1&#39;, &#39;aaa:name&#39;, &#39;zhangsan&#39;</span></span>
<span class="line"><span>put &#39;test:user&#39;,&#39;1&#39;, &#39;bbb:phone&#39;, &#39;12345678919&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>put &#39;test:user&#39;,&#39;2&#39;, &#39;aaa:name&#39;, &#39;lisi&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：HBase 是列族式数据库，所以是在真正添加数据时才指定有哪些列</p></blockquote><blockquote><p>在建表时设置了 Version=3 ，aaa:name 可以保存三个值 put &#39;test:user&#39;,&#39;1&#39;, &#39;b:name&#39;, &#39;wangwu&#39; put &#39;test:user&#39;,&#39;1&#39;, &#39;b:name&#39;, &#39;zhaoliu&#39; 为什么添加后再 scan 看不到添加的数据呢？ 因为 scan 扫描多行，所以显示的是所有列的最新版本；要获取一个列列数据的所有版本要通过单列查询 get…</p></blockquote><ul><li>获取数据（单行）</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>get &#39;命名空间:表名&#39;, &#39;RowKey&#39; 						 # 获取指定行键的数据</span></span>
<span class="line"><span>get &#39;命名空间:表名&#39;, &#39;RowKey&#39;, {COLUMN =&gt; &#39;列族:列&#39;}    # 获取指定行键的指定列的数据</span></span>
<span class="line"><span>get &#39;命名空间:表名&#39;, &#39;RowKey&#39;, {COLUMN =&gt; &#39;列族:列&#39;, VERSIONS =&gt; n}   # 获取指定行键的指定列的数据，显示n个版本</span></span>
<span class="line"><span></span></span>
<span class="line"><span>get &#39;test:user&#39;, &#39;1&#39;, {COLUMN =&gt; &#39;aaa:name&#39;, VERSIONS =&gt; 3} # 注：建表时设置的 3，即使你这写个 4，也只能返回三行数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更新数据</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>put ‘命名空间:表名’, &#39;RowKey&#39;, &#39;列族:列&#39;, &#39;NewValue&#39; #更新其实就是追加（如果此时数据个数到达 Version 数了，那么前面最老的版本就会被淘汰）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>删除数据</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>delete &#39;命名空间:表名&#39;, &#39;RowKey&#39;, &#39;列族:列&#39;, 时间戳（注：如果不指定时间戳，则默认删除最新版本）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>已经有 4 条数据了 删除最新的一条 则之前三条会出来 重点：HBase 的删除只是打上了删除了标记（墓碑标记），跟更新一样，并不是真正移除，过早的版本会在执行 Major Compaction 时真正删除</p></blockquote><ul><li>清空表中数据</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>truncate\` &#39;命名空间:表名&#39; # 三步：1.禁用 2.删除 3.重建</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注：HBase 的脚本是.hsh，跟.sql 一个意思。</p></blockquote>`,47),t=[l];function d(r,p){return i(),s("div",null,t)}const b=e(n,[["render",d],["__file","docker部署hbase.html.vue"]]),o=JSON.parse('{"path":"/zh/posts/hbase/docker%E9%83%A8%E7%BD%B2hbase.html","title":"docker部署hbase","lang":"zh-CN","frontmatter":{"title":"docker部署hbase","date":"2023-02-06T15:22:50.000Z","categories":"hbase","tags":["deploy","hbase"],"description":"docker 搭建 hbase 环境 Linux 系统：centos 7.6 Hbase：harisekhon/hbase Hbase 1.拉取镜像 并部署启动 打开网址： http://xxx.xxx.xxx.xxx:16010/master-status 2.Host 文件设置 如果在本地访问 Hbase 网址，还需要在 HOST 文件中添加 Hb...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/hbase/docker%E9%83%A8%E7%BD%B2hbase.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"docker部署hbase"}],["meta",{"property":"og:description","content":"docker 搭建 hbase 环境 Linux 系统：centos 7.6 Hbase：harisekhon/hbase Hbase 1.拉取镜像 并部署启动 打开网址： http://xxx.xxx.xxx.xxx:16010/master-status 2.Host 文件设置 如果在本地访问 Hbase 网址，还需要在 HOST 文件中添加 Hb..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T09:19:00.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:tag","content":"deploy"}],["meta",{"property":"article:tag","content":"hbase"}],["meta",{"property":"article:published_time","content":"2023-02-06T15:22:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T09:19:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker部署hbase\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-06T15:22:50.000Z\\",\\"dateModified\\":\\"2024-06-19T09:19:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"docker 搭建 hbase","slug":"docker-搭建-hbase","link":"#docker-搭建-hbase","children":[{"level":3,"title":"环境","slug":"环境","link":"#环境","children":[]},{"level":3,"title":"Hbase","slug":"hbase","link":"#hbase","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718788740000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":2}]},"readingTime":{"minutes":3.36,"words":1009},"filePathRelative":"zh/posts/hbase/docker部署hbase.md","localizedDate":"2023年2月6日","excerpt":"<h2>docker 搭建 hbase</h2>\\n<h3>环境</h3>\\n<p>Linux 系统：centos 7.6 Hbase：harisekhon/hbase</p>\\n<h3>Hbase</h3>\\n<p>1.拉取镜像 并部署启动</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>方式一 手动分配所有端口</span></span>\\n<span class=\\"line\\"><span>docker run -d -p 2181:2181 \\\\</span></span>\\n<span class=\\"line\\"><span>-p 8080:8080 -p 8085:8085 -p 9090:9090 -p 9095:9095 \\\\</span></span>\\n<span class=\\"line\\"><span>-p 16000:16000 -p 16010:16010 -p 16201:16201 -p 16301:16301  -p 16030:16030 -p 16020:16020 \\\\</span></span>\\n<span class=\\"line\\"><span>--name hbase harisekhon/hbase</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>方式二 系统自动映射端口（-P主机随机分配端口与宿主机上端口进行映射）</span></span>\\n<span class=\\"line\\"><span>docker run -d --name hbase -P harisekhon/hbase</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>方式三 只映射web页面的端口（推荐）</span></span>\\n<span class=\\"line\\"><span>docker run -d --name hbase -p 16010:16010 harisekhon/hbase</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>2181\\tzookeeper\\tzkCli.sh -server zookeeper1:2181\\t客户端接入</span></span>\\n<span class=\\"line\\"><span>16000\\tHBase Master\\thbase-client-1.x.x.jar\\tRegionServer接入</span></span>\\n<span class=\\"line\\"><span>16010\\tHBase Master\\thttp://namenode1:16010/\\t集群监控</span></span>\\n<span class=\\"line\\"><span>16020\\tHBase RegionServer\\t\\t客户端接入</span></span>\\n<span class=\\"line\\"><span>16030\\tHBase RegionServer\\thttp://datanode1:16030/\\t节点监控</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{b as comp,o as data};

import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as n,b as a}from"./app-BzNy2ypN.js";const e={},l=a(`<h2 id="七-脚手架开发" tabindex="-1"><a class="header-anchor" href="#七-脚手架开发"><span>七.脚手架开发</span></a></h2><p>目前前端工程化开发过程中，我们会使用各种各样的脚手架，vue-cli、create-react-app，当然也包括webpack、gulp、rollup、vite等工具。</p><p>这些工具是怎么开发出来的呢？当我们执行一个命令时，它们做了什么事情？是怎么样完成的一系列操作？</p><p>这里我开发了一个coderwhy的脚手架：一个帮助你快速搭建和开发前端项目的CLI。</p><p>文档内容分成两部分：</p><p>第一部分：coderwhy使用说明；</p><p>第二部分：coderwhy脚手架开发过程；</p><p>如何安装？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm install coderwhy -g</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用说明" tabindex="-1"><a class="header-anchor" href="#使用说明"><span>使用说明</span></a></h3><h3 id="一-创建项目" tabindex="-1"><a class="header-anchor" href="#一-创建项目"><span>一. 创建项目</span></a></h3><p>目前支持Vue，后期会支持React，Angular考虑中~</p><p>vue项目模块已经帮你配置：</p><ul><li>常用的目录结构（你可以在此基础上修改）</li><li>vue.config.js（其中配置了别名，你可以自行修改和配置更多）</li><li>axios（网络请求axios的安装以及二次封装）</li><li>vue-router（router的安装和配置，另外有路由的动态加载，后面详细说明）</li><li>vuex（vuex的安装和配置，另外有动态加载子模块，后面详细说明）</li></ul><p>创建项目</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>coderwhy create your_project_name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>自动拉取项目模板、安装项目依赖、打开浏览器 <code>http://localhost:8080/</code>、自动启动项目</p><h3 id="二-项目开发" tabindex="-1"><a class="header-anchor" href="#二-项目开发"><span>二. 项目开发</span></a></h3><p>项目开发目前提供三个功能：</p><ul><li>创建Vue组件</li><li>创建Vue页面，并配置路由</li><li>创建Vuex子模块</li></ul><h4 id="_2-1-创建vue组件" tabindex="-1"><a class="header-anchor" href="#_2-1-创建vue组件"><span>2.1. 创建Vue组件：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>coderwhy addcpn YourComponentName # 例如coderwhy add NavBar，默认会存放到src/components文件夹中</span></span>
<span class="line"><span>coderwhy addcpn YourComponentName -d src/pages/home # 也可以指定存放的具体文件夹</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-创建vue页面-并配置路由" tabindex="-1"><a class="header-anchor" href="#_2-2-创建vue页面-并配置路由"><span>2.2. 创建Vue页面，并配置路由</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>coderwhy addpage YourPageName # 例如coderwhy addpage Home，默认会放到src/pages/home/Home.vue中，并且会创建src/page/home/router.js</span></span>
<span class="line"><span>coderwhy addpage YourPageName -d src/views # 也可以指定文件夹，但需要手动集成路由</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么会创建router.js文件：</p><ul><li><code>router.js</code>文件是路由的其中一个配置；</li><li>创建该文件中 <code>src/router/index.js</code>中会自动加载到路由的 <code>routes</code>配置中，不需要手动配置了（如果是自己配置的文件夹需要手动配置）</li></ul><p><code>src/router/index.js</code>中已经完成如下操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 动态加载pages中所有的路由文件</span></span>
<span class="line"><span>const files = require.context(&#39;@/pages&#39;, true, /router\\.js$/);</span></span>
<span class="line"><span>const routes = files.keys().map(key =&gt; {</span></span>
<span class="line"><span>  const page = require(&#39;@/pages&#39; + key.replace(&#39;.&#39;, &#39;&#39;));</span></span>
<span class="line"><span>  return page.default;</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-创建vuex子模块" tabindex="-1"><a class="header-anchor" href="#_2-3-创建vuex子模块"><span>2.3. 创建Vuex子模块</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>coderwhy addstore YourVuexChildModuleName # 例如coderwhy addstore home，默认会放到src/store/modules/home/index.js和types.js</span></span>
<span class="line"><span>coderwhy addstore YourVuexChildModuleName -d src/vuex/modules # 也可以指定文件夹</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建完成后，不需要手动配置，已经动态将所有子模块集成进去：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 动态加载modules</span></span>
<span class="line"><span>const modules = {}</span></span>
<span class="line"><span>const files = require.context(&#39;./&#39;, true, /index\\.js$/);</span></span>
<span class="line"><span>files.keys().filter(key =&gt; {</span></span>
<span class="line"><span>  if (key === &#39;./index.js&#39;) return false;</span></span>
<span class="line"><span>  return true</span></span>
<span class="line"><span>}).map(key =&gt; {  </span></span>
<span class="line"><span>  // 获取名字</span></span>
<span class="line"><span>  const modulePath = key.replace(&#39;./modules/&#39;, &#39;&#39;);</span></span>
<span class="line"><span>  const moduleName = modulePath.replace(&#39;/index.js&#39;, &#39;&#39;);</span></span>
<span class="line"><span>  const module = require(\`\${key}\`);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  modules[\`\${moduleName}\`] = module.default;</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="脚手架开发过程" tabindex="-1"><a class="header-anchor" href="#脚手架开发过程"><span>脚手架开发过程</span></a></h2><h3 id="一-创建文件" tabindex="-1"><a class="header-anchor" href="#一-创建文件"><span>一. 创建文件</span></a></h3><p>创建index.js</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(&quot;Hello Coderwhy&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建package.json</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;coderwhy&quot;,</span></span>
<span class="line"><span>  &quot;version&quot;: &quot;1.1.0&quot;,</span></span>
<span class="line"><span>  &quot;description&quot;: &quot;CLI front-end development tools&quot;,</span></span>
<span class="line"><span>  &quot;main&quot;: &quot;index.js&quot;,</span></span>
<span class="line"><span>  &quot;bin&quot;: {</span></span>
<span class="line"><span>    &quot;coderwhy&quot;: &quot;index.js&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;scripts&quot;: {</span></span>
<span class="line"><span>    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;keywords&quot;: [</span></span>
<span class="line"><span>    &quot;vue&quot;,</span></span>
<span class="line"><span>    &quot;react&quot;,</span></span>
<span class="line"><span>    &quot;CLI&quot;,</span></span>
<span class="line"><span>    &quot;component&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;author&quot;: &quot;coderwhy&quot;,</span></span>
<span class="line"><span>  &quot;license&quot;: &quot;MIT&quot;,</span></span>
<span class="line"><span>  &quot;homepage&quot;: &quot;https://github.com/coderwhy/coderwhy&quot;,</span></span>
<span class="line"><span>  &quot;repository&quot;: {</span></span>
<span class="line"><span>    &quot;type&quot;: &quot;git&quot;,</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://github.com/coderwhy/coderwhy&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  &quot;dependencies&quot;: {</span></span>
<span class="line"><span>    &quot;chalk&quot;: &quot;^4.1.0&quot;,</span></span>
<span class="line"><span>    &quot;commander&quot;: &quot;^6.1.0&quot;,</span></span>
<span class="line"><span>    &quot;download-git-repo&quot;: &quot;^3.0.2&quot;,</span></span>
<span class="line"><span>    &quot;ejs&quot;: &quot;^3.1.5&quot;,</span></span>
<span class="line"><span>    &quot;open&quot;: &quot;^7.3.0&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的目录结构：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>├── LICENSE</span></span>
<span class="line"><span>├── index.js</span></span>
<span class="line"><span>├── lib</span></span>
<span class="line"><span>│   ├── config</span></span>
<span class="line"><span>│   │   └── repo_config.js</span></span>
<span class="line"><span>│   ├── core</span></span>
<span class="line"><span>│   │   ├── actions.js</span></span>
<span class="line"><span>│   │   ├── create.js</span></span>
<span class="line"><span>│   │   └── help.js</span></span>
<span class="line"><span>│   ├── template</span></span>
<span class="line"><span>│   │   ├── component.vue.ejs</span></span>
<span class="line"><span>│   │   ├── vue-router.js.ejs</span></span>
<span class="line"><span>│   │   ├── vue-store.js.ejs</span></span>
<span class="line"><span>│   │   └── vue-types.js.ejs</span></span>
<span class="line"><span>│   └── utils</span></span>
<span class="line"><span>│       ├── file.js</span></span>
<span class="line"><span>│       ├── log.js</span></span>
<span class="line"><span>│       └── terminal.js</span></span>
<span class="line"><span>├── package-lock.json</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>└── readme.md</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-创建coderwhy的命令" tabindex="-1"><a class="header-anchor" href="#二-创建coderwhy的命令"><span>二. 创建coderwhy的命令</span></a></h3><p>自动在你的环境变量中查找node</p><p>注意：必须放在第一行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#!/usr/bin/env node</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改package.json</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  &quot;bin&quot;: {</span></span>
<span class="line"><span>    &quot;coderwhy&quot;: &quot;index.js&quot;</span></span>
<span class="line"><span>  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行npm link</p><h3 id="三-commander用法" tabindex="-1"><a class="header-anchor" href="#三-commander用法"><span>三. commander用法</span></a></h3><h4 id="_3-1-定义版本号" tabindex="-1"><a class="header-anchor" href="#_3-1-定义版本号"><span>3.1. 定义版本号</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>#!/usr/bin/env node</span></span>
<span class="line"><span>const cmd = require(&#39;commander&#39;);</span></span>
<span class="line"><span>// 定义显示模块的版本号</span></span>
<span class="line"><span>cmd.version(require(&#39;./package.json&#39;).version);</span></span>
<span class="line"><span>// 解析终端指令</span></span>
<span class="line"><span>cmd.parse(process.argv);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-给help增加其他选项" tabindex="-1"><a class="header-anchor" href="#_3-2-给help增加其他选项"><span>3.2. 给help增加其他选项</span></a></h4><p>添加单个选项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>program.option(&#39;-s --src &lt;src&gt;&#39;, &#39;a source folder&#39;);</span></span>
<span class="line"><span>program.option(&#39;-d --dest &lt;dest&gt;&#39;, &#39;a destination folder&#39;);</span></span>
<span class="line"><span>program.option(&#39;-f --framework &lt;framework&gt;&#39;, &#39;your framework name&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>监听help指令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>program.on(&#39;--help&#39;, function() {</span></span>
<span class="line"><span>  console.log(&quot;&quot;);</span></span>
<span class="line"><span>  console.log(&quot;usage&quot;);</span></span>
<span class="line"><span>  console.log(&quot;   coderwhy -v&quot;);</span></span>
<span class="line"><span>  console.log(&quot;   coderwhy -version&quot;);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-创建项目指令" tabindex="-1"><a class="header-anchor" href="#四-创建项目指令"><span>四. 创建项目指令</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 创建命令</span></span>
<span class="line"><span>program</span></span>
<span class="line"><span>  .command(&#39;create &lt;project&gt; [otherArgs...]&#39;)</span></span>
<span class="line"><span>  .description(&#39;clone a repository into a newly created directory&#39;)</span></span>
<span class="line"><span>  .action((project, otherArgs) =&gt; {</span></span>
<span class="line"><span>    console.log(project);</span></span>
<span class="line"><span>    console.log(otherArgs);</span></span>
<span class="line"><span>   // 调用封装的函数</span></span>
<span class="line"><span>   createProject(project, otherArgs)</span></span>
<span class="line"><span>  })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在actions中封装创建过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const downloadRepo = promisify(require(&#39;download-git-repo&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const createProject = async (project, otherArg) =&gt; {</span></span>
<span class="line"><span>  // 1.提示信息</span></span>
<span class="line"><span>  console.log(&#39;coderwhy helps you create your project, please wait a moment~&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 2.clone项目从仓库</span></span>
<span class="line"><span>  await downloadRepo(repoConfig.vueGitRepo, project, { clone: true });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 3.执行终端命令npm install</span></span>
<span class="line"><span>  // terminal.exec(&#39;npm install&#39;, {cwd: \`./\${project}\`});</span></span>
<span class="line"><span>  const npm = process.platform === &#39;win32&#39; ? &#39;npm.cmd&#39; : &#39;npm&#39;;</span></span>
<span class="line"><span>  await terminal.spawn(npm, [&#39;install&#39;], { cwd: \`./\${project}\` });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 4.打开浏览器</span></span>
<span class="line"><span>  open(&#39;http://localhost:8080/&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 5.运行项目</span></span>
<span class="line"><span>  await terminal.spawn(npm, [&#39;run&#39;, &#39;serve&#39;], { cwd: \`./\${project}\` });</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置的Git地址如下：</p><ul><li>后续会开发一个设置自己地址的指令</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const vueGitRepo = &quot;direct:https://github.com/coderwhy/hy-vue-temp.git&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  vueGitRepo</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装执行终端命令的过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const { spawn, exec } = require(&#39;child_process&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const spawnCommand = (...args) =&gt; {</span></span>
<span class="line"><span>  return new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span>    const childProcess = spawn(...args);</span></span>
<span class="line"><span>    childProcess.stdout.pipe(process.stdout);</span></span>
<span class="line"><span>    childProcess.stderr.pipe(process.stderr);</span></span>
<span class="line"><span>    childProcess.on(&#39;close&#39;, () =&gt; {</span></span>
<span class="line"><span>      resolve();</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="process和child-process使用" tabindex="-1"><a class="header-anchor" href="#process和child-process使用"><span><strong>process和child_process使用</strong></span></a></h4><h5 id="process" tabindex="-1"><a class="header-anchor" href="#process"><span>process</span></a></h5><p>在Node.js中每个应用程序都是一个进程类的实例对象。使用process对象代表应用程序,这是一个全局对象，可以通过它来获取Node.jsy应用程序以及运行该程序的用户、环境等各种信息的属性、方法和事件</p><p>进程中几个重要的属性</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>stdin 标准输入可读流</span></span>
<span class="line"><span>stdout 标准输入可写流</span></span>
<span class="line"><span>stderr 标准错误输出流</span></span>
<span class="line"><span>argv 终端输入参数数组</span></span>
<span class="line"><span>env 操作系统环境信息</span></span>
<span class="line"><span>pid 应用程序进程id</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进程方法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>process.memoryUsage() 查看内存使用信息</span></span>
<span class="line"><span>process.nextTick() 当前eventloop执行完毕执行回调函数</span></span>
<span class="line"><span>process.chdir() chdir方法用于修改Node.js应用程序中使用的当前工作目录</span></span>
<span class="line"><span>process.cwd() 进程当前工作目录</span></span>
<span class="line"><span>process.kill() 杀死进程</span></span>
<span class="line"><span>process.uncaughtException() 当应用程序抛出一个未被捕获的异常时触发进程对象的uncaughtException事件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="child-process" tabindex="-1"><a class="header-anchor" href="#child-process"><span>child_process</span></a></h5><p>在Node.js中，提供了一个child_process模块,通过它可以开启多个子进程，在多个子进程之间可以共享内存空间，可以通过子进程的互相通信来实现信息的交换,child_process模块给予node任意创建子进程的能力，node官方文档对于child_proces模块给出了四种方法，映射到操作系统其实都是创建子进程。但对于开发者而已，这几种方法的api有点不同</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>child_process.exec(command[, options][, callback]) 启动子进程来执行shell命令,可以通过回调参数来获取脚本shell执行结果</span></span>
<span class="line"><span>child_process.execfile(file[, args][, options][, callback]) 与exec类型不同的是，它执行的不是shell命令而是一个可执行文件</span></span>
<span class="line"><span>child_process.spawn(command[, args][, options])仅仅执行一个shell命令，不需要获取执行结果\\</span></span>
<span class="line"><span>child_process.fork(modulePath[, args][, options]) 可以用node执行的.js文件，也不需要获取执行结果。fork出来的子进程一定是node进程</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//exec用法:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//执行shell脚本, 使用管道符也是可以的</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//exec也是可以执行文件的，只不过不能传参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//适合开销比较小的任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> cp</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ls -al|grep node_modules&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 超时时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 可以改变当前的执行路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stderr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 执行结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//execFile用法:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//可以执行文件，也可以执行语句，可传参</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//适合开销比较小的任务</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 执行文件,参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;ls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-al&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 执行结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 让execFile执行ls -al|grep node_modules这种语句</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//test.shell:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  ls</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">al</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">grep</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> node_modules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> $1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // 打印参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> $2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//index.js:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execFile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;test.shell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-al&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;bl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,   </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">stderr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//fork用法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//用node执行, 耗时操作且用node实现，如下载文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// cp.fork(模块路径)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 和require一样把文件执行起来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">fork</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;child_process_demo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 主进程向子进程通信</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;hello child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // child.disconnent() // 如果不断开，两边会出现等待的情况</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 子进程向主进程通信</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">child</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// child_process_demo.js:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 很容易出现死循环</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;send msg to parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 进程不一样,完全独立，本质也是调用spawn</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//spawn 用法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//spawn: 流式的，没有回调，适合耗时任务(比如：npm install), 需要不断打印日志(不断给用户输出日志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 不支持回调, exec,execFile底层都是spwan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> childProcess</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> cp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;test.shell&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">), [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-al&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-bl&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">  cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;..&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 返回的是子进程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 监听成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">stdout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 监听失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">stderr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> \`require(&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">rootFile</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;).call(null, </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">JSON</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">stringify</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">args</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">)\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> // cp.spawn(&#39;cmd&#39;, [&#39;/c&#39;, &#39;node&#39;, &#39;-e&#39;, code]) // win下是这种结构</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;"> childProcess</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;node&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;-e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">], {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">   cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">cwd</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 当前执行未知的cwd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">   stdio</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;inherit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 默认是pipe,pipe必须通过on来接收信息，inherit不需要，实时反馈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">   log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">childProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;exit&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">verbose</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;命令执行成功&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五-添加组件指令" tabindex="-1"><a class="header-anchor" href="#五-添加组件指令"><span>五. 添加组件指令</span></a></h3><h4 id="_5-1-封装ejs模板" tabindex="-1"><a class="header-anchor" href="#_5-1-封装ejs模板"><span>5.1. 封装ejs模板</span></a></h4><p>组件模块如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%_ if(data) { _%&gt;</span></span>
<span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div class=&quot;&lt;%= data.lowerName %&gt;&quot;&gt;</span></span>
<span class="line"><span>    &lt;h2&gt;{{ message }}&lt;/h2&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>  export default {</span></span>
<span class="line"><span>    name: &quot;&lt;%= data.name %&gt;&quot;,</span></span>
<span class="line"><span>    components: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    mixins: [],</span></span>
<span class="line"><span>    props: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    data: function() {</span></span>
<span class="line"><span>      return {</span></span>
<span class="line"><span>        message: &quot;Hello &lt;%= data.name %&gt;&quot;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    created: function() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    mounted: function() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    computed: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>    methods: {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;style scoped&gt;</span></span>
<span class="line"><span>  .&lt;%= data.lowerName %&gt; {</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>&lt;/style&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;%_ } _%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由模板：</p><ul><li>组件模板，直接使用上面的即可</li><li>router.js模板</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;%_ if (data) { _%&gt;</span></span>
<span class="line"><span>// 普通加载路由</span></span>
<span class="line"><span>// import &lt;%= data.name %&gt; from &#39;./&lt;%= data.name %&gt;.vue&#39;</span></span>
<span class="line"><span>// 懒加载路由</span></span>
<span class="line"><span>const &lt;%= data.name %&gt; = () =&gt; import(&#39;./&lt;%= data.name %&gt;.vue&#39;)</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  path: &#39;/&lt;%= data.lowerName %&gt;&#39;,</span></span>
<span class="line"><span>  name: &#39;&lt;%= data.name %&gt;&#39;,</span></span>
<span class="line"><span>  component: &lt;%= data.name %&gt;,</span></span>
<span class="line"><span>  children: [</span></span>
<span class="line"><span>  ]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;%_ } _%&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vuex模块的模板</p><ul><li>index.js模板</li><li>types.js模板</li></ul><p>index.js模块</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>import * as types from &#39;./types.js&#39;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  namespaced: true,</span></span>
<span class="line"><span>  state: {</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  mutations: {</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  actions: {</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  getters: {</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>types.js模块</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>export {</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-2-封装ejs解析" tabindex="-1"><a class="header-anchor" href="#_5-2-封装ejs解析"><span>5.2. 封装ejs解析</span></a></h4><p>封装ejs的编译过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const ejsCompile = (templatePath, data={}, options = {}) =&gt; {</span></span>
<span class="line"><span>  return new Promise((resolve, reject) =&gt; {</span></span>
<span class="line"><span>    ejs.renderFile(templatePath, {data}, options, (err, str) =&gt; {</span></span>
<span class="line"><span>      if (err) {</span></span>
<span class="line"><span>        reject(err);</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      resolve(str);</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装创建文件夹的过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const mkdirSync = (dirname) =&gt; {</span></span>
<span class="line"><span>  if (fs.existsSync(dirname)) {</span></span>
<span class="line"><span>    return true</span></span>
<span class="line"><span>  } else {</span></span>
<span class="line"><span>    // 不存在,判断父亲文件夹是否存在？</span></span>
<span class="line"><span>    if (mkdirSync(path.dirname(dirname))) {</span></span>
<span class="line"><span>      // 存在父亲文件，就直接新建该文件</span></span>
<span class="line"><span>      fs.mkdirSync(dirname)</span></span>
<span class="line"><span>      return true</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装写入文件的过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const writeFile = (path, content) =&gt; {</span></span>
<span class="line"><span>  if (fs.existsSync(path)) {</span></span>
<span class="line"><span>    log.error(&quot;the file already exists~&quot;)</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  return fs.promises.writeFile(path, content);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装ejs到文件的转化过程：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const handleEjsToFile = async (name, dest, template, filename) =&gt; {</span></span>
<span class="line"><span>  // 1.获取模块引擎的路径</span></span>
<span class="line"><span>  const templatePath = path.resolve(__dirname, template);</span></span>
<span class="line"><span>  const result = await ejsCompile(templatePath, {name, lowerName: name.toLowerCase()});</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 2.写入文件中</span></span>
<span class="line"><span>  // 判断文件不存在,那么就创建文件</span></span>
<span class="line"><span>  mkdirSync(dest);</span></span>
<span class="line"><span>  const targetPath = path.resolve(dest, filename);</span></span>
<span class="line"><span>  writeFile(targetPath, result);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-3-创建添加指令" tabindex="-1"><a class="header-anchor" href="#_5-3-创建添加指令"><span>5.3. 创建添加指令</span></a></h4><p>添加指令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>program</span></span>
<span class="line"><span>  .command(&#39;addcpn &lt;name&gt;&#39;)</span></span>
<span class="line"><span>  .description(&#39;add vue component, 例如: coderwhy addcpn NavBar [-d src/components]&#39;)</span></span>
<span class="line"><span>  .action(name =&gt; addComponent(name, program.dest || &#39;src/components&#39;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>program</span></span>
<span class="line"><span>  .command(&#39;addpage &lt;name&gt;&#39;)</span></span>
<span class="line"><span>  .description(&#39;add vue page, 例如: coderwhy addpage Home [-d dest]&#39;)</span></span>
<span class="line"><span>  .action(name =&gt; {</span></span>
<span class="line"><span>  addPage(name, program.dest || \`src/pages/\${name.toLowerCase()}\`)</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>program</span></span>
<span class="line"><span>  .command(&#39;addstore &lt;name&gt;&#39;)</span></span>
<span class="line"><span>  .description(&#39;add vue store, 例如: coderwhy addstore favor [-d dest]&#39;)</span></span>
<span class="line"><span>  .action(name =&gt; {</span></span>
<span class="line"><span>  addStore(name, program.dest || \`src/store/modules/\${name.toLowerCase()}\`)</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>封装对应的action</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const addComponent = async (name, dest) =&gt; {</span></span>
<span class="line"><span>  handleEjsToFile(name, dest, &#39;../template/component.vue.ejs&#39;, \`\${name}.vue\`);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const addPage = async (name, dest) =&gt; {</span></span>
<span class="line"><span>  addComponent(name, dest);</span></span>
<span class="line"><span>  handleEjsToFile(name, dest, &#39;../template/vue-router.js.ejs&#39;, &#39;router.js&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const addStore = async (name, dest) =&gt; {</span></span>
<span class="line"><span>  handleEjsToFile(name, dest, &#39;../template/vue-store.js.ejs&#39;, &#39;index.js&#39;)</span></span>
<span class="line"><span>  handleEjsToFile(name, dest, &#39;../template/vue-types.js.ejs&#39;, &#39;types.js&#39;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六-发布工具" tabindex="-1"><a class="header-anchor" href="#六-发布工具"><span>六. 发布工具</span></a></h3><p>注册npm账号：</p><ul><li>https://www.npmjs.com/</li><li>选择sign up</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuvsfCKCtp2lQ6qFNLhNLWZicFXVpMZmib38NiaDoibicwJyAY4TJOGiaGHtMicVRibkb1zkwYFtAZsPgKma1Q/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">sign up注册</p><p>在命令行登录：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm login</span></span>
<span class="line"><span># 输入账号、密码、邮箱</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改好package.json文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>  &quot;keywords&quot;: [</span></span>
<span class="line"><span>    &quot;vue&quot;,</span></span>
<span class="line"><span>    &quot;react&quot;,</span></span>
<span class="line"><span>    &quot;CLI&quot;,</span></span>
<span class="line"><span>    &quot;component&quot;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  &quot;author&quot;: &quot;coderwhy&quot;,</span></span>
<span class="line"><span>  &quot;license&quot;: &quot;MIT&quot;,</span></span>
<span class="line"><span>  &quot;homepage&quot;: &quot;https://github.com/coderwhy/coderwhy&quot;,</span></span>
<span class="line"><span>  &quot;repository&quot;: {</span></span>
<span class="line"><span>    &quot;type&quot;: &quot;git&quot;,</span></span>
<span class="line"><span>    &quot;url&quot;: &quot;https://github.com/coderwhy/coderwhy&quot;</span></span>
<span class="line"><span>  },</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发布到npm registry中</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm publish</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更新registry</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 1.修改版本号(最好符合semver规范)</span></span>
<span class="line"><span># 2.重新发布</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>删除发布的包：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm unpublish</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>过期发布的包：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>npm deprecate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,118),p=[l];function t(d,h){return n(),i("div",null,p)}const c=s(e,[["render",t],["__file","Node基础七.html.vue"]]),o=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%B8%83.html","title":"Node基础七","lang":"zh-CN","frontmatter":{"title":"Node基础七","date":"2022-10-01T12:27:50.000Z","categories":"Node","tags":"Node Node基础系列","pre":"Node基础六","next":"Node基础八","description":"七.脚手架开发 目前前端工程化开发过程中，我们会使用各种各样的脚手架，vue-cli、create-react-app，当然也包括webpack、gulp、rollup、vite等工具。 这些工具是怎么开发出来的呢？当我们执行一个命令时，它们做了什么事情？是怎么样完成的一系列操作？ 这里我开发了一个coderwhy的脚手架：一个帮助你快速搭建和开发前端...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%B8%83.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础七"}],["meta",{"property":"og:description","content":"七.脚手架开发 目前前端工程化开发过程中，我们会使用各种各样的脚手架，vue-cli、create-react-app，当然也包括webpack、gulp、rollup、vite等工具。 这些工具是怎么开发出来的呢？当我们执行一个命令时，它们做了什么事情？是怎么样完成的一系列操作？ 这里我开发了一个coderwhy的脚手架：一个帮助你快速搭建和开发前端..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuvsfCKCtp2lQ6qFNLhNLWZicFXVpMZmib38NiaDoibicwJyAY4TJOGiaGHtMicVRibkb1zkwYFtAZsPgKma1Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-10-01T12:27:50.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础七\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuvsfCKCtp2lQ6qFNLhNLWZicFXVpMZmib38NiaDoibicwJyAY4TJOGiaGHtMicVRibkb1zkwYFtAZsPgKma1Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-10-01T12:27:50.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"七.脚手架开发","slug":"七-脚手架开发","link":"#七-脚手架开发","children":[{"level":3,"title":"使用说明","slug":"使用说明","link":"#使用说明","children":[]},{"level":3,"title":"一. 创建项目","slug":"一-创建项目","link":"#一-创建项目","children":[]},{"level":3,"title":"二. 项目开发","slug":"二-项目开发","link":"#二-项目开发","children":[]}]},{"level":2,"title":"脚手架开发过程","slug":"脚手架开发过程","link":"#脚手架开发过程","children":[{"level":3,"title":"一. 创建文件","slug":"一-创建文件","link":"#一-创建文件","children":[]},{"level":3,"title":"二. 创建coderwhy的命令","slug":"二-创建coderwhy的命令","link":"#二-创建coderwhy的命令","children":[]},{"level":3,"title":"三. commander用法","slug":"三-commander用法","link":"#三-commander用法","children":[]},{"level":3,"title":"四. 创建项目指令","slug":"四-创建项目指令","link":"#四-创建项目指令","children":[]},{"level":3,"title":"五. 添加组件指令","slug":"五-添加组件指令","link":"#五-添加组件指令","children":[]},{"level":3,"title":"六. 发布工具","slug":"六-发布工具","link":"#六-发布工具","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":9.2,"words":2760},"filePathRelative":"zh/posts/node/base/Node基础七.md","localizedDate":"2022年10月1日","excerpt":"<h2>七.脚手架开发</h2>\\n<p>目前前端工程化开发过程中，我们会使用各种各样的脚手架，vue-cli、create-react-app，当然也包括webpack、gulp、rollup、vite等工具。</p>\\n<p>这些工具是怎么开发出来的呢？当我们执行一个命令时，它们做了什么事情？是怎么样完成的一系列操作？</p>\\n<p>这里我开发了一个coderwhy的脚手架：一个帮助你快速搭建和开发前端项目的CLI。</p>\\n<p>文档内容分成两部分：</p>\\n<p>第一部分：coderwhy使用说明；</p>\\n<p>第二部分：coderwhy脚手架开发过程；</p>\\n<p>如何安装？</p>","autoDesc":true}');export{c as comp,o as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as l,b as e}from"./app-DZw5DSeQ.js";const p={},o=e(`<h2 id="一-javascript运行原理" tabindex="-1"><a class="header-anchor" href="#一-javascript运行原理"><span>一.JavaScript运行原理</span></a></h2><h3 id="_1-1-atwood定律" tabindex="-1"><a class="header-anchor" href="#_1-1-atwood定律"><span>1.1. Atwood定律</span></a></h3><p>官方对Node.js的定义：</p><ul><li><p>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</p></li><li><p>什么是JavaScript运行环境？</p></li><li><p>为什么JavaScript需要特别的运行环境呢？</p></li><li><p>什么又是JavaScript引擎？</p></li><li><p>什么是V8？</p></li></ul><p>我们先来把这些概念搞清楚，再去看Node到底是什么？</p><p>Stack Overflow的创立者之一的 Jeff Atwood 在2007年提出了著名的 Atwood定律：</p><ul><li>Any application that can be written in JavaScript, will eventually be written in JavaScript.</li><li>任何可以使用JavaScript来实现的应用都最终都会使用JavaScript实现</li></ul><p>但是在发明之初，JavaScript的目的是应用于在浏览器执行简单的脚本任务，对浏览器以及其中的DOM进行各种操作，所以JavaScript的应用场景非常受限。</p><ul><li>Atwood定律更像是一种美好的远景，在当时看来还没有实现的可能性。</li><li>但是随着Node的出现，Atwood定律已经越来越多的被证实是正确的。</li></ul><p>但是为了可以理解Node.js到底是如何帮助我们做到这一点的，我们必须了解JavaScript是如何被运行的。</p><h3 id="_1-2-浏览器内核" tabindex="-1"><a class="header-anchor" href="#_1-2-浏览器内核"><span>1.2. 浏览器内核</span></a></h3><p>我们经常会说：不同的浏览器有不同的内核组成</p><ul><li>Gecko：早期被Netscape和Mozilla Firefox浏览器浏览器使用；</li><li>Trident：微软开发，被IE4~IE11浏览器使用，但是Edge浏览器已经转向Blink；</li><li>Webkit：苹果基于KHTML开发、开源的，用于Safari，Google Chrome之前也在使用；</li><li>Blink：是Webkit的一个分支，Google开发，目前应用于Google Chrome、Edge、Opera等；</li></ul><p>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</p><ul><li><strong>排版引擎</strong>（layout engine），也称为<strong>浏览器引擎</strong>（browser engine）、<strong>页面渲染引擎</strong>（rendering engine）或<strong>样版引擎</strong>。</li></ul><p><img src="https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/node/b326323caf6b410198ddc5cabfe5ab81.png" alt="图片" loading="lazy">WebKit main flow</p><p>但是在这个执行过程中，HTML解析的时候遇到了JavaScript标签，应该怎么办呢？</p><ul><li>会停止解析HTML，而去加载和执行JavaScript代码；</li></ul><p>当然，为什么不直接异步去加载执行JavaScript代码，而要在这里停止掉呢？</p><ul><li>这是因为JavaScript代码可以操作我们的DOM；</li><li>所以浏览器希望将HTML解析的DOM和JavaScript操作之后的DOM放到一起来生成最终的DOM树，而不是频繁的去生成新的DOM树；</li></ul><p>那么，JavaScript代码由谁来执行呢？</p><ul><li>JavaScript引擎</li></ul><h3 id="_1-3-javascript引擎" tabindex="-1"><a class="header-anchor" href="#_1-3-javascript引擎"><span>1.3. JavaScript引擎</span></a></h3><p>为什么需要JavaScript引擎呢？</p><ul><li>事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；</li><li>但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；</li><li>所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行；</li></ul><p>比较常见的JavaScript引擎有哪些呢？</p><ul><li><strong>SpiderMonkey</strong>：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；</li><li><strong>Chakra</strong>：微软开发，用于IT浏览器；</li><li><strong>JavaScriptCore</strong>：WebKit中的JavaScript引擎，Apple公司开发；</li><li><strong>V8</strong>：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；</li></ul><p>这里我们先以WebKit为例，WebKit事实上由两部分组成的：</p><ul><li>WebCore：负责HTML解析、布局、渲染等等相关的工作；</li><li>JavaScriptCore：解析、执行JavaScript代码；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ictqFSK4mQRMq1QlUahGHbqU2JlZctsYoVuH9BTQdowian3fxYBn9NIA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">webkit内核</p><p>看到这里，学过小程序的同学有没有感觉非常的熟悉呢？</p><ul><li>在小程序中编写的JavaScript代码就是被JSCore执行的；</li></ul><figure><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw00EBdcmxxy5ibz4rPm6IEgnL2ac6BdbU9Q8t1plYMYYTGl1wJcFibS3aQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" tabindex="0" loading="lazy"><figcaption>图片</figcaption></figure><p>另外一个强大的JavaScript引擎就是V8引擎。</p><h3 id="_1-4-v8引擎" tabindex="-1"><a class="header-anchor" href="#_1-4-v8引擎"><span>1.4. V8引擎</span></a></h3><p>我们来看一下官方对V8引擎的定义：</p><ul><li>V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。</li><li>它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32，ARM或MIPS处理器的Linux系统上运行。</li><li>V8可以独立运行，也可以嵌入到任何C ++应用程序中。</li></ul><p>V8引擎本身的源码非常复杂，大概有超过100w行C++代码，但是我们可以简单了解一下它执行JavaScript代码的原理：</p><ul><li><p>Parse模块会将JavaScript代码转换成AST（抽象语法树），这是因为解释器并不直接认识JavaScript代码；</p></li><li><ul><li>如果函数没有被调用，那么是不会被转换成AST的；</li></ul></li><li><p>Parse的V8官方文档：https://v8.dev/blog/scanner</p></li><li><p>Ignition是一个解释器，会将AST转换成ByteCode（字节码）</p></li><li><ul><li>同时会收集TurboFan优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）；</li></ul></li><li><p>如果函数只调用一次，Ignition会执行解释执行ByteCode；</p></li><li><p>Ignition的V8官方文档：https://v8.dev/blog/ignition-interpreter</p></li><li><p>TurboFan是一个编译器，可以将字节码编译为CPU可以直接执行的机器码；</p></li><li><ul><li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能；</li></ul></li><li><p>但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码；</p></li><li><p>TurboFan的V8官方文档：https://v8.dev/blog/turbofan-jit</p></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0NsdC5lgxmMx4g5IdddzjM3y2EsjflNlXA5hCpouMSgIhjuMuTaK7sQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">image-20200924165143332</p><p>上面是JavaScript代码的执行过程，事实上V8的内存回收也是其强大的另外一个原因，这里暂时先不展开讨论：</p><ul><li>Orinoco模块，负责垃圾回收，将程序中不需要的内存回收；</li><li>Orinoco的V8官方文档：https://v8.dev/blog/trash-talk</li></ul><h3 id="_2-1-node-js是什么" tabindex="-1"><a class="header-anchor" href="#_2-1-node-js是什么"><span>2.1. Node.js是什么？</span></a></h3><p>回顾：官方对Node.js的定义：</p><ul><li>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0CVgJr8GbR3yZqwAZc5LoC7L9h7DhJJEvK02OpNeZbK2u7qQZutrJPQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">image-20200924193328076</p><p>也就是说Node.js基于V8引擎来执行JavaScript的代码，但是不仅仅只有V8引擎：</p><ul><li>前面我们知道Node.js可以嵌入到任何C ++应用程序中，无论是Chrome还是Node.js，事实上都是嵌入了V8引擎来执行JavaScript代码；</li><li>但是在Chrome浏览器中，还需要解析、渲染HTML、CSS等相关渲染引擎，另外还需要提供支持浏览器操作的API、浏览器自己的事件循环等；</li><li>另外，在Node.js中我们也需要进行一些额外的操作，比如文件系统读/写、网络IO、加密、压缩解压文件等操作；</li></ul><p>所以，我们可以简单理解规划出Node.js和浏览器的差异：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0QoNkQ5etdCFE2v3Km6xo9Fwt033tJU8DB3ic9icYDWymPaqvzOcehkQw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">Chrome浏览器和Node架构区别</p><p>这里也有一份单独的Node.js的架构图：</p><ul><li>我们编写的JavaScript代码会经过V8引擎，再通过Node.js的Bindings，将任务放到Libuv的事件循环中；</li><li><strong>libuv</strong>（Unicorn Velociraptor—独角伶盗龙）是使用C语言编写的库；</li><li>libuv提供了事件循环、文件系统读写、网络IO、线程池等等内容；</li><li>具体内部代码的执行流程，我会在后续专门讲解事件和异步IO的原理中详细讲解；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0icKKjBDq3aSaMLmMjPTY5Ux1QtjsDgiaZTom62yt3hQUlZLc7unJ8Rdw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">What is Node.js? Where, when and how to use it with examples</p><h3 id="_2-2-node-js可以做什么" tabindex="-1"><a class="header-anchor" href="#_2-2-node-js可以做什么"><span>2.2. Node.js可以做什么？</span></a></h3><p>了解了Node.js的架构，那么使用它我们可以做什么呢？</p><ul><li>前面我们提到，Node.js的出现，真正让Atwood定律变成了现实，Node.js的应用场景也越来越多。</li></ul><p>我们可以使用基于Node.js的Electron开发出类似于VSCode这种强大的桌面应用程序。另外前端自动化、模块化打包工具gulp、webpack也是基于Node.js开发和使用的。</p><p>Node.js的快速发展也让企业对Node.js技术越来越重视，在前端招聘中通常会对Node.js有一定的要求，特别对于高级前端开发工程师，Node.js更是必不可少的技能：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw09Fg50B0b7JsykNNKngN1MH8PaFKZWYnxOhE6vT5bv4J7vuYLR0HTGw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">前端工程师岗位需求</p><p>目前前端开发的库都是以node包的形式进行管理；</p><ul><li>npm、yarn工具成为前端开发使用最多的工具；</li><li>越来越多的公司使用Node.js作为web服务器开发；</li><li>大量项目需要借助Node.js完成前后端渲染的同构应用；</li><li>资深前端工程师需要为项目编写脚本工具（前端工程师编写脚本通常会使用JavaScript，而不是Python或者shell）；</li><li>很多企业在使用Electron来开发桌面应用程序；</li></ul><p>总结一下，目前Node.js到底有哪些应用场景呢？</p><ul><li><p>前后端页面渲染</p></li><li><ul><li>支持项目同构开发</li></ul></li><li><p>对于需要进行首屏优化、SEO的页面进行后端渲染</p></li><li><p>开发命令行工具</p></li><li><ul><li>webpack、gulp等都是基于Node</li></ul></li><li><p>开发自己独立的命令行工具（类似于shell、Python做的事情，对于前端更加友好）</p></li><li><p>桌面应用的开发</p></li><li><ul><li>类似于VSCode这种强大的桌面应用</li></ul></li><li><p>甚至开发桌面端类似于wayward大型游戏</p></li><li><p>进行服务器开发</p></li><li><ul><li>拥有类似express、koa等强大的web框架</li></ul></li><li><p>开发Web Socket等服务器</p></li></ul><p>所以，作为前端开发工程师，Node.js已经是我们必须掌握的核心技术。</p><h3 id="_2-3-node-js的安装" tabindex="-1"><a class="header-anchor" href="#_2-3-node-js的安装"><span>2.3. Node.js的安装</span></a></h3><h4 id="_2-3-1-node-js下载安装" tabindex="-1"><a class="header-anchor" href="#_2-3-1-node-js下载安装"><span>2.3.1. Node.js下载安装</span></a></h4><p>Node.js是在2009年诞生的，目前最新的版本是分别是12.18.4以及14.12.0：</p><ul><li>LTS版本：相对稳定一些，推荐线上环境使用该版本；</li><li>Current版本：最新的Node版本，包含很多新特性；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0xlb6z8syRPdY3icwZYunKxGibLO3gIyibRicz5S4ORp8e8OpybYHKnBxJg/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">node的版本</p><p>这些我们选择什么版本呢？</p><ul><li>如果你是学习使用，可以选择current版本；</li><li>如果你是公司开发，建议选择LTS版本；</li></ul><p>Node的安装方式有很多：</p><ul><li>可以借助于一些操作系统上的软件管理工具，比如Mac上的homebrew，Linux上的yum、dnf等；</li><li>也可以直接下载对应的安装包下载安装；</li></ul><p>我们选择下载安装，下载自己操作系统的安装包直接安装就可以了：</p><ul><li>window选择.msi安装包，Mac选择.pkg安装包，Linux会在后续部署中讲解；</li><li>安装过程中会配置环境变量；</li><li>并且安装node过程中会安装npm（<em>Node Package Manager</em>）工具；</li></ul><p>我当前电脑上的版本：</p><ul><li>node版本是12.16.1；</li><li>npm版本是6.14.8；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ywcBhHXMp5vgSgTQWsqmq1JxrvkPNqaMWTH7dJepoo568KcamnJg3g/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">我的node版本</p><p>你应该已经发现，我这里使用的版本并不是Node的最新版本，无论是LTS或者Current：</p><ul><li>正好借助这里，和大家讲一下node的版本升级；</li></ul><h4 id="_2-3-2-node-js版本管理" tabindex="-1"><a class="header-anchor" href="#_2-3-2-node-js版本管理"><span>2.3.2. Node.js版本管理</span></a></h4><p>在实际开发学习中，我们只需要使用一个Node版本来开发或者学习即可。</p><p>但是，如果你希望通过可以快速更新或切换多个版本时，可以借助于一些工具：</p><ul><li>nvm：Node Version Manager；</li><li>n：Interactively Manage Your Node.js Versions（交互式管理你的Node.js版本）</li></ul><p>这里我演示管理工具：n</p><ul><li>n是TJ方便node的版本管理，专门开发的；</li><li>官方介绍是：n - Interactively Manage Your Node.js Versions（交互式管理你的Node.js版本）</li></ul><p>安装n：直接使用npm安装即可</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 安装工具n</span></span>
<span class="line"><span>npm install -g n</span></span>
<span class="line"><span># 查看安装的版本</span></span>
<span class="line"><span>n --version</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装最新的lts版本：</p><ul><li>前面添加的sudo是权限问题；</li><li>可以两个版本都安装，之后我们可以通过n快速在两个版本间切换；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 安装最新的lts版本</span></span>
<span class="line"><span>n lts</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装最新的版本</span></span>
<span class="line"><span>n latest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw01l41FBS8sDZYclR0cTB6FCuQJjptRzc3xoLwajFriaJiaVmrRIEiaO7PQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">安装lts版本</p><p>查看所有的版本，并且选择要使用的版本：</p><ul><li>可以上下选择想使用的版本</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span># 查看所有的版本</span></span>
<span class="line"><span>n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0aoBbgIUcG1bzUgn2eHd5hbw5LUoFH9e9eTPib940eA7dP9d7kcosGJQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">查看和选择所有的版本</p><p>查看当前Node的版本：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0gOicVkLUIgr0IHSXMSV6X9eiabSRQ3Bz0mCoGQRwHFpOMHJbREKJww5A/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">查看当前的版本</p><p>问题：这两个工具都不支持window</p><ul><li>n：n is not supported natively on Windows.</li><li>nvm：nvm does not support Windows</li></ul><p>Window的同学怎么办？</p><ul><li>1.并不是每个人都需要安装多个版本，在课堂上我会以最新的Current版本讲解几乎所有内容；</li><li>2.接下来我会在Mac上面演练n工具的使用，windows上可以使用nvm-window来完成；</li></ul>`,102),t=[o];function n(s,r){return l(),a("div",null,t)}const m=i(p,[["render",n],["__file","Node基础一.html.vue"]]),u=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%B8%80.html","title":"Node基础一","lang":"zh-CN","frontmatter":{"title":"Node基础一","date":"2022-09-30T23:33:43.000Z","categories":"Node","tags":"Node Node基础系列","next":"Node基础二","description":"一.JavaScript运行原理 1.1. Atwood定律 官方对Node.js的定义： Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 什么是JavaScript运行环境？ 为什么JavaScript需要特别的运行环境呢？ 什么又是JavaScript引擎？ 什么是V8？ 我们先来把这些概念搞清楚，再去看N...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础一"}],["meta",{"property":"og:description","content":"一.JavaScript运行原理 1.1. Atwood定律 官方对Node.js的定义： Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 什么是JavaScript运行环境？ 为什么JavaScript需要特别的运行环境呢？ 什么又是JavaScript引擎？ 什么是V8？ 我们先来把这些概念搞清楚，再去看N..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/node/b326323caf6b410198ddc5cabfe5ab81.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-09-30T23:33:43.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础一\\",\\"image\\":[\\"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/node/b326323caf6b410198ddc5cabfe5ab81.png\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ictqFSK4mQRMq1QlUahGHbqU2JlZctsYoVuH9BTQdowian3fxYBn9NIA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw00EBdcmxxy5ibz4rPm6IEgnL2ac6BdbU9Q8t1plYMYYTGl1wJcFibS3aQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0NsdC5lgxmMx4g5IdddzjM3y2EsjflNlXA5hCpouMSgIhjuMuTaK7sQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0CVgJr8GbR3yZqwAZc5LoC7L9h7DhJJEvK02OpNeZbK2u7qQZutrJPQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0QoNkQ5etdCFE2v3Km6xo9Fwt033tJU8DB3ic9icYDWymPaqvzOcehkQw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0icKKjBDq3aSaMLmMjPTY5Ux1QtjsDgiaZTom62yt3hQUlZLc7unJ8Rdw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw09Fg50B0b7JsykNNKngN1MH8PaFKZWYnxOhE6vT5bv4J7vuYLR0HTGw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0xlb6z8syRPdY3icwZYunKxGibLO3gIyibRicz5S4ORp8e8OpybYHKnBxJg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ywcBhHXMp5vgSgTQWsqmq1JxrvkPNqaMWTH7dJepoo568KcamnJg3g/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw01l41FBS8sDZYclR0cTB6FCuQJjptRzc3xoLwajFriaJiaVmrRIEiaO7PQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0aoBbgIUcG1bzUgn2eHd5hbw5LUoFH9e9eTPib940eA7dP9d7kcosGJQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0gOicVkLUIgr0IHSXMSV6X9eiabSRQ3Bz0mCoGQRwHFpOMHJbREKJww5A/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-09-30T23:33:43.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"一.JavaScript运行原理","slug":"一-javascript运行原理","link":"#一-javascript运行原理","children":[{"level":3,"title":"1.1. Atwood定律","slug":"_1-1-atwood定律","link":"#_1-1-atwood定律","children":[]},{"level":3,"title":"1.2. 浏览器内核","slug":"_1-2-浏览器内核","link":"#_1-2-浏览器内核","children":[]},{"level":3,"title":"1.3. JavaScript引擎","slug":"_1-3-javascript引擎","link":"#_1-3-javascript引擎","children":[]},{"level":3,"title":"1.4. V8引擎","slug":"_1-4-v8引擎","link":"#_1-4-v8引擎","children":[]},{"level":3,"title":"2.1. Node.js是什么？","slug":"_2-1-node-js是什么","link":"#_2-1-node-js是什么","children":[]},{"level":3,"title":"2.2. Node.js可以做什么？","slug":"_2-2-node-js可以做什么","link":"#_2-2-node-js可以做什么","children":[]},{"level":3,"title":"2.3. Node.js的安装","slug":"_2-3-node-js的安装","link":"#_2-3-node-js的安装","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":10.63,"words":3189},"filePathRelative":"zh/posts/node/base/Node基础一.md","localizedDate":"2022年9月30日","excerpt":"<h2>一.JavaScript运行原理</h2>\\n<h3>1.1. Atwood定律</h3>\\n<p>官方对Node.js的定义：</p>\\n<ul>\\n<li>\\n<p>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</p>\\n</li>\\n<li>\\n<p>什么是JavaScript运行环境？</p>\\n</li>\\n<li>\\n<p>为什么JavaScript需要特别的运行环境呢？</p>\\n</li>\\n<li>\\n<p>什么又是JavaScript引擎？</p>\\n</li>\\n<li>\\n<p>什么是V8？</p>\\n</li>\\n</ul>\\n<p>我们先来把这些概念搞清楚，再去看Node到底是什么？</p>","autoDesc":true}');export{m as comp,u as data};

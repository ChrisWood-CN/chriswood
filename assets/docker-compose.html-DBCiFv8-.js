import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,b as n}from"./app-C9ZAR9YT.js";const e={},l=n(`<h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose"><span>docker-compose</span></a></h1><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h2><p>云服务器 centOS 7.6 64 位</p><h2 id="docker-compose-安装" tabindex="-1"><a class="header-anchor" href="#docker-compose-安装"><span>docker-compose 安装</span></a></h2><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -L</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-linux-x86_64&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> /usr/local/bin/docker-compose</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker-compose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 验证docker-compose.yml文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -q</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 拉取服务依赖的镜像</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 创建并启动所有服务的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> up</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 列出工程中所有服务的容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose-命令" tabindex="-1"><a class="header-anchor" href="#docker-compose-命令"><span>docker-compose 命令</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>Define and run multi-container applications with Docker.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Usage:</span></span>
<span class="line"><span>  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span></span>
<span class="line"><span>  docker-compose -h|--help</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  -f, --file FILE             Specify an alternate compose file</span></span>
<span class="line"><span>                              (default: docker-compose.yml)</span></span>
<span class="line"><span>  -p, --project-name NAME     Specify an alternate project name</span></span>
<span class="line"><span>                              (default: directory name)</span></span>
<span class="line"><span>  --verbose                   Show more output</span></span>
<span class="line"><span>  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span></span>
<span class="line"><span>  --no-ansi                   Do not print ANSI control characters</span></span>
<span class="line"><span>  -v, --version               Print version and exit</span></span>
<span class="line"><span>  -H, --host HOST             Daemon socket to connect to</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  --tls                       Use TLS; implied by --tlsverify</span></span>
<span class="line"><span>  --tlscacert CA_PATH         Trust certs signed only by this CA</span></span>
<span class="line"><span>  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span></span>
<span class="line"><span>  --tlskey TLS_KEY_PATH       Path to TLS key file</span></span>
<span class="line"><span>  --tlsverify                 Use TLS and verify the remote</span></span>
<span class="line"><span>  --skip-hostname-check       Don&#39;t check the daemon&#39;s hostname against the</span></span>
<span class="line"><span>                              name specified in the client certificate</span></span>
<span class="line"><span>  --project-directory PATH    Specify an alternate working directory</span></span>
<span class="line"><span>                              (default: the path of the Compose file)</span></span>
<span class="line"><span>  --compatibility             If set, Compose will attempt to convert keys</span></span>
<span class="line"><span>                              in v3 files to their non-Swarm equivalent</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Commands:</span></span>
<span class="line"><span>  build              构建或重建服务</span></span>
<span class="line"><span>  bundle             从compose配置文件中产生一个docker绑定</span></span>
<span class="line"><span>  config             验证并查看compose配置文件</span></span>
<span class="line"><span>  create             创建服务</span></span>
<span class="line"><span>  down               停止并移除容器、网络、镜像和数据卷</span></span>
<span class="line"><span>  events             从容器中接收实时的事件</span></span>
<span class="line"><span>  exec               在一个运行中的容器上执行一个命令</span></span>
<span class="line"><span>  help               获取命令的帮助信息</span></span>
<span class="line"><span>  images             列出所有镜像</span></span>
<span class="line"><span>  kill               通过发送SIGKILL信号来停止指定服务的容器</span></span>
<span class="line"><span>  logs               从容器中查看服务日志输出</span></span>
<span class="line"><span>  pause              暂停服务</span></span>
<span class="line"><span>  port               打印绑定的公共端口</span></span>
<span class="line"><span>  ps                 列出所有运行中的容器</span></span>
<span class="line"><span>  pull               拉取并下载指定服务镜像</span></span>
<span class="line"><span>  push               Push service images</span></span>
<span class="line"><span>  restart            重启YAML文件中定义的服务</span></span>
<span class="line"><span>  rm                 删除指定已经停止服务的容器</span></span>
<span class="line"><span>  run                在一个服务上执行一条命令</span></span>
<span class="line"><span>  scale              设置指定服务运行容器的个数</span></span>
<span class="line"><span>  start              在容器中启动指定服务</span></span>
<span class="line"><span>  stop               停止已运行的服务</span></span>
<span class="line"><span>  top                显示各个服务容器内运行的进程</span></span>
<span class="line"><span>  unpause            恢复容器服务</span></span>
<span class="line"><span>  up                 创建并启动容器</span></span>
<span class="line"><span>  version            显示Docker-Compose版本信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose-用法" tabindex="-1"><a class="header-anchor" href="#docker-compose-用法"><span>docker-compose 用法</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose [-f &lt;args&gt;...] [options] [COMMAND] [ARGS...]</span></span>
<span class="line"><span>docker-compose [-f docker-compose.yml] up -d</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose-pull" tabindex="-1"><a class="header-anchor" href="#docker-compose-pull"><span>docker-compose pull</span></a></h3><p>拉取服务依赖的镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose pull [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--ignore-pull-failures 忽略拉取镜像过程中的错误</li><li>--parallel 同时拉取多个镜像</li><li>--quiet 拉取镜像过程中不打印进度信息</li></ul><h3 id="docker-compose-build" tabindex="-1"><a class="header-anchor" href="#docker-compose-build"><span>docker-compose build</span></a></h3><p>构建镜像，服务容器一旦构建后将会带上一个标记名称，可以随时在项目目录下运行 docker-compose build 来重新构建服务。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose build [options] [--build-arg key=val...] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--compress 通过 gzip 压缩构建上下文环境</li><li>--force-rm 删除构建过程中的临时容器</li><li>--no-cache 构建镜像过程中不使用缓存</li><li>--pull 始终尝试通过拉取操作来获取更新版本的镜像</li><li>-m, --memory MEM 为构建的容器设置内存大小</li><li>--build-arg key=val 为服务设置 build-time 变量</li></ul><h3 id="docker-compose-create" tabindex="-1"><a class="header-anchor" href="#docker-compose-create"><span>docker-compose create</span></a></h3><p>为服务创建容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose create [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--force-recreate 重新创建容器，即使配置和镜像没有改变，不兼容--no-recreate 参数。</li><li>--no-recreate 如果容器已经存在则无需重新创建，不兼容--force-recreate 参数。</li><li>--no-build 不创建镜像即使缺失</li><li>--build 创建容器前生成镜像</li></ul><h3 id="docker-compose-exec" tabindex="-1"><a class="header-anchor" href="#docker-compose-exec"><span>docker-compose exec</span></a></h3><p>进入容器命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose exec [options] SERVICE COMMAND [ARGS...]</span></span>
<span class="line"><span>eg: docker-compose exec --index=1 tomcat /bin/bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>-d 分离模式，以后台守护进程运行命令。</li><li>--privileged 获取特权</li><li>-T 禁用分配 TTY，默认 docker-compose exec 分配 TTY。</li><li>--index=index 当一个服务拥有多个容器时可通过该参数登录到该服务下的任何容器</li></ul><h3 id="docker-compose-run" tabindex="-1"><a class="header-anchor" href="#docker-compose-run"><span>docker-compose run</span></a></h3><p>针对服务运行一次性命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</span></span>
<span class="line"><span>#启动web服务并bash作为其命令运行</span></span>
<span class="line"><span>eg: docker-compose run web bash</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>-d 指定在后台以守护进程方式运行服务容器，不占用主进程</li><li>--name NAME 给容器指定名字</li><li>--entrypoint CMD 重写镜像的 entrypoint 命令</li><li>-e KEY=VAL 设置能被多次使用的环境变量</li><li>-l, --label KEY=VAL 添加标签</li><li>--no-deps 设置不启动服务所链接的容器</li><li>--rm 运行后删除容器. detached 模式会忽略</li><li>-p, 将容器的端口发布到主机</li><li>--service-ports 在启用服务端口并映射到主机的情况下运行命令</li><li>--use-aliases 在容器连接到的网络中使用服务的网络别名。</li><li>-v, --volume=[] 绑定装载卷（默认值[]）</li><li>-T 禁用分配 TTY，默认 docker-compose exec 分配 TTY。</li><li>-w, --workdir=&quot;&quot; 容器内的工作目录</li></ul><h3 id="docker-compose-up" tabindex="-1"><a class="header-anchor" href="#docker-compose-up"><span>docker-compose up</span></a></h3><p>启动所有服务，会一次性完成 build 和 create 以及 run 命令的三个操作。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>-d 指定在后台以守护进程方式运行服务容器，不占用主进程</li><li>-no-color 设置不使用颜色来区分不同的服务器的控制输出</li><li>-no-deps 设置不启动服务所链接的容器</li><li>-force-recreate 设置强制重新创建容器，不能与--no-recreate 选项同时使用。</li><li>--no-create 若容器已经存在则不再重新创建，不能与--force-recreate 选项同时使用。</li><li>--no-build 设置不自动构建缺失的服务镜像</li><li>--build 设置在启动容器前构建服务镜像</li><li>--abort-on-container-exit 若任何一个容器被停止则停止所有容器，不能与选项-d 同时使用。</li><li>-t, --timeout TIMEOUT 设置停止容器时的超时秒数，默认为 10 秒。</li><li>--remove-orphans 设置删除服务中没有在 compose 文件中定义的容器</li><li>--scale SERVICE=NUM 设置服务运行容器的个数，此选项将会负载在 compose 中通过 scale 指定的参数。</li></ul><h3 id="docker-compose-ps" tabindex="-1"><a class="header-anchor" href="#docker-compose-ps"><span>docker-compose ps</span></a></h3><p>列出当前的所有容器，需要注意的是必须在 docker-compose.yml 文件所在的目录下执行该命令</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose ps [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="docker-compose-down" tabindex="-1"><a class="header-anchor" href="#docker-compose-down"><span>docker-compose down</span></a></h3><p>停止和删除容器、网络、卷、镜像</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose down [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--rmi type <ul><li>-rmi all 删除 compose 文件中定义的所有镜像</li><li>--rmi local 删除镜像名为空的镜像</li></ul></li><li>-v, --volumes 删除已经在 compose 文件中定义的和匿名的附在容器上的数据卷</li><li>--remove-orphans 删除服务中没有在 compose 中定义的容器</li></ul><h3 id="docker-compose-restart" tabindex="-1"><a class="header-anchor" href="#docker-compose-restart"><span>docker-compose restart</span></a></h3><p>重启服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose restart [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>-t, --timeout TIMEOUT 指定重启前停止容器的超时时长，默认为 10 秒</li></ul><h3 id="docker-compose-rm" tabindex="-1"><a class="header-anchor" href="#docker-compose-rm"><span>docker-compose rm</span></a></h3><p>删除所有停止状态的容器，推荐先执行 docker-compose stop 命令来停止容器。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>ocker-compose rm [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>-f, --force 强制直接删除包含非停止状态的容器</li><li>-v 删除容器所挂载的数据卷</li></ul><h3 id="docker-compose-start" tabindex="-1"><a class="header-anchor" href="#docker-compose-start"><span>docker-compose start</span></a></h3><p>启动已经存在的容器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose start [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="docker-compose-stop" tabindex="-1"><a class="header-anchor" href="#docker-compose-stop"><span>docker-compose stop</span></a></h3><p>停止已运行的服务</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose stop [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="docker-compose-logs" tabindex="-1"><a class="header-anchor" href="#docker-compose-logs"><span>docker-compose logs</span></a></h3><p>查看容器的日志</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose logs [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="docker-compose-pause" tabindex="-1"><a class="header-anchor" href="#docker-compose-pause"><span>docker-compose pause</span></a></h3><p>暂停一个服务容器</p><h3 id="docker-compose-unpause" tabindex="-1"><a class="header-anchor" href="#docker-compose-unpause"><span>docker-compose unpause</span></a></h3><p>恢复处于暂停状态中的服务</p><h3 id="docker-compose-kill" tabindex="-1"><a class="header-anchor" href="#docker-compose-kill"><span>docker-compose kill</span></a></h3><p>发送 SIGKILL 信号来强制停止服务容器，支持通过-s 参数来指定发送的信号。</p><h3 id="docker-compose-config" tabindex="-1"><a class="header-anchor" href="#docker-compose-config"><span>docker-compose config</span></a></h3><p>验证并查看 compose 文件配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose config [options]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--resolve-image-digests 将镜像标签标记为摘要</li><li>-q, --quiet 只验证配置不输出，当配置正确时不输出任何容器，当配置错误时输出错误信息。</li><li>--services 打印服务名称，一行显示一个。</li><li>--volumes 打印数据卷名称，一行显示一个。</li></ul><h3 id="docker-compose-port" tabindex="-1"><a class="header-anchor" href="#docker-compose-port"><span>docker-compose port</span></a></h3><p>显示某个容器端口所映射的公共端口</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose port [options] SERVICE PRIVATE_PORT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--protocol=proto 指定端口协议，默认为 TCP，可选 UDP。</li><li>--index=index 若同一个服务存在多个容器，指定命令对象容器的索引序号，默认为 1</li></ul><h3 id="docker-compose-push" tabindex="-1"><a class="header-anchor" href="#docker-compose-push"><span>docker-compose push</span></a></h3><p>推送镜像到仓库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker-compose push [options] [SERVICE...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>命令选项[options]</p><ul><li>--ignore-push-failure 忽略推送镜像过程中的错误</li></ul><h3 id="docker-compose-version" tabindex="-1"><a class="header-anchor" href="#docker-compose-version"><span>docker-compose version</span></a></h3><p>Docker Compose 版本信息</p><h2 id="docker-五种网络模式与应用场景" tabindex="-1"><a class="header-anchor" href="#docker-五种网络模式与应用场景"><span>Docker 五种网络模式与应用场景</span></a></h2><p>bridge（默认）、host 、container 、none 和⾃定义（Macvlan）五种模式。</p><div class="language-yml line-numbers-mode" data-highlighter="shiki" data-ext="yml" data-title="yml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定容器的网络模式为host模式，与主机共享端口和ip，这样会占用宿主机的端口，宿主机的端口只能被这一个容器共享</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">network_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;host&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bridge-模式" tabindex="-1"><a class="header-anchor" href="#bridge-模式"><span>bridge 模式</span></a></h3><p>bridge 模式是 docker 的默认⽹络模式 ，当 Docker 进程启动时，会在主机上创建⼀个名为 docker0 的虚拟⽹桥，此主机上启动的 Docker 容器会连接到这个虚拟⽹桥上。 虚拟⽹桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了⼀个⼆层⽹络中。 从 docker0 ⼦⽹中分配⼀个 IP 给容器使⽤，并设置 docker0 的 IP 地址为容器的默认⽹关。 bridge 模式是 docker 的默认⽹络模式，不写–network 参数的话就是 bridge 模式，可以通过 -P 或 -p 参数来指定端⼝映射。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tomcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 8088:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点： 隔离性好，会占⽤宿主机端⼝，只占⽤⼀个真实 IP，适⽤于⼤多数场景</p><h3 id="host-模式" tabindex="-1"><a class="header-anchor" href="#host-模式"><span>host 模式</span></a></h3><p>使用 host 模式启动容器，该容器不会获得独立的 Network Namespace，而是和宿主机共同使用一个 Network Namespace，不会虚拟自己的网卡，配置自己的 ip 等， 而是使用宿主机的 ip 和端口，也就是会占用宿主机的端口。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> mytomcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --network=host</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tomcat</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># tomcat容器默认使用的是8080端口，使用host模式，tomcat容器占用了主机的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> http://localhost:8080</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：隔离性最差，只占⽤⼀个真实 IP，会占⽤宿主机端⼝，会出现端⼝冲突，性能最好。能确认所有容器端⼝不冲突且默认都需要对外暴露时使⽤。</p><h3 id="container-模式" tabindex="-1"><a class="header-anchor" href="#container-模式"><span>container 模式</span></a></h3><p>这个模式指定新创建的容器和已经存在的⼀个容器共享⼀个 Network Namespace，⽽不是和宿主机共享 新创建的容器不会创建⾃⼰的⽹卡和配置⾃⼰的 IP，⽽是和⼀个指定的容器共享 IP、端⼝范围等。 同样，两个容器除了⽹络⽅⾯，其他的如⽂件系统、进程列表等 还是隔离的。两个容器的进程可以通过 IO ⽹卡设备通信 例子: 采用 nginx 容器作为容器桥反射 tomcat 端口</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tomcat</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> 80:80</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>tomcat 默认暴露 8080 端⼝，这里利⽤ bridge 模式绑定 80 端⼝，本地访问失败，因为映射的容器端口是 80，然而 tomcat 的容器默认端口是 8080，所以访问不到 将 nginx 通过容器模式绑定到 tomcat 容器，这样通过 tomcat 容器的 80 端⼝便可转发给 nginx 处理</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --net</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> container:tomcat</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点：隔离性好，只占⽤⼀个真实 IP，会占⽤容器端⼝，性能差，开发⽹关应⽤时可以考虑</p><h3 id="none-模式" tabindex="-1"><a class="header-anchor" href="#none-模式"><span>none 模式</span></a></h3><p>在这种模式下，Docker 容器拥有自己的 Network Namespace，但是并不为 Docker 容器进行任何网络配置。 也就是说，这个 Docker 容器没有⽹卡、IP、路由等 信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> --net=none</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> web</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点：一般用的比较少，⼀切全靠⾃定义，各项特性靠自己决定。</p><h3 id="macvlan-模式" tabindex="-1"><a class="header-anchor" href="#macvlan-模式"><span>macvlan 模式</span></a></h3><h4 id="docker-的-bridge-模式" tabindex="-1"><a class="header-anchor" href="#docker-的-bridge-模式"><span>Docker 的 Bridge 模式</span></a></h4><p>docker 桥接模式是在单个主机上桥接运行的，无法实现多个宿主机通信，并且会占用主机的端口。 优点：兼容性好，是 Docker 默认的通信规则 缺点：主机端⼝占⽤严重，⽆法使⽤指定端⼝（如：80） 缺点：⽆法跨主机容器间通信</p><h4 id="macvlan-是什么" tabindex="-1"><a class="header-anchor" href="#macvlan-是什么"><span>Macvlan 是什么</span></a></h4><p>Docker 内置的 Macvlan 驱动（Windows 上是 Transparent）是为此场景而生。通过为容器提供 MAC 和 IP 地址，让容器在物理⽹络上成为&quot;⼀等公⺠&quot;。 因为⽆须端⼝映射或者额外桥接，可以直接通过主机接⼝（或者⼦接⼝）访问容器接⼝。 但是，Macvlan 的缺点是需要将主机网卡（NIC）设置为混杂模式（Promiscuous Mode），这在⼤部分公有云平台上是不允许的。所以 Macvlan 对于 公司内部的数据中心网络来说很棒（假设公司网络组能接受 NIC 设置为混杂模式），但是 Macvlan 在公有云上并不可行。 Macvlan 本身是 linux kernel 模块，其功能是允许在同⼀个物理⽹卡上配置多个 MAC 地址，即多个 interface，每个 interface 可以配置⾃⼰的 IP。macvlan 本质上是⼀种 ⽹卡虚拟化技术</p><h4 id="macvlan-操作步骤" tabindex="-1"><a class="header-anchor" href="#macvlan-操作步骤"><span>Macvlan 操作步骤</span></a></h4><h5 id="_1-确认网卡名称-ifconfig" tabindex="-1"><a class="header-anchor" href="#_1-确认网卡名称-ifconfig"><span>1.确认⽹卡名称 ifconfig</span></a></h5><h5 id="_2-开启混杂模式" tabindex="-1"><a class="header-anchor" href="#_2-开启混杂模式"><span>2.开启混杂模式</span></a></h5><blockquote><p>不要轻易在 linux 服务器上执行，可以使用 vmware 新建 linux 虚拟机测试</p></blockquote><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ip</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> link</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ens33</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> promisc</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> on</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ifconfig</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> ens33</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> promisc</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-创建-macvlan-网络" tabindex="-1"><a class="header-anchor" href="#_3-创建-macvlan-网络"><span>3.创建 Macvlan ⽹络</span></a></h5><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">-d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> macvlan</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #指定⽹络模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">--subnet</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">192.168.31.0/24</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #设置⼦⽹掩码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> macvlan</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">--subnet=192.168.31.0/24 </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">--ip-range=192.168.31.0/24 </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">--gateway=192.168.31.1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">-o </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">parent=ens33</span><span style="--shiki-light:#005CC5;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">macvlan32</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># –ip-range=192.168.31.0/24 设置容器允许的IP范围</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># –gateway=192.168.31.1 设置⽹关</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># -o parent=ens33 设置上⼀级⽹卡（或虚拟⽹卡）名称</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># macvlan32 指定当前macvlan⽹络名称</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-加入-macvlan-网络" tabindex="-1"><a class="header-anchor" href="#_4-加入-macvlan-网络"><span>4.加⼊ macvlan ⽹络</span></a></h5><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>docker run -itd --name tomcat1 --ip=192.168.31.190 --network macvlan32 tomcat</span></span>
<span class="line"><span>docker run -itd --name tomcat2 --ip=192.168.31.191 --network macvlan32 tomcat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：</p><ul><li>1、独⽴ IP，维护方便，不占用主机端口，使⽤容器默认端⼝</li><li>2、拥有稳定的 IP 后，容器间跨主机通信成为可能，因为⽆论是物理机、虚拟机、容器都是物理⽹络的“⼀等公⺠”，容器间通信时直接指定 IP 即可</li></ul><p>缺点：</p><ul><li>1、⽹络环境需要⽀持混杂模式，公有云不⽀持，不过都上公有云了，为什么不⽤直接⽤云供应商提供的容器服务呢？</li><li>2、部分⼤规模应⽤集群，内⽹ IP 地址是稀缺资源，例如阿⾥云、腾讯云，不适合使⽤ Macvlan</li><li>3、默认容器端⼝均对外暴露，需要在内⽹构建应⽤防⽕墙/⽹关决定哪些 IP 的哪些端⼝允许外界访问，哪些不允许</li></ul><h2 id="容器状态" tabindex="-1"><a class="header-anchor" href="#容器状态"><span>容器状态</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>created（已创建）</span></span>
<span class="line"><span>restarting（重启中）</span></span>
<span class="line"><span>running或up（运行中）</span></span>
<span class="line"><span>removing（迁移中）</span></span>
<span class="line"><span>paused（暂停）</span></span>
<span class="line"><span>exited（停止）</span></span>
<span class="line"><span>dead（死亡）</span></span>
<span class="line"><span>docker ps -a命令，可以查看全部已存在的容器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-compose-yml-文件编写" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-文件编写"><span>docker-compose.yml 文件编写</span></a></h2><blockquote><p>参考：https://docs.docker.com/compose/compose-file/compose-file-v3/</p></blockquote><h3 id="compose-和-docker-兼容性矩阵" tabindex="-1"><a class="header-anchor" href="#compose-和-docker-兼容性矩阵"><span>Compose 和 Docker 兼容性矩阵</span></a></h3><p>docker-ce 版本和 compose 版本对应关系根据具体情况编辑</p><h3 id="docker-swarm-上的-docker-compose-示例" tabindex="-1"><a class="header-anchor" href="#docker-swarm-上的-docker-compose-示例"><span>docker swarm 上的 docker-compose 示例</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;3.9&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">redis:alpine</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;6379&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">frontend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      update_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        parallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      restart_policy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">postgres:9.4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">db-data:/var/lib/postgresql/data</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">backend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      placement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        max_replicas_per_node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;node.role==manager&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  vote</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dockersamples/examplevotingapp_vote:before</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;5000:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">frontend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">redis</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      update_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        parallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      restart_policy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  result</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dockersamples/examplevotingapp_result:before</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;5001:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">backend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">db</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      update_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        parallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      restart_policy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">on-failure</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  worker</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dockersamples/examplevotingapp_worker</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">frontend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">backend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">replicated</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">APP=VOTING</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      restart_policy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">on-failure</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        max_attempts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        window</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">120s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      placement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;node.role==manager&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  visualizer</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">dockersamples/visualizer:stable</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;8080:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    stop_grace_period</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">1m30s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      placement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;node.role==manager&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  frontend</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  backend</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  db-data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基本配置选项" tabindex="-1"><a class="header-anchor" href="#基本配置选项"><span>基本配置选项</span></a></h4><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  webapp</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">.</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      dockerfile</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">Dockerfile</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      args</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#添加构建参数，这些参数是只能在构建过程中访问的环境变量 使用数组或字典</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        buildno</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        exportPort</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">8888</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      #      下面这种格式也可以</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      #      - buildno=1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      #      - exportPort=8888</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 使用Docker标签将元数据添加到生成的镜像。使用数组或字典</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        com.example.description</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Accounting webapp&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        com.example.department</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Finance&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      network</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">host</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #构建期间为 RUN 指令设置的网络</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">prod</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #构建 Dockerfile中定义的指定阶段。参阅docker的多阶段构建文档</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    configs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#配置必须已经存在或已在顶级配置配置中定义  docker swarm中才有</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my_other_config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my_config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        target</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">/redis_config</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        uid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;103&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #在服务的任务容器中拥有已安装配置文件的数字 UID 或 GID。如果未指定，两者在 Linux 上均默认为 0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        gid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;103&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0440</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #八进制表示法在服务的任务容器中安装的文件的权限</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">myimage:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    credential_spec</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my_credential_spec</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">my-web-container</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # deploy在swarm中生效</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # 这些只在普通docker中生效build，cgroup_parent，container_name，devices，tmpfs，external_links，links，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    # network_mode，restart，security_opt，userns_mode</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定与服务的部署和运行相关的配置</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      endpoint_mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">vip</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #为连接到群的外部客户端指定服务发现方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # vip Docker为服务分配一个虚拟 IP (VIP)，充当客户端访问网络服务的前端</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      # dnsrr  DNS轮询服务发现  Docker为服务设置 DNS条目，对服务名称的DNS查询返回IP地址列表，客户端直接连接到其中一个</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      labels</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        com.example.description</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;This label will appear on the web service&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      mode</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">replicated</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #global（每个集群节点一个容器）或replicated （指定数量的容器）。默认replicated</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      replicas</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #在给定时间应该运行的容器数量</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      placement</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#指定约束和优先部署顺序</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        max_replicas_per_node</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #如果服务是replicated（这是默认设置），则限制任何时候可以在节点上运行的副本数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;node.role==manager&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        preferences</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">          - </span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">spread</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">node.labels.zone</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      resources</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#配置资源限制</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        limits</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">          cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0.50&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">          memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">50M</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        reservations</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">          cpus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0.25&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">          memory</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">20M</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      update_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#更新容器策略</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        parallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #一次执行的容器数，设置为0则全部一次执行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        failure_action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">pause</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #失败后操作 continue pause</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      rollback_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#回滚容器策略</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        parallelism</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #一次执行的容器数，设置为0则全部一次执行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">10s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        failure_action</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">pause</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #失败后操作 continue pause</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      restart_policy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#重启容器策略</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">on-failure</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #none, on-failure or any (default: any).</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">5s</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #重新启动尝试之间等待的时间过长</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        max_attempts</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #最大尝试次数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">        window</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">120s</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> #在决定重启是否成功之前等待多长时间</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">db</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">redis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">redis:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">redis</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">postgres:latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">db</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      POSTGRES_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">123456</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">  configs</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#配置   docker swarm中才有</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    my_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      file</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">./my_config.txt</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">    my_other_config</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">      external</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,139),p=[l];function h(t,k){return a(),i("div",null,p)}const c=s(e,[["render",h],["__file","docker-compose.html.vue"]]),o=JSON.parse('{"path":"/zh/posts/docker/docker-compose.html","title":"docker-compose","lang":"zh-CN","frontmatter":{"title":"docker-compose","date":"2023-03-02T10:09:40.000Z","updated":"2023-06-15T14:03:05.000Z","categories":"docker","tags":["docker","docker-compose"],"description":"docker-compose 环境 云服务器 centOS 7.6 64 位 docker-compose 安装 docker-compose 命令 docker-compose 用法 docker-compose pull 拉取服务依赖的镜像 命令选项[options] --ignore-pull-failures 忽略拉取镜像过程中的错误 --pa...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/docker/docker-compose.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"docker-compose"}],["meta",{"property":"og:description","content":"docker-compose 环境 云服务器 centOS 7.6 64 位 docker-compose 安装 docker-compose 命令 docker-compose 用法 docker-compose pull 拉取服务依赖的镜像 命令选项[options] --ignore-pull-failures 忽略拉取镜像过程中的错误 --pa..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"docker-compose"}],["meta",{"property":"article:published_time","content":"2023-03-02T10:09:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"docker-compose\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-02T10:09:40.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[]},{"level":2,"title":"docker-compose 安装","slug":"docker-compose-安装","link":"#docker-compose-安装","children":[]},{"level":2,"title":"docker-compose 命令","slug":"docker-compose-命令","link":"#docker-compose-命令","children":[{"level":3,"title":"docker-compose 用法","slug":"docker-compose-用法","link":"#docker-compose-用法","children":[]},{"level":3,"title":"docker-compose pull","slug":"docker-compose-pull","link":"#docker-compose-pull","children":[]},{"level":3,"title":"docker-compose build","slug":"docker-compose-build","link":"#docker-compose-build","children":[]},{"level":3,"title":"docker-compose create","slug":"docker-compose-create","link":"#docker-compose-create","children":[]},{"level":3,"title":"docker-compose exec","slug":"docker-compose-exec","link":"#docker-compose-exec","children":[]},{"level":3,"title":"docker-compose run","slug":"docker-compose-run","link":"#docker-compose-run","children":[]},{"level":3,"title":"docker-compose up","slug":"docker-compose-up","link":"#docker-compose-up","children":[]},{"level":3,"title":"docker-compose ps","slug":"docker-compose-ps","link":"#docker-compose-ps","children":[]},{"level":3,"title":"docker-compose down","slug":"docker-compose-down","link":"#docker-compose-down","children":[]},{"level":3,"title":"docker-compose restart","slug":"docker-compose-restart","link":"#docker-compose-restart","children":[]},{"level":3,"title":"docker-compose rm","slug":"docker-compose-rm","link":"#docker-compose-rm","children":[]},{"level":3,"title":"docker-compose start","slug":"docker-compose-start","link":"#docker-compose-start","children":[]},{"level":3,"title":"docker-compose stop","slug":"docker-compose-stop","link":"#docker-compose-stop","children":[]},{"level":3,"title":"docker-compose logs","slug":"docker-compose-logs","link":"#docker-compose-logs","children":[]},{"level":3,"title":"docker-compose pause","slug":"docker-compose-pause","link":"#docker-compose-pause","children":[]},{"level":3,"title":"docker-compose unpause","slug":"docker-compose-unpause","link":"#docker-compose-unpause","children":[]},{"level":3,"title":"docker-compose kill","slug":"docker-compose-kill","link":"#docker-compose-kill","children":[]},{"level":3,"title":"docker-compose config","slug":"docker-compose-config","link":"#docker-compose-config","children":[]},{"level":3,"title":"docker-compose port","slug":"docker-compose-port","link":"#docker-compose-port","children":[]},{"level":3,"title":"docker-compose push","slug":"docker-compose-push","link":"#docker-compose-push","children":[]},{"level":3,"title":"docker-compose version","slug":"docker-compose-version","link":"#docker-compose-version","children":[]}]},{"level":2,"title":"Docker 五种网络模式与应用场景","slug":"docker-五种网络模式与应用场景","link":"#docker-五种网络模式与应用场景","children":[{"level":3,"title":"bridge 模式","slug":"bridge-模式","link":"#bridge-模式","children":[]},{"level":3,"title":"host 模式","slug":"host-模式","link":"#host-模式","children":[]},{"level":3,"title":"container 模式","slug":"container-模式","link":"#container-模式","children":[]},{"level":3,"title":"none 模式","slug":"none-模式","link":"#none-模式","children":[]},{"level":3,"title":"macvlan 模式","slug":"macvlan-模式","link":"#macvlan-模式","children":[]}]},{"level":2,"title":"容器状态","slug":"容器状态","link":"#容器状态","children":[]},{"level":2,"title":"docker-compose.yml 文件编写","slug":"docker-compose-yml-文件编写","link":"#docker-compose-yml-文件编写","children":[{"level":3,"title":"Compose 和 Docker 兼容性矩阵","slug":"compose-和-docker-兼容性矩阵","link":"#compose-和-docker-兼容性矩阵","children":[]},{"level":3,"title":"docker swarm 上的 docker-compose 示例","slug":"docker-swarm-上的-docker-compose-示例","link":"#docker-swarm-上的-docker-compose-示例","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":14.81,"words":4444},"filePathRelative":"zh/posts/docker/docker-compose.md","localizedDate":"2023年3月2日","excerpt":"\\n<h2>环境</h2>\\n<p>云服务器 centOS 7.6 64 位</p>\\n<h2>docker-compose 安装</h2>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">curl</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -L</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> \\"https://github.com/docker/compose/releases/download/v2.15.1/docker-compose-linux-x86_64\\"</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -o</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> /usr/local/bin/docker-compose</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">chmod</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> +x</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> /usr/local/bin/docker-compose</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker-compose</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 验证docker-compose.yml文件</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker-compose</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> config</span><span style=\\"--shiki-light:#005CC5;--shiki-dark:#D19A66\\"> -q</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 拉取服务依赖的镜像</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker-compose</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> pull</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> nginx</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 创建并启动所有服务的容器</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker-compose</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> up</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 列出工程中所有服务的容器</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">docker-compose</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\"> ps</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};

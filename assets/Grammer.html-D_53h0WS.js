import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,c as t,d as a,a as i,b as n,o as e}from"./app-Di2jApqi.js";const k={},p=i("h1",{id:"koltin-语法",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#koltin-语法"},[i("span",null,"Koltin 语法")])],-1),r=i("p",null,[i("a",{href:"https://kotlinlang.org/",target:"_blank",rel:"noopener noreferrer"},"https://kotlinlang.org/")],-1),d=i("blockquote",null,[i("p",null,"基于版本 2.0.0")],-1),g=i("h2",{id:"变量",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#变量"},[i("span",null,"变量")])],-1),y=n(`<h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>整型                  Byte, Short, Int, Long</span></span>
<span class="line"><span>无符号整型            UByte, UShort, UInt, ULong</span></span>
<span class="line"><span>浮点型                Float, Double</span></span>
<span class="line"><span>布尔                  Boolean</span></span>
<span class="line"><span>字符                  Char</span></span>
<span class="line"><span>字符串                String</span></span>
<span class="line"><span></span></span>
<span class="line"><span>数组                  Array</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 类型放在变量后面有助于编译器类型推导，一般赋值之后有自动类型推导</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">d </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 数组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> simpleArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 1, 2, 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> nullArray: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOfNulls</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// null, null, null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> exampleArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> emptyArray</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 嵌套数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// Creates a three-dimensional array</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> threeDArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } } }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(threeDArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">contentDeepToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 访问数组元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> simpleArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> twoDArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">simpleArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">twoDArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(simpleArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(twoDArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//！！！数组使用！！！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//可变数量的参数传递给函数，将包含可变数量参数的数组传递给函数，使用扩展运算符 (*)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lettersArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printAllStrings</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">lettersArray)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// abcd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> printAllStrings</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> strings: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (string </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> strings) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(string)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//比较两个数组是否具有相同顺序的相同元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> compareArray1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> compareArray2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(compareArray1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">contentEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(compareArray2))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 使用中缀符号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">simpleArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(simpleArray contentEquals anotherArray)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//变换数组 详见https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> sumArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(sumArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> shuffleArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">shuffleArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(shuffleArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> convertArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(convertArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toSet</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(convertArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> pairArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">120</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">150</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;cherry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">140</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(pairArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">toMap</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//原始类型数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">BooleanArray、ByteArray、CharArray、DoubleArray、FloatArray、IntArray、LongArray、ShortArray</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>//每个集合类型都可以是可变的或只读的</span></span>
<span class="line"><span>Lists     可重复有序集合</span></span>
<span class="line"><span>Sets      无重复无序集合</span></span>
<span class="line"><span>Maps      键值对</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),B=i("h2",{id:"控制流",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#控制流"},[i("span",null,"控制流")])],-1),c=i("h3",{id:"条件表达式",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#条件表达式"},[i("span",null,"条件表达式")])],-1),o=n(`<h3 id="区间" tabindex="-1"><a class="header-anchor" href="#区间"><span>区间</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //等价于 1, 2, 3, 4</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   //等价于 1, 2, 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> downTo </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //等价于 4, 3, 2, 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> step </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">   //等价于 1, 3, 5</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;d&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //等价于 &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;z&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> downTo </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> step </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //等价于&#39;z&#39;, &#39;x&#39;, &#39;v&#39;, &#39;t&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h3>`,3),A=i("h2",{id:"方法",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#方法"},[i("span",null,"方法")])],-1),F=n(`<h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//类名后面的括号 () 内</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//类主体{}内</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> category: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//类属性可以有默认值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;example@gmail.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> category: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;work&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h3><p>使用<a href="#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">构造函数</a>创建实例,Kotlin 没有 new 关键字</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> contact </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;mary@gmail.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数"><span>构造函数</span></a></h4><p>Kotlin 中的类具有一个主构造函数，还可能有一个或多个辅助构造函数，主构造函数在类头中声明，位于类名和可选类型参数之后。如果主构造函数没有任何注释或可见性修饰符，则可以省略构造函数关键字 constructor。</p><p>类头不能包含任何可运行的代码。如果要在对象创建期间运行某些代码，在类主体内使用初始化块，按顺序执行。</p><p>如果构造函数有注释或<a href="#%E5%8F%AF%E8%A7%81%E6%80%A7">可见性</a>修饰符，则需要 constructor 关键字，并且修饰符位于其前面</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  //主构造函数参数可以在类主体声明的属性初始值设定中使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> customerKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">uppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //主构造函数参数可以在初始化块中使用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;First initializer block that prints </span><span style="--shiki-light:#005CC5;--shiki-dark:#E06C75;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Second initializer block that prints </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">name.length</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//如果构造函数有注释或可见性修饰符，则需要 constructor 关键字，并且修饰符位于其前面</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> @Inject</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性"><span>可见性</span></a></h4><p>类、对象、接口、构造函数和函数以及属性及其设置器都可以具有可见性修饰符.Kotlin 中有四种可见性修饰符：private、protected、internal 和 public。默认可见性是公开的</p><h5 id="包" tabindex="-1"><a class="header-anchor" href="#包"><span>包</span></a></h5><p>函数、属性、类、对象和接口可以直接在包内的顶层声明</p><ol><li>不使用可见性修饰符，则默认使用 public，将在任何地方都可见</li><li>将声明标记为 private，仅在包含该声明的文件内可见。</li><li>将其标记为 internal，将在同一<a href="#%E6%A8%A1%E5%9D%97">模块</a>中的任何位置可见</li><li>protected 修饰符不可用于顶级声明</li></ol><h5 id="类成员" tabindex="-1"><a class="header-anchor" href="#类成员"><span>类成员</span></a></h5><ol><li>private，仅在该类中可见</li><li>protected，该类中可见，在子类中可见</li><li>internal，模块内的任何看到声明类的客户端都可以看到其内部成员</li><li>public，任何看到声明类的客户端都会看到其公共成员</li></ol><p>局部变量、函数和类不能具有可见性修饰符</p><h5 id="模块" tabindex="-1"><a class="header-anchor" href="#模块"><span>模块</span></a></h5><p>模块是编译在一起的一组 Kotlin 文件，IntelliJ IDEA 模块、Maven 工程、Gradle 工程、一次调用 <code>&lt;kotlinc&gt;</code> Ant 任务编译的一组文件</p><h3 id="类成员-1" tabindex="-1"><a class="header-anchor" href="#类成员-1"><span>类成员</span></a></h3><ol><li>构造函数和初始化块</li><li>方法</li><li>属性</li><li>嵌套类和内部类</li><li>对象声明</li></ol><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h3><p><a href="https://kotlinlang.org/docs/inheritance.html" target="_blank" rel="noopener noreferrer">https://kotlinlang.org/docs/inheritance.html</a></p><h3 id="抽象类" tabindex="-1"><a class="header-anchor" href="#抽象类"><span>抽象类</span></a></h3><p>类以及其中的某些或全部成员可以声明为 abstract。 抽象成员在本类中可以不用实现。继承不需要使用 open 关键字</p><p>可以用抽象成员覆盖非抽象开放成员</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // some default polygon drawing method</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> WildShape</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // Classes that inherit WildShape need to provide their own</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // draw method instead of using the default on Polygon</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伴生对象" tabindex="-1"><a class="header-anchor" href="#伴生对象"><span>伴生对象</span></a></h3><p>如果需要写一个静态工具类，在类内声明一个伴生对象，可以仅使用类名来访问伴生对象的成员</p><p><a href="https://kotlinlang.org/docs/object-declarations.html#companion-objects" target="_blank" rel="noopener noreferrer">https://kotlinlang.org/docs/object-declarations.html#companion-objects</a></p><h2 id="空安全" tabindex="-1"><a class="header-anchor" href="#空安全"><span>空安全</span></a></h2><p>空安全是一组特征组合</p><ul><li>显式声明程序中何时允许空值</li><li>检查空值</li><li>对可能包含空值的属性或函数使用安全调用</li><li>声明检测到空值时要采取的操作</li></ul><h3 id="可空类型" tabindex="-1"><a class="header-anchor" href="#可空类型"><span>可空类型</span></a></h3>`,36),v=n(`<h3 id="检查空值" tabindex="-1"><a class="header-anchor" href="#检查空值"><span>检查空值</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> describeString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(maybeString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (maybeString </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> maybeString.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;String of length </span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#032F62;--shiki-dark:#ABB2BF;">maybeString.length</span><span style="--shiki-light:#032F62;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;Empty or null string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安全调用运算符" tabindex="-1"><a class="header-anchor" href="#安全调用运算符"><span>安全调用运算符.?</span></a></h3><p>lengthString() 函数使用安全调用返回字符串的长度或 null</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> lengthString</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(maybeString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">?): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> maybeString?.length</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="elvis-运算符" tabindex="-1"><a class="header-anchor" href="#elvis-运算符"><span>Elvis 运算符</span></a></h3><p>访问 length 属性的安全调用返回 null 值。 Elvis 运算符返回 0 结果</p><div class="language-kotlin line-numbers-mode" data-highlighter="shiki" data-ext="kotlin" data-title="kotlin" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> nullString: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(nullString?.length ?: </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,8);function C(u,E){const s=h("KotlinPlayground");return e(),t("div",null,[p,r,d,a(s,{title:"hello-world",key:"09965f1b",settings:"%7B%7D",files:"eJyLVkorzVPITczM09BUqI7JUwCCgqLMvJKcPI0YJY/UnJx8HYXy/KKcFMUYJU2IvL6+AqpEXm1MnlIsAHqSF4A="}),g,a(s,{title:"Variables",key:"579ef0a3",settings:"%7B%7D",files:"eJyLVkorzVPITczM09BUqI7JU1AoS8xRKMgvSM4vylOwVTBVUFDQ1wcJPu1f9WL97qf9M16298PUZeSXpOSnA5WZQ0SKFJJLi0vyc1OLioGChgZQvUVP+9cDNSL0IquyAAkUFGXmleTkacAlNJFFY5RCMlKLUhUSgVgFaieEilHSBNvxdO3052uWPdmx6dmKhc/m7sepuRqqW1fBsBbm+rz8cqAxMXm1MXlKsQACoWft"}),y,a(s,{title:"Collections",key:"09ba2c0e",settings:"%7B%7D",files:"eJytVctOFEEU/ZWbjoueZIBB2UiAxMSQqExIHHbTsyi6a2ZKeqqbqmqwQ9i70LhwoQsTd2408Qv8G5HwF9x69HsIE0JmUzn31rmPc6Z67E0zDgvCuN+Di4ADbGwcMKmkPcJbSiJIeJxDjKgGz0gMAtFDBEdzklIJuyZ4OPUDTwlG+CymgdeHwJOnGRHuHDIRarynSVLBuIq53yRqhALvaE5hyoRUwBRdAOOgENGlgMlteHLRvD0eTC5b9JYjJqtSrOtUv9elaQ08J7J7N0wyri+bUrJDUcyvm2iNrReN6P8vn/79/X79+6fb/TBT5Dh27Z4zNQf6Po1ZyBSoPKUQ0TAmgiiW8EIYaQi3i6tayZ0RasJne6jSokIfIpYlN5A9rpMoQpqUckVm2IRNdzFBF8kZbVRZzuamHdGG6daM6STteG5fZLiAXR0yQ5A0LSY4Jhx/boI5FSJvnjveYFLTtOQ0Be5TsyhVV9NcvE9MXW81LaearpQS19NVEsEH7cBQO/UiobUzSCNa6rd0eyanEm9I0q54C5K2xXudsZAOKc/0DCStNw8qgc3BQPd6ws6ZA54bIBHooCpn6RNSUi9TGWu1VC7TK6VPaL6GzWYUUoLPzh1PVf0i+p5x+YbmWMc23WtVLzuv+aRiwIrNR6+bYhqySTUX6XlWc9G7gql0EmrlnNSHV1zV7ISRx1CkLFn644UQJH9JTzO6c7QHV58/Xv/6c/Ptx9WHr0WbkQ5iJ1Wm774pm3142odndrEmTRt3X38XfFu3BA/0673V6MXEzH9yjH07rj5sTaqL1uiWsMZnYUN5F6OjQ67LgHuTW0Kzhk0="}),B,c,a(s,{title:"Conditional%20expressions",key:"8fc93e76",settings:"%7B%7D",files:"eJyVU8tOwzAQ/JVVTqkEgvaEEHDgAj1xQJwIBzfZUFN3HWynBSH+nbWdR9NEqsghj92dGXvGeU3KmmArJKWzn4wALi5Alv5lJxQU17Ak137la8w3cAvO1OhrsoQ01GYQoP4quD/3H7+AyuKwsQgNf6uMJKcoLWYZRdX9GgmEBUGAX5VBa6UOLa+sVx8Mz5JHVEpnSVvmqVo57gRwylPdSngbyzLg8LMWyjJ4niVnYNHZFuc0VzVhJIQ4Aud3/PLUVyeYmmVMsD0YRCfpvadsZiPtcZu5n48pXmhDek8MYX9Js1W4k7q2kGsqpGNXQFqwwklbSiwiUfA6SHTwkddRhA3v7I6BCn5y/qBLuNda4SAB23rtcFv5bK+6s4E2N7IKC2oS6MKOngXIDVz69foz0/h1CAw73qH55t2porUFemjY08TAQGF+UkLASrppDQYHkamRgcripMpemO2In2GBf9hskx9xrLX7X/SH4Qfw+CfrNTh9biVvf3j5P0Q="}),o,a(s,{title:"Loops",key:"5b9c0d98",settings:"%7B%7D",files:"eJxlUEtOxDAMvYqpkGg1oykIsRs2SKxZI8rCtCmNaB2UpIMQ4gochA034DaIa2CnybRAFm5cv198k7UjwYCa8uKlIoCyhNbYr8/377cP6bmBnMbhTlnQBCebzVkBASmH0WnmwHcKtFcWPXOQmgBOA4t0rxLt0WryUbWQn69SdthDjQ/KwTn02vmrNq+yGq01vsrWwPdOKafS3dSmR89tUAg5hS0pg8o+ZnDricWux2F4XnPIIwcIhwEu5SCKcAz+lOVTp3sF+yXs0E6Sl+xHnO5YwBMoeMbBFk4Xu5ltecp2Aow+cmbearVYQXS64NIkp8b8f4oA/orOzCj5K+MkuV0YM41ds9sfXIuoKA=="}),A,a(s,{title:"functions",key:"1ab717fd",settings:"%7B%7D",files:"eJytlN9P01AUx/+Vw8JDGwpDVB6I8uKLJBhNfPCB8lDgbjTpuqXtyAhZshCFEcCiMhy4EEiAEGOYxkTHfsA/01u2J/4Fz+1t9zNTNO5hvT0959zP+Z577kwoHIZIUp8Hd+/S/Z6jO9sCtVfd3Fdc3VYPbr5V6OGm1GsScVW/3qWfDmmmyk2w4idxah/AIFbS0KHpAmlZx33ATMaE1ARM6ZYEy95T9P5hRdYBf35cCoZgWdYxCPnq13lqF53KKV3bd7M7dDtXPz6vX13Rqk3XawjmefXJDo+DZOjjfjxqQR+85rgcLGGouvWMmKYSJa9Ua/GFQSJqSohxywS8tNAhKqEfswfvYsDthWu6IIdmBrnLLAz6wXJIDEqhpTO3sNGo5OsXJ1zU/4KBRcqhKT0Sx63+hojvGVNUXeiJY1rek2BMRFdmZ/TvangGODfwlrhbG06l4tRyjeMyLdtO9agtS28dHMTDnY5H5ZAEPpFneko0jZXw2xTdbuHwtBKbW1CaZ6KzjBWwSMpqCjU86b2PJBMJYswrJsHC05hz0c/pJ11SNNCTsTlimEimqab1PMLUGB6T4D4+HkjwEB/jTQZ/fLJrjTfbN5V9aucb6zbQyx/u1jq9OODnlM9JawcP4glCcLgJEIJThZjNzt6lgs6au/L2lhfwOrWCUyrzhmLrGpn3/1Q+c0/ETdVSlwgL8ENHIqpmEQMLSDHqFEzCKKRx84GBAXq26h4WQPNaB83eufki3S06pQyOBdeMw91Wt2gWVfVugexRY/+Ef3U3v1D7JwjtbSNR5U8gjxgIO/5cjP48vkC8eziphQzdeYt4Tulzu2ocr148bV1MwYVFC+ddqOBcbtKTvc6WtTRmEosjkbi2IIxKDFkC1SIxDj7E12lRZPM4fpccONh9cngzjTlQidDsL3IQlh4="}),F,a(s,{title:"Nullable%20types",key:"30e7f2ea",settings:"%7B%7D",files:"eJyNksFOwzAMhl/F6oVWAiZuaNKExA2BxoFdEOWQte5akTqVkxRNiHcnbpt1YxyIckns3/5+J29J5Qla1VCawVdOAIsFEPbIa6811MrCi+OGduD2HUq8VzwnLGN0BXmyqRsLhaILB1sECuE8yWmquanZfFpQUJi2azQyILPhs46rURhlclBbjQPJ4fAX0hSLRHcD0qvxQgQfiF3oLUlQI+MJWKAO+/lRLg4tfnHc76HESnntLscqvdIegx9G8auKAjuHZaRpqAr2sFwbmlzJeHA2r6z1bdCToavY89/TOq9+OjPjhuvSoJ3hjrElUd7dOn5C2rk6nTRxetkSHsiNH0IWo/NMsfK1HkQS/B67dkHkNKVHBeOLZpkw3dzmFHKT9x9D3dZa"}),v])}const D=l(k,[["render",C],["__file","Grammer.html.vue"]]),f=JSON.parse('{"path":"/zh/posts/kotlin/Grammer.html","title":"Grammer","lang":"zh-CN","frontmatter":{"title":"Grammer","categories":"Kotlin","tags":["Kotlin","Grammer"],"date":"2024-06-20T10:31:21.000Z","description":"Koltin 语法 https://kotlinlang.org/ 基于版本 2.0.0 变量 基本类型 集合 控制流 条件表达式 区间 循环 方法 类 属性 实例 使用构造函数创建实例,Kotlin 没有 new 关键字 构造函数 Kotlin 中的类具有一个主构造函数，还可能有一个或多个辅助构造函数，主构造函数在类头中声明，位于类名和可选类型参数之...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/kotlin/Grammer.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Grammer"}],["meta",{"property":"og:description","content":"Koltin 语法 https://kotlinlang.org/ 基于版本 2.0.0 变量 基本类型 集合 控制流 条件表达式 区间 循环 方法 类 属性 实例 使用构造函数创建实例,Kotlin 没有 new 关键字 构造函数 Kotlin 中的类具有一个主构造函数，还可能有一个或多个辅助构造函数，主构造函数在类头中声明，位于类名和可选类型参数之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-20T07:24:49.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:tag","content":"Grammer"}],["meta",{"property":"article:published_time","content":"2024-06-20T10:31:21.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-20T07:24:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Grammer\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-20T10:31:21.000Z\\",\\"dateModified\\":\\"2024-06-20T07:24:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":2,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":2,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":2,"title":"控制流","slug":"控制流","link":"#控制流","children":[{"level":3,"title":"条件表达式","slug":"条件表达式","link":"#条件表达式","children":[]},{"level":3,"title":"区间","slug":"区间","link":"#区间","children":[]},{"level":3,"title":"循环","slug":"循环","link":"#循环","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"类","slug":"类","link":"#类","children":[{"level":3,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":3,"title":"实例","slug":"实例","link":"#实例","children":[]},{"level":3,"title":"类成员","slug":"类成员-1","link":"#类成员-1","children":[]},{"level":3,"title":"继承","slug":"继承","link":"#继承","children":[]},{"level":3,"title":"抽象类","slug":"抽象类","link":"#抽象类","children":[]},{"level":3,"title":"伴生对象","slug":"伴生对象","link":"#伴生对象","children":[]}]},{"level":2,"title":"空安全","slug":"空安全","link":"#空安全","children":[{"level":3,"title":"可空类型","slug":"可空类型","link":"#可空类型","children":[]},{"level":3,"title":"检查空值","slug":"检查空值","link":"#检查空值","children":[]},{"level":3,"title":"安全调用运算符.?","slug":"安全调用运算符","link":"#安全调用运算符","children":[]},{"level":3,"title":"Elvis 运算符","slug":"elvis-运算符","link":"#elvis-运算符","children":[]}]}],"git":{"createdTime":1718868289000,"updatedTime":1718868289000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":8.19,"words":2457},"filePathRelative":"zh/posts/kotlin/Grammer.md","localizedDate":"2024年6月20日","excerpt":"\\n<p><a href=\\"https://kotlinlang.org/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://kotlinlang.org/</a></p>\\n<blockquote>\\n<p>基于版本 2.0.0</p>\\n</blockquote>\\n\\n<h2>变量</h2>\\n\\n<h2>基本类型</h2>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>整型                  Byte, Short, Int, Long</span></span>\\n<span class=\\"line\\"><span>无符号整型            UByte, UShort, UInt, ULong</span></span>\\n<span class=\\"line\\"><span>浮点型                Float, Double</span></span>\\n<span class=\\"line\\"><span>布尔                  Boolean</span></span>\\n<span class=\\"line\\"><span>字符                  Char</span></span>\\n<span class=\\"line\\"><span>字符串                String</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>数组                  Array</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{D as comp,f as data};

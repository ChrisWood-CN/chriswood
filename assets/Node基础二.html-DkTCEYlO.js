import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as e}from"./app-DZw5DSeQ.js";const n={},l=e(`<h2 id="二-node基础" tabindex="-1"><a class="header-anchor" href="#二-node基础"><span>二.node基础</span></a></h2><h3 id="_1-1-javascript文件执行" tabindex="-1"><a class="header-anchor" href="#_1-1-javascript文件执行"><span>1.1. JavaScript文件执行</span></a></h3><p>如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 1.直接打印一段文字</span></span>
<span class="line"><span>console.log(&quot;我是一段JavaScript代码&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 2.定义一个函数, 调用这个函数</span></span>
<span class="line"><span>function sum(num1, num2) {</span></span>
<span class="line"><span>  return num1 + num2;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const result = sum(20, 30);</span></span>
<span class="line"><span>console.log(&quot;计算结果:&quot;, result);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 3.执行定时器代码</span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;2s后执行的代码&quot;);</span></span>
<span class="line"><span>}, 2000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前我们知道有两种方式可以执行：</p><ul><li>将代码交给浏览器执行；</li><li>将代码载入到node环境中执行；</li></ul><p><strong>演练一：浏览器执行</strong></p><p>如果我们希望把代码交给浏览器执行：</p><ul><li>需要通过让浏览器加载、解析html代码，所以我们需要创建一个html文件；</li><li>在html中通过script标签，引入js文件；</li><li>当浏览器遇到script标签时，就会根据src加载、执行JavaScript代码；</li></ul><p>index.html文件：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html lang=&quot;en&quot;&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>  &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span>
<span class="line"><span>  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span>
<span class="line"><span>  &lt;title&gt;Document&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>  </span></span>
<span class="line"><span>  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRlNL5icuqPZcTYuUQYWibfyZRXz2Cq0WqSLjUpxYE2AWP6SyyUnib0FeYQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">浏览器执行结果</p><p><strong>演练二：Node执行</strong></p><p>如果我们希望把js文件交给node执行：</p><ul><li>首先电脑上需要安装Node.js环境，安装过程中会自动配置环境变量；</li><li>可以通过终端命令<code>node js文件</code>的方式来载入和执行对应的js文件；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>node index.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRzR7meXTMFsdHTU1eFlyicnoB1VG3a1qKPibgDOUkbTFX3kneicL6tIqXw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">Node执行结果</p><h3 id="_1-2-node的repl" tabindex="-1"><a class="header-anchor" href="#_1-2-node的repl"><span>1.2. Node的REPL</span></a></h3><p>什么是REPL呢？感觉挺高大上</p><ul><li><strong>REPL</strong>是<strong>Read-Eval-Print Loop</strong>的简称，翻译为**“读取-求值-输出”循环**；</li><li>REPL是一个简单的，交互式的编程环境；</li></ul><p>事实上，我们浏览器的console就可以看成一个REPL：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMR8BuCVR5suuVk032TuLibVmfaib3KT0AUFNqx9zibcZe7Lxru8zjjia9LbQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">浏览器控台</p><p>Node也给我们提供了一个REPL环境，我们可以在其中演练简单的代码：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRg5C61IZdYw43ODX4OMcTlB9oKSO49mUrfyGfiaILQ50QG9YkQBIMhUQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">REPL演练</p><h3 id="_2-1-给node程序传递参数" tabindex="-1"><a class="header-anchor" href="#_2-1-给node程序传递参数"><span>2.1. 给node程序传递参数</span></a></h3><p>正常情况下执行一个node程序，直接跟上我们对应的文件即可：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>node index.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但是，在某些情况下执行node程序的过程中，我们可能希望给node传递一些参数：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>node index.js env=development coderwhy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果我们这样来使用程序，就意味着我们需要在程序中获取到传递的参数：</p><ul><li>获取参数其实是在<code>process</code>的内置对象中的；</li></ul><p>如果我们直接打印这个内置对象，它里面包含特别的信息：</p><ul><li>其他的一些信息，比如版本、操作系统等大家可以自行查看，后面用到一些其他的我们还会提到；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRdWHgg3yOGUCQaXfrHa7gNxSDXCjjgcsicKv2wjVSIHoMU0q5UrEiaWcw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">process对象</p><p>现在，我们先找到其中的argv属性：</p><ul><li>我们发现它是一个数组，里面包含了我们需要的参数；</li><li>你可能有个疑问，为什么叫argv呢？</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRANq96ASLOyrFibKXET5ExBFG8otgsvibaVE21nKnn3S6VAibF9ADMyDrQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">argv属性</p><p>在C/C++程序中的main函数中，实际上可以获取到两个参数：</p><ul><li><p>argc：argument counter的缩写，传递参数的个数；</p></li><li><p>argv：argument vector的缩写，传入的具体参数。</p></li><li><ul><li>vector翻译过来是矢量的意思，在程序中表示的是一种数据结构。</li></ul></li><li><p>在C++、Java中都有这种数据结构，是一种数组结构；</p></li><li><p>在JavaScript中也是一个数组，里面存储一些参数信息；</p></li></ul><p>我们可以在代码中，将这些参数信息遍历出来，使用：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 获取参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 结果如下：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// /usr/local/bin/node</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// /Users/coderwhy/Desktop/Node/TestCode/04_learn_node/02_给Node传递参数/index.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// ENV=dev</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// coderwhy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-node程序输出内容" tabindex="-1"><a class="header-anchor" href="#_2-2-node程序输出内容"><span>2.2. node程序输出内容</span></a></h3><p><strong>console.log</strong></p><p>最常用的输入内容的方式：console.log</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(&quot;hello coderwhy&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>console.clear</strong></p><p>清空控制台：console.clear</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.clear</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>console.trace</strong></p><p>打印函数的调用栈：console.trace</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">  foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">trace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRyGNr0G8ibXhF45uFd21ibbUUqt1Rps93MEZRUbZOrZnZ97mXLyV9QJxA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">console.trace结果</p><p>还有一些其他的方法，其他的一些console方法，可以自己在下面学习研究一下。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRVMicUFTWQeVPdJ97a7ZlRvfjCdh97lNLiaYiay6EOTwZoRT6dVs7cv41A/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">image-20201008163045395</p><h3 id="_3-1-常见的全局对象" tabindex="-1"><a class="header-anchor" href="#_3-1-常见的全局对象"><span>3.1. 常见的全局对象</span></a></h3><p>Node中给我们提供了一些全局对象，方便我们进行一些操作：</p><ul><li>这些全局对象，我们并不需要从一开始全部一个个学习；</li><li>某些全局对象并不常用，某些全局对象我们会在后续学习中讲到；</li><li>比如module、exports、require()会在模块化中讲到；</li><li>比如Buffer后续会专门讲到；</li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRXTARF9ib7YIxlbzKvpwib1CEVSibJQshOFQDEFaej1wO3m921N9spwpSw/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">全局对象</p><h3 id="_3-2-特殊的全局对象" tabindex="-1"><a class="header-anchor" href="#_3-2-特殊的全局对象"><span>3.2. 特殊的全局对象</span></a></h3><p>为什么我称之为特殊的全局对象呢？</p><ul><li>这些全局对象可以在模块中任意使用，但是在命令行交互中是不可以使用的；</li><li>包括：__dirname、__filename、exports、module、require()</li></ul><p><strong>__dirname</strong></p><p>获取当前文件所在的路径：</p><ul><li>注意：不包括后面的文件名</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(__dirname);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// /Users/coderwhy/Desktop/Node/TestCode/04_learn_node/03_常见的全局变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>__filename</strong></p><p>获取当前文件所在的路径和文件名称：</p><ul><li>注意：包括后面的文件名称</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(__filename);</span></span>
<span class="line"><span>// /Users/coderwhy/Desktop/Node/TestCode/04_learn_node/03_常见的全局变量/global对象.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-常见的全局对象" tabindex="-1"><a class="header-anchor" href="#_3-3-常见的全局对象"><span>3.3. 常见的全局对象</span></a></h3><p><strong>process对象</strong></p><p>process提供了Node进程中相关的信息：</p><ul><li>比如Node的运行环境、参数信息等；</li><li>后面在项目中，我也会讲解，如何将一些环境变量读取到 <code>process</code> 的 <code>env</code> 中；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(process);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>console对象</strong></p><p>提供了简单的调试控制台，在前面讲解输入内容时已经学习过了。</p><ul><li>更加详细的查看官网文档：https://nodejs.org/api/console.html</li></ul><p><strong>定时器函数</strong></p><p>在Node中使用定时器有好几种方式：</p><ul><li><p><code>setTimeout(callback, delay[, ...args])</code>：<code>callback</code>在<code>delay</code>毫秒后执行一次；</p></li><li><p><code>setInterval(callback, delay[, ...args])</code>：<code>callback</code>每<code>delay</code>毫秒重复执行一次；</p></li><li><p><code>setImmediate(callback[, ...args])</code>：<code>callback</code>I / O事件后的回调的“立即”执行；</p></li><li><ul><li>这里先不展开讨论它和<code>setTimeout(callback, 0)</code>之间的区别；</li></ul></li><li><p>因为它涉及到事件循环的阶段问题，我会在后续详细讲解事件循环相关的知识；</p></li><li><p><code>process.nextTick(callback[, ...args])</code>：添加到下一次tick队列中；</p></li><li><ul><li>具体的讲解，也放到事件循环中说明；</li></ul></li></ul><p>代码演练：</p><ul><li>暂时不用关心执行顺序问题，在后续事件循环中我会讲到；</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;setTimtout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;setInterval&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;setImmediate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;process.nextTick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，它们有对应的取消定时器的方法：</p><ul><li>clearTimeout(timeoutObject);</li><li>clearInterval(intervalObject);</li><li>clearImmediate(immediateObject)</li></ul><p><strong>global对象</strong></p><p>global是一个全局对象，事实上前端我们提到的process、console、setTimeout等都有被放到global中：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">global</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么结果是一样的呢？</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRF0kic1mxontL0K2Yg10mlCPG5RHSgWIqAXg8Njre0kRNtfOke81bchQ/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">Node的源码</p><p>global中还有哪些属性呢？</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMR5XPKUUyx8cSDxqzRWOrk7kS0QMrL4zsK4Yy3HDuqc4ttI2eMa4fXLA/640?wx_fmt=jpeg&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片" loading="lazy">global其他属性的查看</p><p><strong>window和global的区别是什么？</strong></p><p>在浏览器中，全局变量都是在window上的，比如有document、setInterval、setTimeout、alert、console等等</p><p>在Node中，我们也有一个global属性，并且看起来它里面有很多其他对象。</p><p>但是在浏览器中执行的JavaScript代码，如果我们在顶级范围内通过var定义的一个属性，默认会被添加到window对象上：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var name = &#39;coderwhy&#39;;</span></span>
<span class="line"><span>console.log(window.name); // coderwhy</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在node中，我们通过var定义一个变量，它只是在当前模块中有一个变量，不会放到全局中：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>var name = &#39;coderwhy&#39;;</span></span>
<span class="line"><span>console.log(global.name); // undefined</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,99),t=[l];function p(d,r){return a(),s("div",null,t)}const o=i(n,[["render",p],["__file","Node基础二.html.vue"]]),k=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%BA%8C.html","title":"Node基础二","lang":"zh-CN","frontmatter":{"title":"Node基础二","date":"2022-10-01T12:06:20.000Z","categories":"Node","tags":"Node Node基础系列","pre":"Node基础一","next":"Node基础三","description":"二.node基础 1.1. JavaScript文件执行 如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？ 目前我们知道有两种方式可以执行： 将代码交给浏览器执行； 将代码载入到node环境中执行； 演练一：浏览器执行 如果我们希望把代码交给浏览器执行： 需要通过让浏览器加载、解析html代码，所以我们需要创建一个html文...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E4%BA%8C.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础二"}],["meta",{"property":"og:description","content":"二.node基础 1.1. JavaScript文件执行 如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？ 目前我们知道有两种方式可以执行： 将代码交给浏览器执行； 将代码载入到node环境中执行； 演练一：浏览器执行 如果我们希望把代码交给浏览器执行： 需要通过让浏览器加载、解析html代码，所以我们需要创建一个html文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRlNL5icuqPZcTYuUQYWibfyZRXz2Cq0WqSLjUpxYE2AWP6SyyUnib0FeYQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-10-01T12:06:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础二\\",\\"image\\":[\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRlNL5icuqPZcTYuUQYWibfyZRXz2Cq0WqSLjUpxYE2AWP6SyyUnib0FeYQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRzR7meXTMFsdHTU1eFlyicnoB1VG3a1qKPibgDOUkbTFX3kneicL6tIqXw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMR8BuCVR5suuVk032TuLibVmfaib3KT0AUFNqx9zibcZe7Lxru8zjjia9LbQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRg5C61IZdYw43ODX4OMcTlB9oKSO49mUrfyGfiaILQ50QG9YkQBIMhUQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRdWHgg3yOGUCQaXfrHa7gNxSDXCjjgcsicKv2wjVSIHoMU0q5UrEiaWcw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRANq96ASLOyrFibKXET5ExBFG8otgsvibaVE21nKnn3S6VAibF9ADMyDrQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRyGNr0G8ibXhF45uFd21ibbUUqt1Rps93MEZRUbZOrZnZ97mXLyV9QJxA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRVMicUFTWQeVPdJ97a7ZlRvfjCdh97lNLiaYiay6EOTwZoRT6dVs7cv41A/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRXTARF9ib7YIxlbzKvpwib1CEVSibJQshOFQDEFaej1wO3m921N9spwpSw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMRF0kic1mxontL0K2Yg10mlCPG5RHSgWIqAXg8Njre0kRNtfOke81bchQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\",\\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXutHOrSK1pdcFibeiaWpZ3rmMR5XPKUUyx8cSDxqzRWOrk7kS0QMrL4zsK4Yy3HDuqc4ttI2eMa4fXLA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\\"],\\"datePublished\\":\\"2022-10-01T12:06:20.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"二.node基础","slug":"二-node基础","link":"#二-node基础","children":[{"level":3,"title":"1.1. JavaScript文件执行","slug":"_1-1-javascript文件执行","link":"#_1-1-javascript文件执行","children":[]},{"level":3,"title":"1.2. Node的REPL","slug":"_1-2-node的repl","link":"#_1-2-node的repl","children":[]},{"level":3,"title":"2.1. 给node程序传递参数","slug":"_2-1-给node程序传递参数","link":"#_2-1-给node程序传递参数","children":[]},{"level":3,"title":"2.2. node程序输出内容","slug":"_2-2-node程序输出内容","link":"#_2-2-node程序输出内容","children":[]},{"level":3,"title":"3.1. 常见的全局对象","slug":"_3-1-常见的全局对象","link":"#_3-1-常见的全局对象","children":[]},{"level":3,"title":"3.2. 特殊的全局对象","slug":"_3-2-特殊的全局对象","link":"#_3-2-特殊的全局对象","children":[]},{"level":3,"title":"3.3. 常见的全局对象","slug":"_3-3-常见的全局对象","link":"#_3-3-常见的全局对象","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":6.32,"words":1896},"filePathRelative":"zh/posts/node/base/Node基础二.md","localizedDate":"2022年10月1日","excerpt":"<h2>二.node基础</h2>\\n<h3>1.1. JavaScript文件执行</h3>\\n<p>如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>// 1.直接打印一段文字</span></span>\\n<span class=\\"line\\"><span>console.log(\\"我是一段JavaScript代码\\");</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 2.定义一个函数, 调用这个函数</span></span>\\n<span class=\\"line\\"><span>function sum(num1, num2) {</span></span>\\n<span class=\\"line\\"><span>  return num1 + num2;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>const result = sum(20, 30);</span></span>\\n<span class=\\"line\\"><span>console.log(\\"计算结果:\\", result);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>// 3.执行定时器代码</span></span>\\n<span class=\\"line\\"><span>setTimeout(() =&gt; {</span></span>\\n<span class=\\"line\\"><span>  console.log(\\"2s后执行的代码\\");</span></span>\\n<span class=\\"line\\"><span>}, 2000);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,k as data};

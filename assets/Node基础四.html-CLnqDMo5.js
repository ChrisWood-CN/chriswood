import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as e,b as i}from"./app-D5FmEbjh.js";const a={},l=i(`<h2 id="四-常用内置模块" tabindex="-1"><a class="header-anchor" href="#四-常用内置模块"><span>四.常用内置模块</span></a></h2><h3 id="_1-1-认识path模块" tabindex="-1"><a class="header-anchor" href="#_1-1-认识path模块"><span>1.1. 认识path模块</span></a></h3><p>path模块用于对路径和文件进行处理，提供了很多好用的方法。</p><p>并且我们知道在Mac OS、Linux和window上的路径是不一样的</p><ul><li>window上会使用 <code>\\</code>或者 <code>\\\\</code> 来作为文件路径的分隔符，当然目前也支持 <code>/</code>；</li><li>在Mac OS、Linux的Unix操作系统上使用 <code>/</code> 来作为文件路径的分隔符；</li></ul><p>那么如果我们在window上使用 <code>\\</code> 来作为分隔符开发了一个应用程序，要部署到Linux上面应该怎么办呢？</p><ul><li>显示路径会出现一些问题；</li><li>所以为了屏蔽他们之间的差异，在开发中对于路径的操作我们可以使用 <code>path</code> 模块；</li></ul><h3 id="_1-2-path常见的api" tabindex="-1"><a class="header-anchor" href="#_1-2-path常见的api"><span>1.2. path常见的API</span></a></h3><p><strong>从路径中获取信息</strong></p><ul><li>dirname：获取文件的父文件夹；</li><li>basename：获取文件名；</li><li>extname：获取文件扩展名；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const path = require(&quot;path&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const myPath = &#39;/Users/coderwhy/Desktop/Node/课堂/PPT/01_邂逅Node.pdf&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const dirname = path.dirname(myPath);</span></span>
<span class="line"><span>const basename = path.basename(myPath);</span></span>
<span class="line"><span>const extname = path.extname(myPath);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(dirname); // /Users/coderwhy/Desktop/Node/课堂/PPT</span></span>
<span class="line"><span>console.log(basename); // 01_邂逅Node.pdf</span></span>
<span class="line"><span>console.log(extname); // .pdf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>路径的拼接</strong></p><ul><li>如果我们希望将多个路径进行拼接，但是不同的操作系统可能使用的是不同的分隔符；</li><li>这个时候我们可以使用<code>path.join</code>函数；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(path.join(&#39;/user&#39;, &#39;why&#39;, &#39;abc.txt&#39;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>将文件和某个文件夹拼接</strong></p><ul><li><p>如果我们希望将某个文件和文件夹拼接，可以使用 <code>path.resolve</code>;</p></li><li><ul><li><code>resolve</code>函数会判断我们拼接的路径前面是否有 <code>/</code>或<code>../</code>或<code>./</code>；</li></ul></li><li><p>如果有表示是一个绝对路径，会返回对应的拼接路径；</p></li><li><p>如果没有，那么会和当前执行文件所在的文件夹进行路径的拼接</p></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>path.resolve(&#39;abc.txt&#39;); // /Users/coderwhy/Desktop/Node/TestCode/04_learn_node/06_常见的内置模块/02_文件路径/abc.txt</span></span>
<span class="line"><span>path.resolve(&#39;/abc.txt&#39;); // /abc.txt</span></span>
<span class="line"><span>path.resolve(&#39;/User/why&#39;, &#39;abc.txt&#39;); // /User/why/abc.txt</span></span>
<span class="line"><span>path.resolve(&#39;User/why&#39;, &#39;abc.txt&#39;); // /Users/coderwhy/Desktop/Node/TestCode/04_learn_node/06_常见的内置模块/02_文件路径/User/why/abc.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>resolve其实我们在webpack中也会使用：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const CracoLessPlugin = require(&#39;craco-less&#39;);</span></span>
<span class="line"><span>const path = require(&quot;path&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const resolve = dir =&gt; path.resolve(__dirname, dir);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  plugins: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      plugin: CracoLessPlugin,</span></span>
<span class="line"><span>      options: {</span></span>
<span class="line"><span>        lessLoaderOptions: {</span></span>
<span class="line"><span>          lessOptions: {</span></span>
<span class="line"><span>            modifyVars: { &#39;@primary-color&#39;: &#39;#1DA57A&#39; },</span></span>
<span class="line"><span>            javascriptEnabled: true,</span></span>
<span class="line"><span>          },</span></span>
<span class="line"><span>        },</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  webpack: {</span></span>
<span class="line"><span>    alias: {</span></span>
<span class="line"><span>      &quot;@&quot;: resolve(&quot;src&quot;),</span></span>
<span class="line"><span>      &quot;components&quot;: resolve(&quot;src/components&quot;)</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置模块fs" tabindex="-1"><a class="header-anchor" href="#内置模块fs"><span>内置模块fs</span></a></h2><h3 id="_1-1-认识fs模块" tabindex="-1"><a class="header-anchor" href="#_1-1-认识fs模块"><span>1.1. 认识fs模块</span></a></h3><p>fs是File System的缩写，表示文件系统。</p><p>对于任何一个为服务器端服务的语言或者框架通常都会有自己的文件系统：</p><ul><li>因为服务器需要将各种数据、文件等放置到不同的地方；</li><li>比如用户数据可能大多数是放到数据库中的（后面我们也会学习）；</li><li>比如某些配置文件或者用户资源（图片、音视频）都是以文件的形式存在于操作系统上的；</li></ul><p>Node也有自己的文件系统操作模块，就是fs：</p><ul><li>借助于Node帮我们封装的文件系统，我们可以在任何的操作系统（window、Mac OS、Linux）上面直接去操作文件；</li><li>这也是Node可以开发服务器的一大原因，也是它可以成为前端自动化脚本等热门工具的原因；</li></ul><p>Node文件系统的API非常的多：https://nodejs.org/dist/latest-v14.x/docs/api/fs.html</p><ul><li>我们不可能，也没必要一个个去学习；</li><li>这个更多的应该是作为一个API查询的手册，等用到的时候查询即可；</li><li>学习阶段我们只需要学习最常用的即可；</li></ul><p>但是这些API大多数都提供三种操作方式：</p><ul><li>方式一：同步操作文件：代码会被阻塞，不会继续执行；</li><li>方式二：异步回调函数操作文件：代码不会被阻塞，需要传入回调函数，当获取到结果时，回调函数被执行；</li><li>方式三：异步Promise操作文件：代码不会被阻塞，通过 <code>fs.promises</code> 调用方法操作，会返回一个Promise，可以通过then、catch进行处理；</li></ul><p><strong>我们这里以获取一个文件的状态为例：</strong></p><ul><li>注意：都需要引入 <code>fs</code> 模块；</li></ul><p>方式一：同步操作文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 1.方式一: 同步读取文件</span></span>
<span class="line"><span>const state = fs.statSync(&#39;../foo.txt&#39;);</span></span>
<span class="line"><span>console.log(state);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(&#39;后续代码执行&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：异步回调函数操作文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 2.方式二: 异步读取</span></span>
<span class="line"><span>fs.stat(&quot;../foo.txt&quot;, (err, state) =&gt; {</span></span>
<span class="line"><span>  if (err) {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>    return;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  console.log(state);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>console.log(&quot;后续代码执行&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式三：异步Promise操作文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 3.方式三: Promise方式</span></span>
<span class="line"><span>fs.promises.stat(&quot;../foo.txt&quot;).then(state =&gt; {</span></span>
<span class="line"><span>  console.log(state);</span></span>
<span class="line"><span>}).catch(err =&gt; {</span></span>
<span class="line"><span>  console.log(err);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>console.log(&quot;后续代码执行&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后续代码演练中，我将以异步回调的方式演练：相对更通用一些；</p><h3 id="_1-2-文件描述符" tabindex="-1"><a class="header-anchor" href="#_1-2-文件描述符"><span>1.2. 文件描述符</span></a></h3><p>文件描述符（File descriptors）是什么呢？</p><p>在 POSIX 系统上，对于每个进程，内核都维护着一张当前打开着的文件和资源的表格。</p><ul><li>每个打开的文件都分配了一个称为文件描述符的简单的数字标识符。</li><li>在系统层，所有文件系统操作都使用这些文件描述符来标识和跟踪每个特定的文件。</li><li>Windows 系统使用了一个虽然不同但概念上类似的机制来跟踪资源。</li><li>为了简化用户的工作，Node.js 抽象出操作系统之间的特定差异，并为所有打开的文件分配一个数字型的文件描述符。</li></ul><p><code>fs.open()</code> 方法用于分配新的文件描述符。一旦被分配，则文件描述符可用于从文件读取数据、向文件写入数据、或请求关于文件的信息。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 获取文件描述符</span></span>
<span class="line"><span>fs.open(&quot;../foo.txt&quot;, &#39;r&#39;, (err, fd) =&gt; {</span></span>
<span class="line"><span>  console.log(fd);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  fs.fstat(fd, (err, state) =&gt; {</span></span>
<span class="line"><span>    console.log(state);</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-文件的读写" tabindex="-1"><a class="header-anchor" href="#_1-3-文件的读写"><span>1.3. 文件的读写</span></a></h3><p>如果我们希望对文件的内容进行操作，这个时候可以使用文件的读写：</p><ul><li><code>fs.readFile(path[, options], callback)</code>：读取文件的内容；</li><li><code>fs.writeFile(file, data[, options], callback)</code>：在文件中写入内容；</li></ul><p>文件写入：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.writeFile(&#39;../foo.txt&#39;, content, {}, err =&gt; {</span></span>
<span class="line"><span>  console.log(err);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，你会发现有一个大括号没有填写任何的内容，这个是写入时填写的option参数：</p><ul><li>flag：写入的方式。</li><li>encoding：字符的编码；</li></ul><p>我们先来看flag：</p><ul><li><p>flag的值有很多：https://nodejs.org/dist/latest-v14.x/docs/api/fs.html#fs_file_system_flags</p></li><li><ul><li><code>w</code> 打开文件写入，默认值；</li></ul></li><li><p><code>w+</code>打开文件进行读写，如果不存在则创建文件；</p></li><li><p><code>r+</code> 打开文件进行读写，如果不存在那么抛出异常；</p></li><li><p><code>r</code>打开文件读取，读取时的默认值；</p></li><li><p><code>a</code>打开要写入的文件，将流放在文件末尾。如果不存在则创建文件；</p></li><li><p><code>a+</code>打开文件以进行读写，将流放在文件末尾。如果不存在则创建文件</p></li></ul><p>我们再来看看编码：</p><ul><li>我之前在简书上写过一篇关于字符编码的文章：https://www.jianshu.com/p/899e749be47c</li><li>目前基本用的都是UTF-8编码；</li></ul><p>文件读取：</p><ul><li>如果不填写encoding，返回的结果是Buffer；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.readFile(&#39;../foo.txt&#39;, {encoding: &#39;utf-8&#39;}, (err, data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件读取：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fs.readFile(&#39;../foo.txt&#39;, {encoding: &#39;utf-8&#39;}, (err, data) =&gt; {</span></span>
<span class="line"><span>  console.log(data);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-文件夹操作" tabindex="-1"><a class="header-anchor" href="#_1-4-文件夹操作"><span>1.4. 文件夹操作</span></a></h3><p><strong>新建一个文件夹</strong></p><p>使用<code>fs.mkdir()</code>或<code>fs.mkdirSync()</code>创建一个新文件夹：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const fs = require(&#39;fs&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const dirname = &#39;../why&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if (!fs.existsSync(dirname)) {</span></span>
<span class="line"><span>  fs.mkdir(dirname, (err) =&gt; {</span></span>
<span class="line"><span>    console.log(err);</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取文件夹的内容</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 读取文件夹</span></span>
<span class="line"><span>function readFolders(folder) {</span></span>
<span class="line"><span>  fs.readdir(folder, {withFileTypes: true} ,(err, files) =&gt; {</span></span>
<span class="line"><span>    files.forEach(file =&gt; {</span></span>
<span class="line"><span>      if (file.isDirectory()) {</span></span>
<span class="line"><span>        const newFolder = path.resolve(dirname, file.name);</span></span>
<span class="line"><span>        readFolders(newFolder);</span></span>
<span class="line"><span>      } else {</span></span>
<span class="line"><span>        console.log(file.name);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    })</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>readFolders(dirname);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>文件重命名</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fs.rename(&#39;../why&#39;, &#39;../coder&#39;, err =&gt; {</span></span>
<span class="line"><span>  console.log(err);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置模块events" tabindex="-1"><a class="header-anchor" href="#内置模块events"><span>内置模块events</span></a></h2><h3 id="_3-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_3-1-基本使用"><span>3.1. 基本使用</span></a></h3><p>Node中的核心API都是基于异步事件驱动的：</p><ul><li>在这个体系中，某些对象（发射器（Emitters））发出某一个事件；</li><li>我们可以监听这个事件（监听器 Listeners），并且传入的回调函数，这个回调函数会在监听到事件时调用；</li></ul><p>发出事件和监听事件都是通过EventEmitter类来完成的，它们都属于events对象。</p><ul><li><code>emitter.on(eventName, listener)</code>：监听事件，也可以使用<code>addListener</code>；</li><li><code>emitter.off(eventName, listener)</code>：移除事件监听，也可以使用<code>removeListener</code>；</li><li><code>emitter.emit(eventName[, ...args])</code>：发出事件，可以携带一些参数；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const EventEmmiter = require(&#39;events&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 监听事件</span></span>
<span class="line"><span>const bus = new EventEmmiter();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function clickHanlde(args) {</span></span>
<span class="line"><span>  console.log(&quot;监听到click事件&quot;, args);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>bus.on(&quot;click&quot;, clickHanlde);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>  bus.emit(&quot;click&quot;, &quot;coderwhy&quot;);</span></span>
<span class="line"><span>  bus.off(&quot;click&quot;, clickHanlde);</span></span>
<span class="line"><span>  bus.emit(&quot;click&quot;, &quot;kobe&quot;);</span></span>
<span class="line"><span>}, 2000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-常见的属性" tabindex="-1"><a class="header-anchor" href="#_3-2-常见的属性"><span>3.2. 常见的属性</span></a></h3><p>EventEmitter的实例有一些属性，可以记录一些信息：</p><ul><li><code>emitter.eventNames()</code>：返回当前 <code>EventEmitter对象</code>注册的事件字符串数组；</li><li><code>emitter.getMaxListeners()</code>：返回当前 <code>EventEmitter对象</code>的最大监听器数量，可以通过<code>setMaxListeners()</code>来修改，默认是10；</li><li><code>emitter.listenerCount(事件名称)</code>：返回当前 <code>EventEmitter对象</code>某一个事件名称，监听器的个数；</li><li><code>emitter.listeners(事件名称)</code>：返回当前 <code>EventEmitter对象</code>某个事件监听器上所有的监听器数组；</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>console.log(bus.eventNames());</span></span>
<span class="line"><span>console.log(bus.getMaxListeners());</span></span>
<span class="line"><span>console.log(bus.listenerCount(&quot;click&quot;));</span></span>
<span class="line"><span>console.log(bus.listeners(&quot;click&quot;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-方法的补充" tabindex="-1"><a class="header-anchor" href="#_3-3-方法的补充"><span>3.3. 方法的补充</span></a></h3><p><code>emitter.once(eventName, listener)</code>：事件监听一次</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>const EventEmitter = require(&#39;events&#39;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const emitter = new EventEmitter();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>emitter.once(&#39;click&#39;, (args) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;监听到事件&quot;, args);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>setTimeout(() =&gt; {</span></span>
<span class="line"><span>  emitter.emit(&#39;click&#39;, &#39;coderwhy&#39;);</span></span>
<span class="line"><span>  emitter.emit(&#39;click&#39;, &#39;coderwhy&#39;);</span></span>
<span class="line"><span>}, 2000);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>emitter.prependListener()</code>：将监听事件添加到最前面</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>emitter.on(&#39;click&#39;, (args) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;a监听到事件&quot;, args);</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// b监听事件会被放到前面</span></span>
<span class="line"><span>emitter.prependListener(&quot;click&quot;, (args) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;b监听到事件&quot;, args);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>emitter.prependOnceListener()</code>：将监听事件添加到最前面，但是只监听一次</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>emitter.prependOnceListener(&quot;click&quot;, (args) =&gt; {</span></span>
<span class="line"><span>  console.log(&quot;c监听到事件&quot;, args);</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>emitter.removeAllListeners([eventName])</code>：移除所有的监听器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 移除emitter上的所有事件监听</span></span>
<span class="line"><span>emitter.removeAllListeners();</span></span>
<span class="line"><span>// 移除emitter上的click事件监听</span></span>
<span class="line"><span>emitter.removeAllListeners(&quot;click&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,89),p=[l];function d(t,c){return e(),n("div",null,p)}const h=s(a,[["render",d],["__file","Node基础四.html.vue"]]),v=JSON.parse('{"path":"/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%9B%9B.html","title":"Node基础四","lang":"zh-CN","frontmatter":{"title":"Node基础四","date":"2022-10-01T12:24:10.000Z","categories":"Node","tags":"Node Node基础系列","pre":"Node基础三","next":"Node基础五","description":"四.常用内置模块 1.1. 认识path模块 path模块用于对路径和文件进行处理，提供了很多好用的方法。 并且我们知道在Mac OS、Linux和window上的路径是不一样的 window上会使用 \\\\或者 \\\\\\\\ 来作为文件路径的分隔符，当然目前也支持 /； 在Mac OS、Linux的Unix操作系统上使用 / 来作为文件路径的分隔符； 那么如果我...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zh/posts/node/base/Node%E5%9F%BA%E7%A1%80%E5%9B%9B.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"Node基础四"}],["meta",{"property":"og:description","content":"四.常用内置模块 1.1. 认识path模块 path模块用于对路径和文件进行处理，提供了很多好用的方法。 并且我们知道在Mac OS、Linux和window上的路径是不一样的 window上会使用 \\\\或者 \\\\\\\\ 来作为文件路径的分隔符，当然目前也支持 /； 在Mac OS、Linux的Unix操作系统上使用 / 来作为文件路径的分隔符； 那么如果我..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-19T08:58:34.000Z"}],["meta",{"property":"article:author","content":"chriswoodcn"}],["meta",{"property":"article:published_time","content":"2022-10-01T12:24:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-19T08:58:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node基础四\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-01T12:24:10.000Z\\",\\"dateModified\\":\\"2024-06-19T08:58:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"chriswoodcn\\"}]}"]]},"headers":[{"level":2,"title":"四.常用内置模块","slug":"四-常用内置模块","link":"#四-常用内置模块","children":[{"level":3,"title":"1.1. 认识path模块","slug":"_1-1-认识path模块","link":"#_1-1-认识path模块","children":[]},{"level":3,"title":"1.2. path常见的API","slug":"_1-2-path常见的api","link":"#_1-2-path常见的api","children":[]}]},{"level":2,"title":"内置模块fs","slug":"内置模块fs","link":"#内置模块fs","children":[{"level":3,"title":"1.1. 认识fs模块","slug":"_1-1-认识fs模块","link":"#_1-1-认识fs模块","children":[]},{"level":3,"title":"1.2. 文件描述符","slug":"_1-2-文件描述符","link":"#_1-2-文件描述符","children":[]},{"level":3,"title":"1.3. 文件的读写","slug":"_1-3-文件的读写","link":"#_1-3-文件的读写","children":[]},{"level":3,"title":"1.4. 文件夹操作","slug":"_1-4-文件夹操作","link":"#_1-4-文件夹操作","children":[]}]},{"level":2,"title":"内置模块events","slug":"内置模块events","link":"#内置模块events","children":[{"level":3,"title":"3.1. 基本使用","slug":"_3-1-基本使用","link":"#_3-1-基本使用","children":[]},{"level":3,"title":"3.2. 常见的属性","slug":"_3-2-常见的属性","link":"#_3-2-常见的属性","children":[]},{"level":3,"title":"3.3. 方法的补充","slug":"_3-3-方法的补充","link":"#_3-3-方法的补充","children":[]}]}],"git":{"createdTime":1718787514000,"updatedTime":1718787514000,"contributors":[{"name":"chriswoodcn","email":"chriswoodcn@aliyun.com","commits":1}]},"readingTime":{"minutes":7.74,"words":2322},"filePathRelative":"zh/posts/node/base/Node基础四.md","localizedDate":"2022年10月1日","excerpt":"<h2>四.常用内置模块</h2>\\n<h3>1.1. 认识path模块</h3>\\n<p>path模块用于对路径和文件进行处理，提供了很多好用的方法。</p>\\n<p>并且我们知道在Mac OS、Linux和window上的路径是不一样的</p>\\n<ul>\\n<li>window上会使用 <code>\\\\</code>或者 <code>\\\\\\\\</code> 来作为文件路径的分隔符，当然目前也支持 <code>/</code>；</li>\\n<li>在Mac OS、Linux的Unix操作系统上使用 <code>/</code> 来作为文件路径的分隔符；</li>\\n</ul>\\n<p>那么如果我们在window上使用 <code>\\\\</code> 来作为分隔符开发了一个应用程序，要部署到Linux上面应该怎么办呢？</p>","autoDesc":true}');export{h as comp,v as data};

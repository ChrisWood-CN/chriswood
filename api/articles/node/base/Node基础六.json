{"title":"Node基础六","uid":"2625758c12baaaa025e1a25440bca02f","slug":"node/base/Node基础六","date":"2022-10-01T04:26:50.000Z","updated":"2023-05-17T07:22:33.080Z","comments":true,"path":"api/articles/node/base/Node基础六.json","keywords":"chriswood blogs sharing","cover":[],"content":"<h2 id=\"六-Buffer的使用\"><a href=\"#六-Buffer的使用\" class=\"headerlink\" title=\"六.Buffer的使用\"></a>六.Buffer的使用</h2><h3 id=\"1-1-数据的二进制\"><a href=\"#1-1-数据的二进制\" class=\"headerlink\" title=\"1.1. 数据的二进制\"></a>1.1. 数据的二进制</h3><p>计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。</p>\n<p>JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。</p>\n<p>不对啊，JavaScript不是也可以处理图片吗？</p>\n<ul>\n<li>事实上在网页端，图片我们一直是交给浏览器来处理的；</li>\n<li>JavaScript或者HTML，只是负责告诉浏览器一个图片的地址；</li>\n<li>浏览器负责获取这个图片，并且最终将这个图片渲染出来；</li>\n</ul>\n<p>但是对于服务器来说是不一样的：</p>\n<ul>\n<li>服务器要处理的本地文件类型相对较多;</li>\n<li>比如某一个保存文本的文件并不是使用 <code>utf-8</code>进行编码的，而是用 <code>GBK</code>，那么我们必须读取到他们的二进制数据，再通过GKB转换成对应的文字；</li>\n<li>比如我们需要读取的是一张图片数据（二进制），再通过某些手段对图片数据进行二次的处理（裁剪、格式转换、旋转、添加滤镜），Node中有一个Sharp的库，就是读取图片或者传入图片的Buffer对其再进行处理；</li>\n<li>比如在Node中通过TCP建立长连接，TCP传输的是字节流，我们需要将数据转成字节再进行传入，并且需要知道传输字节的大小（客服端需要根据大小来判断读取多少内容）；</li>\n</ul>\n<p>我们会发现，对于前端开发来说，通常很少会和二进制打交道，但是对于服务器端为了做很多的功能，我们必须直接去操作其二进制的数据；</p>\n<p>所以Node为了可以方便开发者完成更多功能，提供给了我们一个类Buffer，并且它是全局的。</p>\n<h3 id=\"1-2-Buffer和二进制\"><a href=\"#1-2-Buffer和二进制\" class=\"headerlink\" title=\"1.2. Buffer和二进制\"></a>1.2. Buffer和二进制</h3><p>我们前面说过，Buffer中存储的是二进制数据，那么到底是如何存储呢？</p>\n<ul>\n<li>我们可以将Buffer看成是一个存储二进制的数组；</li>\n<li>这个数组中的每一项，可以保存8位二进制：<code>00000000</code></li>\n</ul>\n<p>为什么是8位呢？</p>\n<ul>\n<li>在计算机中，很少的情况我们会直接操作一位二进制，因为一位二进制存储的数据是非常有限的；</li>\n<li>所以通常会将8位合在一起作为一个单元，这个单元称之为一个字节（byte）；</li>\n<li>也就是说 <code>1byte = 8bit</code>，<code>1kb=1024byte</code>，<code>1M=1024kb</code>;</li>\n<li>比如很多编程语言中的int类型是4个字节，long类型是8个字节；</li>\n<li>比如TCP传输的是字节流，在写入和读取时都需要说明字节的个数；</li>\n<li>比如RGB的值分别都是255，所以本质上在计算机中都是用一个字节存储的；</li>\n</ul>\n<p>也就是说，Buffer相当于是一个字节的数组，数组中的每一项对于一个字节的大小：</p>\n<p>如果我们希望将一个字符串放入到Buffer中，是怎么样的过程呢？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const buffer01 &#x3D; new Buffer(&quot;why&quot;);\n\nconsole.log(buffer01);</code></pre>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bevAGibs37XDGEb7HHVPQj1As5ok5tu2TJr3aB84cpVk5XkTjPSnAfbg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">字符串存储buffer的过程</p>\n<p>当然目前已经不希望我们这样来做了：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bnrXt2YmvsbBaRPhuky6dLMicrBQj06zhPRz6icCJue7SRBjIhpBpClIg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">VSCode的警告</p>\n<p>那么我们可以通过另外一个创建方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const buffer2 &#x3D; Buffer.from(&quot;why&quot;);\nconsole.log(buffer2);</code></pre>\n\n<p>如果是中文呢？</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const buffer3 &#x3D; Buffer.from(&quot;王红元&quot;);\nconsole.log(buffer3);\n&#x2F;&#x2F; &lt;Buffer e7 8e 8b e7 ba a2 e5 85 83&gt;\nconst str &#x3D; buffer3.toString();\nconsole.log(str);\n&#x2F;&#x2F; 王红元</code></pre>\n\n<p>如果编码和解码不同：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const buffer3 &#x3D; Buffer.from(&quot;王红元&quot;, &#39;utf16le&#39;);\nconsole.log(buffer3);\n\nconst str &#x3D; buffer3.toString(&#39;utf8&#39;);\nconsole.log(str); &#x2F;&#x2F; �s�~CQ</code></pre>\n\n<h2 id=\"Buffer其他用法\"><a href=\"#Buffer其他用法\" class=\"headerlink\" title=\"Buffer其他用法\"></a>Buffer其他用法</h2><h3 id=\"2-1-Buffer的其他创建\"><a href=\"#2-1-Buffer的其他创建\" class=\"headerlink\" title=\"2.1. Buffer的其他创建\"></a>2.1. Buffer的其他创建</h3><p>Buffer的创建方式有很多：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5bEGVONgOsCZ6utEwUAuoHjUib2nF5MhBtMloTJovgt02CIstHgpX3m1Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">buffer的创建</p>\n<p>来看一下<code>Buffer.alloc</code>:</p>\n<ul>\n<li>我们会发现创建了一个8位长度的Buffer，里面所有的数据默认为00；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const buffer01 &#x3D; Buffer.alloc(8);\n\nconsole.log(buffer01); &#x2F;&#x2F; &lt;Buffer 00 00 00 00 00 00 00 00&gt;</code></pre>\n\n<p>我们也可以对其进行操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">buffer01[0] &#x3D; &#39;w&#39;.charCodeAt();\nbuffer01[1] &#x3D; 100;\nbuffer01[2] &#x3D; 0x66;\nconsole.log(buffer01);</code></pre>\n\n<p>也可以使用相同的方式来获取：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(buffer01[0]);\nconsole.log(buffer01[0].toString(16));</code></pre>\n\n<h3 id=\"2-2-Buffer和文件读取\"><a href=\"#2-2-Buffer和文件读取\" class=\"headerlink\" title=\"2.2. Buffer和文件读取\"></a>2.2. Buffer和文件读取</h3><p>文本文件的读取：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const fs &#x3D; require(&#39;fs&#39;);\n\nfs.readFile(&#39;.&#x2F;test.txt&#39;, (err, data) &#x3D;&gt; &#123;\n  console.log(data); &#x2F;&#x2F; &lt;Buffer 48 65 6c 6c 6f 20 57 6f 72 6c 64&gt;\n  console.log(data.toString()); &#x2F;&#x2F; Hello World\n&#125;)</code></pre>\n\n<p>图片文件的读取：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fs.readFile(&#39;.&#x2F;zznh.jpg&#39;, (err, data) &#x3D;&gt; &#123;\n  console.log(data); &#x2F;&#x2F; &lt;Buffer ff d8 ff e0 ... 40418 more bytes&gt;\n&#125;);</code></pre>\n\n<p>图片文件的读取和转换：</p>\n<ul>\n<li>将读取的某一张图片，转换成一张200x200的图片；</li>\n<li>这里我们可以借助于 <code>sharp</code> 库来完成；</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const sharp &#x3D; require(&#39;sharp&#39;);\nconst fs &#x3D; require(&#39;fs&#39;);\n\nsharp(&#39;.&#x2F;test.png&#39;)\n  .resize(1000, 1000)\n  .toBuffer()\n  .then(data &#x3D;&gt; &#123;\n    fs.writeFileSync(&#39;.&#x2F;test_copy.png&#39;, data);\n  &#125;)</code></pre>\n\n<h3 id=\"2-3-buffer使用\"><a href=\"#2-3-buffer使用\" class=\"headerlink\" title=\"2.3. buffer使用\"></a>2.3. buffer使用</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F;buffer与字符串转换\nBuffer.from(string[, encoding])\nbuf.toString([encoding[, start[, end]]])\n\n&#x2F;&#x2F;复制buffer\nBuffer.from(buf)\n\n&#x2F;&#x2F;ArrayBuffer转换到buffer arrayBuffer类型为TypedArray.buffer属性\nBuffer.from(arrayBuffer[, byteOffset[, length]])\n\n&#x2F;&#x2F;buffer 转 Uint8Array\nvar array &#x3D; new Uint8Array(buffer);\n&#x2F;&#x2F;Uint8Array 转 ArrayBuffer\nvar arraybuffer &#x3D; array.buffer;\n&#x2F;&#x2F;ArrayBuffer 转 Buffer\nvar bufferCopy &#x3D; Buffer.from(arraybuffer);\n&#x2F;&#x2F;ArrayBuffer 转 DataView \nvar view &#x3D; new DataView(arraybuffer)\n&#x2F;&#x2F;DataView 转 ArrrayBuffer\nvar arraybuffer2 &#x3D; view.buffer;</code></pre>\n\n<h3 id=\"2-4-Buffer-和-TypeArray，ArrayBuffer-Unit8Array\"><a href=\"#2-4-Buffer-和-TypeArray，ArrayBuffer-Unit8Array\" class=\"headerlink\" title=\"2.4. Buffer 和 TypeArray，ArrayBuffer, Unit8Array\"></a>2.4. Buffer 和 TypeArray，ArrayBuffer, Unit8Array</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">TypedArray\n概念: TypedArray ES6中新出的一个接口, 不能直接被实例化, Uint8Array 就是实现 TypedArray 接口的一个子类\n子类有:\nInt8Array: 每个元素是8个二进制位(1个字节)的有符号整数\nUint8Array： 每个元素是8个二进制位(1个字节)的无符号整数\nInt16Array： 每个元素是16个二进制位(2个字节)的有符号整数\nUint16Array：每个元素是16个二进制位(2个字节)的无符号整数\nInt32Array： 每个元素是32个二进制位(4个字节)的有符号整数\nUint32Array： 每个元素是32个二进制位(4个字节)的无符号整数\n\n\nArrayBuffer\n概念: TypedArray 的作用是操作二进制数据, 其内部还有一个buffer属性, 这个buffer就是 ArrayBuffer 实例. ArrayBuffer 就存储了要操作的二进制数据,TypedArray 是一个操作二进制数据的接口, 内部的 ArrayBuffer 存储了要操作的二进制数据.\n\nUint8Array\n概念: 数组中的每一个元素都是 8个二进制位(1个字节)的无符号整数.无符号的含义是, 该二进制的首位不表示符号位. 而对于有符号的二进制位, \n\nBuffer\n概念: Node中才有, 继承自 Unit8array, 拥有更多强大的二进制数据操作.</code></pre>\n\n<h2 id=\"Buffer的内存分配\"><a href=\"#Buffer的内存分配\" class=\"headerlink\" title=\"Buffer的内存分配\"></a>Buffer的内存分配</h2><p>事实上我们创建Buffer时，并不会频繁的向操作系统申请内存，它会默认先申请一个8 * 1024个字节大小的内存，也就是8kb</p>\n<ul>\n<li>node&#x2F;lib&#x2F;buffer.js：135行</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Buffer.poolSize &#x3D; 8 * 1024;\nlet poolSize, poolOffset, allocPool;\n\nconst encodingsMap &#x3D; ObjectCreate(null);\nfor (let i &#x3D; 0; i &lt; encodings.length; ++i)\n  encodingsMap[encodings[i]] &#x3D; i;\n\nfunction createPool() &#123;\n  poolSize &#x3D; Buffer.poolSize;\n  allocPool &#x3D; createUnsafeBuffer(poolSize).buffer;\n  markAsUntransferable(allocPool);\n  poolOffset &#x3D; 0;\n&#125;\ncreatePool();</code></pre>\n\n<p>假如我们调用Buffer.from申请Buffer：</p>\n<ul>\n<li>这里我们以从字符串创建为例</li>\n<li>node&#x2F;lib&#x2F;buffer.js：290行</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Buffer.from &#x3D; function from(value, encodingOrOffset, length) &#123;\n  if (typeof value &#x3D;&#x3D;&#x3D; &#39;string&#39;)\n    return fromString(value, encodingOrOffset);\n \n &#x2F;&#x2F; 如果是对象，另外一种处理情况\n  &#x2F;&#x2F; ...\n&#125;;</code></pre>\n\n<p>我们查看fromString的调用：</p>\n<ul>\n<li>node&#x2F;lib&#x2F;buffer.js：428行</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function fromString(string, encoding) &#123;\n  let ops;\n  if (typeof encoding !&#x3D;&#x3D; &#39;string&#39; || encoding.length &#x3D;&#x3D;&#x3D; 0) &#123;\n    if (string.length &#x3D;&#x3D;&#x3D; 0)\n      return new FastBuffer();\n    ops &#x3D; encodingOps.utf8;\n    encoding &#x3D; undefined;\n  &#125; else &#123;\n    ops &#x3D; getEncodingOps(encoding);\n    if (ops &#x3D;&#x3D;&#x3D; undefined)\n      throw new ERR_UNKNOWN_ENCODING(encoding);\n    if (string.length &#x3D;&#x3D;&#x3D; 0)\n      return new FastBuffer();\n  &#125;\n  return fromStringFast(string, ops);\n&#125;</code></pre>\n\n<p>接着我们查看fromStringFast：</p>\n<ul>\n<li>这里做的事情是判断剩余的长度是否还足够填充这个字符串；</li>\n<li>如果不足够，那么就要通过 <code>createPool</code> 创建新的空间；</li>\n<li>如果够就直接使用，但是之后要进行 <code>poolOffset</code>的偏移变化；</li>\n<li>node&#x2F;lib&#x2F;buffer.js：428行</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function fromStringFast(string, ops) &#123;\n  const length &#x3D; ops.byteLength(string);\n\n  if (length &gt;&#x3D; (Buffer.poolSize &gt;&gt;&gt; 1))\n    return createFromString(string, ops.encodingVal);\n\n  if (length &gt; (poolSize - poolOffset))\n    createPool();\n  let b &#x3D; new FastBuffer(allocPool, poolOffset, length);\n  const actual &#x3D; ops.write(b, string, 0, length);\n  if (actual !&#x3D;&#x3D; length) &#123;\n    &#x2F;&#x2F; byteLength() may overestimate. That&#39;s a rare case, though.\n    b &#x3D; new FastBuffer(allocPool, poolOffset, actual);\n  &#125;\n  poolOffset +&#x3D; actual;\n  alignPool();\n  return b;\n&#125;</code></pre>\n\n<h2 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h2><h3 id=\"4-1-认识Stream\"><a href=\"#4-1-认识Stream\" class=\"headerlink\" title=\"4.1. 认识Stream\"></a>4.1. 认识Stream</h3><p>什么是流呢？</p>\n<ul>\n<li>我们的第一反应应该是流水，源源不断的流动；</li>\n<li>程序中的流也是类似的含义，我们可以想象当我们从一个文件中读取数据时，文件的二进制（字节）数据会源源不断的被读取到我们程序中；</li>\n<li>而这个一连串的字节，就是我们程序中的流；</li>\n</ul>\n<p>所以，我们可以这样理解流：</p>\n<ul>\n<li>是连续字节的一种表现形式和抽象概念；</li>\n<li>流应该是可读的，也是可写的；</li>\n</ul>\n<p>在之前学习文件的读写时，我们可以直接通过 <code>readFile</code>或者 <code>writeFile</code>方式读写文件，为什么还需要流呢？</p>\n<ul>\n<li>直接读写文件的方式，虽然简单，但是无法控制一些细节的操作；</li>\n<li>比如从什么位置开始读、读到什么位置、一次性读取多少个字节；</li>\n<li>读到某个位置后，暂停读取，某个时刻恢复读取等等；</li>\n<li>或者这个文件非常大，比如一个视频文件，一次性全部读取并不合适；</li>\n</ul>\n<p>事实上Node中很多对象是基于流实现的：</p>\n<ul>\n<li>http模块的Request和Response对象；</li>\n<li>process.stdout对象；</li>\n</ul>\n<p>官方：另外所有的流都是EventEmitter的实例：</p>\n<p>我们可以看一下Node源码中有这样的操作：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusNM013pxvDCic4ued4GQC5b13taMLiadNO0YXJwqHyURQRtaGIdgXRc8arnuncuqfAXrkuOyOWPghg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>Stream和EventEmitter关系</p>\n<p>流（Stream）的分类：</p>\n<ul>\n<li><code>Writable</code>：可以向其写入数据的流（例如 <code>fs.createWriteStream()</code>）。</li>\n<li><code>Readable</code>：可以从中读取数据的流（例如 <code>fs.createReadStream()</code>）。</li>\n<li><code>Duplex</code>：同时为<code>Readable</code>和的流<code>Writable</code>（例如 <code>net.Socket</code>）。</li>\n<li><code>Transform</code>：<code>Duplex</code>可以在写入和读取数据时修改或转换数据的流（例如<code>zlib.createDeflate()</code>）。</li>\n</ul>\n<p>这里我们通过fs的操作，讲解一下Writable、Readable，另外两个大家可以自行学习一下。</p>\n<h3 id=\"4-2-Readable\"><a href=\"#4-2-Readable\" class=\"headerlink\" title=\"4.2. Readable\"></a>4.2. Readable</h3><p>之前我们读取一个文件的信息：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fs.readFile(&#39;.&#x2F;foo.txt&#39;, (err, data) &#x3D;&gt; &#123;\n  console.log(data);\n&#125;)</code></pre>\n\n<p>这种方式是一次性将一个文件中所有的内容都读取到程序（内存）中，但是这种读取方式就会出现我们之前提到的很多问题：</p>\n<ul>\n<li>文件过大、读取的位置、结束的位置、一次读取的大小；</li>\n</ul>\n<p>这个时候，我们可以使用 <code>createReadStream</code>，我们来看几个参数，更多参数可以参考官网：</p>\n<ul>\n<li>start：文件读取开始的位置；</li>\n<li>end：文件读取结束的位置；</li>\n<li>highWaterMark：一次性读取字节的长度，默认是64kb；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const read &#x3D; fs.createReadStream(&quot;.&#x2F;foo.txt&quot;, &#123;\n  start: 3,\n  end: 8,\n  highWaterMark: 4\n&#125;);</code></pre>\n\n<p>我们如何获取到数据呢？</p>\n<ul>\n<li>可以通过监听data事件，获取读取到的数据；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">read.on(&quot;data&quot;, (data) &#x3D;&gt; &#123;\n  console.log(data);\n&#125;);</code></pre>\n\n<p>我们也可以监听其他的事件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">read.on(&#39;open&#39;, (fd) &#x3D;&gt; &#123;\n  console.log(&quot;文件被打开&quot;);\n&#125;)\n\nread.on(&#39;end&#39;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件读取结束&quot;);\n&#125;)\n\nread.on(&#39;close&#39;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件被关闭&quot;);\n&#125;)</code></pre>\n\n<p>甚至我们可以在某一个时刻暂停和恢复读取：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">read.on(&quot;data&quot;, (data) &#x3D;&gt; &#123;\n  console.log(data);\n\n  read.pause();\n\n  setTimeout(() &#x3D;&gt; &#123;\n    read.resume();\n  &#125;, 2000);\n&#125;);</code></pre>\n\n<h3 id=\"4-3-Writable\"><a href=\"#4-3-Writable\" class=\"headerlink\" title=\"4.3. Writable\"></a>4.3. Writable</h3><p>之前我们写入一个文件的方式是这样的：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">fs.writeFile(&#39;.&#x2F;foo.txt&#39;, &quot;内容&quot;, (err) &#x3D;&gt; &#123;\n  \n&#125;);</code></pre>\n\n<p>这种方式相当于一次性将所有的内容写入到文件中，但是这种方式也有很多问题：</p>\n<ul>\n<li>比如我们希望一点点写入内容，精确每次写入的位置等；</li>\n</ul>\n<p>这个时候，我们可以使用 <code>createWriteStream</code>，我们来看几个参数，更多参数可以参考官网：</p>\n<ul>\n<li>flags：默认是<code>w</code>，如果我们希望是追加写入，可以使用 <code>a</code>或者 <code>a+</code>；</li>\n<li>start：写入的位置；</li>\n</ul>\n<p>我们进行一次简单的写入</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const writer &#x3D; fs.createWriteStream(&quot;.&#x2F;foo.txt&quot;, &#123;\n  flags: &quot;a+&quot;,\n  start: 8\n&#125;);\n\nwriter.write(&quot;你好啊&quot;, err &#x3D;&gt; &#123;\n  console.log(&quot;写入成功&quot;);\n&#125;);</code></pre>\n\n<p>如果我们希望监听一些事件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">writer.on(&quot;open&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件打开&quot;);\n&#125;)\n\nwriter.on(&quot;finish&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件写入结束&quot;);\n&#125;)\n\nwriter.on(&quot;close&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件关闭&quot;);\n&#125;)</code></pre>\n\n<p>我们会发现，我们并不能监听到 <code>close</code> 事件：</p>\n<ul>\n<li>这是因为写入流在打开后是不会自动关闭的；</li>\n<li>我们必须手动关闭，来告诉Node已经写入结束了；</li>\n<li>并且会发出一个 <code>finish</code> 事件的；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">writer.close();\n\nwriter.on(&quot;finish&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件写入结束&quot;);\n&#125;)\n\nwriter.on(&quot;close&quot;, () &#x3D;&gt; &#123;\n  console.log(&quot;文件关闭&quot;);\n&#125;)</code></pre>\n\n<p>另外一个非常常用的方法是 <code>end</code>：</p>\n<ul>\n<li><code>end</code>方法相当于做了两步操作：<code>write</code>传入的数据和调用<code>close</code>方法；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">writer.end(&quot;Hello World&quot;);</code></pre>\n\n<h3 id=\"4-4-pipe方法\"><a href=\"#4-4-pipe方法\" class=\"headerlink\" title=\"4.4. pipe方法\"></a>4.4. pipe方法</h3><p>正常情况下，我们可以将读取到的 <code>输入流</code>，手动的放到 <code>输出流</code>中进行写入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const fs &#x3D; require(&#39;fs&#39;);\nconst &#123; read &#125; &#x3D; require(&#39;fs&#x2F;promises&#39;);\n\nconst reader &#x3D; fs.createReadStream(&#39;.&#x2F;foo.txt&#39;);\nconst writer &#x3D; fs.createWriteStream(&#39;.&#x2F;bar.txt&#39;);\n\nreader.on(&quot;data&quot;, (data) &#x3D;&gt; &#123;\n  console.log(data);\n  writer.write(data, (err) &#x3D;&gt; &#123;\n    console.log(err);\n  &#125;);\n&#125;);</code></pre>\n\n<p>我们也可以通过pipe来完成这样的操作：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">reader.pipe(writer);\n\nwriter.on(&#39;close&#39;, () &#x3D;&gt; &#123;\n  console.log(&quot;输出流关闭&quot;);\n&#125;)</code></pre>\n","text":"六.Buffer的使用1.1. 数据的二进制计算机中所有的内容：文字、数字、图片、音频、视频最终都会使用二进制来表示。 JavaScript可以直接去处理非常直观的数据：比如字符串，我们通常展示给用户的也是这些内容。 不对啊，JavaScript不是也可以处理图片吗？ 事实上在网...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%AD-Buffer%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">六.Buffer的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">1.1. 数据的二进制</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-Buffer%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">1.2. Buffer和二进制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Buffer%E5%85%B6%E4%BB%96%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">Buffer其他用法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-Buffer%E7%9A%84%E5%85%B6%E4%BB%96%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">2.1. Buffer的其他创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Buffer%E5%92%8C%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">2.2. Buffer和文件读取</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-buffer%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">2.3. buffer使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-Buffer-%E5%92%8C-TypeArray%EF%BC%8CArrayBuffer-Unit8Array\"><span class=\"toc-text\">2.4. Buffer 和 TypeArray，ArrayBuffer, Unit8Array</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Buffer%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D\"><span class=\"toc-text\">Buffer的内存分配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Stream\"><span class=\"toc-text\">Stream</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E8%AE%A4%E8%AF%86Stream\"><span class=\"toc-text\">4.1. 认识Stream</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Readable\"><span class=\"toc-text\">4.2. Readable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-Writable\"><span class=\"toc-text\">4.3. Writable</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-4-pipe%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">4.4. pipe方法</span></a></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node基础七","uid":"9cc987ed6425e4445f09c1cfe9b13abf","slug":"node/base/Node基础七","date":"2022-10-01T04:27:50.000Z","updated":"2023-05-17T07:22:33.076Z","comments":true,"path":"api/articles/node/base/Node基础七.json","keywords":"chriswood blogs sharing","cover":[],"text":"七.脚手架开发目前前端工程化开发过程中，我们会使用各种各样的脚手架，vue-cli、create-react-app，当然也包括webpack、gulp、rollup、vite等工具。 这些工具是怎么开发出来的呢？当我们执行一个命令时，它们做了什么事情？是怎么样完成的一系列操作？...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Node基础五","uid":"f31c41ff35acbf9aa56d10f7617b9f93","slug":"node/base/Node基础五","date":"2022-10-01T04:25:11.000Z","updated":"2023-05-17T07:22:33.080Z","comments":true,"path":"api/articles/node/base/Node基础五.json","keywords":"chriswood blogs sharing","cover":[],"text":"五.npm你不知道的细节1.1. 认识npm我们已经学习了在JavaScript中可以通过模块化的方式将代码划分成一个个小的结构： 在以后的开发中我们就可以通过模块化的方式来封装自己的代码，并且封装成一个工具； 这个工具我们可以让同事通过导入的方式来使用，甚至你可以分享给世界各地...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
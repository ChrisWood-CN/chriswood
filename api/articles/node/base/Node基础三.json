{"title":"Node基础三","uid":"4d3281e0b26c044e36154a269947cf99","slug":"node/base/Node基础三","date":"2022-10-01T04:23:22.000Z","updated":"2022-10-16T03:42:07.073Z","comments":true,"path":"api/articles/node/base/Node基础三.json","keywords":"chriswood blogs sharing","cover":[],"content":"<h2 id=\"三-掌握前端模块化\"><a href=\"#三-掌握前端模块化\" class=\"headerlink\" title=\"三 . 掌握前端模块化\"></a>三 . 掌握前端模块化</h2><h3 id=\"1-1-JavaScript设计缺陷\"><a href=\"#1-1-JavaScript设计缺陷\" class=\"headerlink\" title=\"1.1. JavaScript设计缺陷\"></a>1.1. JavaScript设计缺陷</h3><p>那么，到底什么是模块化开发呢？</p>\n<ul>\n<li>事实上模块化开发最终的目的是将程序划分成一个个小的结构；</li>\n<li>这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构；</li>\n<li>这个结构可以将自己希望暴露的变量、函数、对象等导出给其结构使用；</li>\n<li>也可以通过某种方式，导入另外结构中的变量、函数、对象等；</li>\n</ul>\n<p><strong>上面说提到的结构，就是模块；</strong></p>\n<p><strong>按照这种结构划分开发程序的过程，就是模块化开发的过程；</strong></p>\n<p>无论你多么喜欢JavaScript，以及它现在发展的有多好，我们都需要承认在<em>Brendan Eich</em>用了10天写出JavaScript的时候，它都有很多的缺陷：</p>\n<ul>\n<li>比如var定义的变量作用域问题；</li>\n<li>比如JavaScript的面向对象并不能像常规面向对象语言一样使用class；</li>\n<li>比如JavaScript没有模块化的问题；</li>\n</ul>\n<p><em>Brendan Eich</em>本人也多次承认过JavaScript设计之初的缺陷，但是随着JavaScript的发展以及标准化，存在的缺陷问题基本都得到了完善。</p>\n<ul>\n<li>JavaScript目前已经得到了快速的发展，无论是web、移动端、小程序端、服务器端、桌面应用都被广泛的使用；</li>\n</ul>\n<p>在网页开发的早期，<em>Brendan Eich</em>开发JavaScript仅仅作为一种脚本语言，做一些简单的表单验证或动画实现等，那个时候代码还是很少的：</p>\n<ul>\n<li>这个时候我们只需要讲JavaScript代码写到<script>标签中即可；</li>\n<li>并没有必要放到多个文件中来编写；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;button id&#x3D;&quot;btn&quot;&gt;按钮&lt;&#x2F;button&gt;\n\n&lt;script&gt;\n  document.getElementById(&quot;btn&quot;).onclick &#x3D; function() &#123;\n    console.log(&quot;按钮被点击了&quot;);\n  &#125;\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>但是随着前端和JavaScript的快速发展，JavaScript代码变得越来越复杂了：</p>\n<ul>\n<li>ajax的出现，前后端开发分离，意味着后端返回数据后，我们需要通过JavaScript进行前端页面的渲染；</li>\n<li>SPA的出现，前端页面变得更加复杂：包括前端路由、状态管理等等一系列复杂的需求需要通过JavaScript来实现；</li>\n<li>包括Node的实现，JavaScript编写复杂的后端程序，没有模块化是致命的硬伤；</li>\n</ul>\n<p>所以，模块化已经是JavaScript一个非常迫切的需求：</p>\n<ul>\n<li>但是JavaScript本身，直到ES6（2015）才推出了自己的模块化方案；</li>\n<li>在此之前，为了让JavaScript支持模块化，涌现出了很多不同的模块化规范：AMD、CMD、CommonJS等；</li>\n</ul>\n<p>在这个章节，我们将详细学习JavaScript的模块化，尤其是CommonJS和ES6的模块化。</p>\n<h3 id=\"1-2-没有模块化的问题\"><a href=\"#1-2-没有模块化的问题\" class=\"headerlink\" title=\"1.2. 没有模块化的问题\"></a>1.2. 没有模块化的问题</h3><p>我们先来简单体会一下没有模块化代码的问题。</p>\n<p>我们知道，对于一个大型的前端项目，通常是多人开发的（即使一个人开发，也会将代码划分到多个文件夹中）：</p>\n<ul>\n<li>我们假设有两个人：小明和小丽同时在开发一个项目，并且会将自己的JavaScript代码放在一个单独的js文件中。</li>\n</ul>\n<p>小明开发了aaa.js文件，代码如下（当然真实代码会复杂的多）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var flag &#x3D; true;\n\nif (flag) &#123;\n  console.log(&quot;aaa的flag为true&quot;)\n&#125;</code></pre>\n\n<p>小丽开发了bbb.js文件，代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var flag &#x3D; false;\n\nif (!flag) &#123;\n  console.log(&quot;bbb使用了flag为false&quot;);\n&#125;</code></pre>\n\n<p>很明显出现了一个问题：</p>\n<ul>\n<li>大家都喜欢使用flag来存储一个boolean类型的值；</li>\n<li>但是一个人赋值了true，一个人赋值了false；</li>\n<li>如果之后都不再使用，那么也没有关系；</li>\n</ul>\n<p>但是，小明又开发了ccc.js文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (flag) &#123;\n  console.log(&quot;使用了aaa的flag&quot;);\n&#125;</code></pre>\n\n<p>问题来了：小明发现ccc中的flag值不对</p>\n<ul>\n<li>对于聪明的你，当然一眼就看出来，是小丽将flag赋值为了false；</li>\n<li>但是如果每个文件都有上千甚至更多的代码，而且有上百个文件，你可以一眼看出来flag在哪个地方被修改了吗？</li>\n</ul>\n<p>备注：引用路径如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script src&#x3D;&quot;.&#x2F;aaa.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;.&#x2F;bbb.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;.&#x2F;ccc.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p>所以，没有模块化对于一个大型项目来说是灾难性的。</p>\n<p><strong>当然，我们有办法可以解决上面的问题：立即函数调用表达式（IIFE）</strong></p>\n<ul>\n<li><strong>IIFE</strong> (Immediately Invoked Function Expression)</li>\n</ul>\n<p>aaa.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const moduleA &#x3D; (function () &#123;\n  var flag &#x3D; true;\n\n  if (flag) &#123;\n    console.log(&quot;aaa的flag为true&quot;)\n  &#125;\n\n  return &#123;\n    flag: flag\n  &#125;\n&#125;)();</code></pre>\n\n<p>bbb.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const moduleB &#x3D; (function () &#123;\n  var flag &#x3D; false;\n\n  if (!flag) &#123;\n    console.log(&quot;bbb使用了flag为false&quot;);\n  &#125;\n&#125;)();</code></pre>\n\n<p>ccc.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const moduleC &#x3D; (function() &#123;\n  const flag &#x3D; moduleA.flag;\n  if (flag) &#123;\n    console.log(&quot;使用了aaa的flag&quot;);\n  &#125;\n&#125;)();</code></pre>\n\n<p>命名冲突的问题，有没有解决呢？解决了。</p>\n<p>但是，我们其实带来了新的问题：</p>\n<ul>\n<li>第一，我必须记得每一个模块中返回对象的命名，才能在其他模块使用过程中正确的使用；</li>\n<li>第二，代码写起来混乱不堪，每个文件中的代码都需要包裹在一个匿名函数中来编写；</li>\n<li>第三，在没有合适的规范情况下，每个人、每个公司都可能会任意命名、甚至出现模块名称相同的情况；</li>\n</ul>\n<p><strong>所以，我们会发现，虽然实现了模块化，但是我们的实现过于简单，并且是没有规范的。</strong></p>\n<ul>\n<li>我们需要制定一定的规范来约束每个人都按照这个规范去编写模块化的代码；</li>\n<li>这个规范中应该包括核心功能：模块本身可以导出暴露的属性，模块又可以导入自己需要的属性；</li>\n</ul>\n<p>JavaScript社区为了解决上面的问题，涌现出一系列好用的规范，接下来我们就学习具有代表性的一些规范。</p>\n<h2 id=\"CommonJS规范\"><a href=\"#CommonJS规范\" class=\"headerlink\" title=\"CommonJS规范\"></a>CommonJS规范</h2><h3 id=\"2-1-CommonJS和Node\"><a href=\"#2-1-CommonJS和Node\" class=\"headerlink\" title=\"2.1. CommonJS和Node\"></a>2.1. CommonJS和Node</h3><p>我们需要知道CommonJS是一个规范，最初提出来是在浏览器意外的地方使用，并且当时被命名为<strong>ServerJS</strong>，后来为了体现它的广泛性，修改为<strong>CommonJS</strong>，平时我们也会简称为CJS。</p>\n<ul>\n<li>Node是CommonJS在服务器端一个具有代表性的实现；</li>\n<li>Browserify是CommonJS在浏览器中的一种实现；</li>\n<li>webpack打包工具具备对CommonJS的支持和转换（后面我会讲到）；</li>\n</ul>\n<p>所以，Node中对CommonJS进行了支持和实现，让我们在开发node的过程中可以方便的进行模块化开发：</p>\n<ul>\n<li>在Node中每一个js文件都是一个单独的模块；</li>\n<li>这个模块中包括CommonJS规范的核心变量：exports、module.exports、require；</li>\n<li>我们可以使用这些变量来方便的进行模块化开发；</li>\n</ul>\n<p>前面我们提到过模块化的核心是导出和导入，Node中对其进行了实现：</p>\n<ul>\n<li>exports和module.exports可以负责对模块中的内容进行导出；</li>\n<li>require函数可以帮助我们导入其他模块（自定义模块、系统模块、第三方库模块）中的内容；</li>\n</ul>\n<h3 id=\"2-2-Node模块化开发\"><a href=\"#2-2-Node模块化开发\" class=\"headerlink\" title=\"2.2. Node模块化开发\"></a>2.2. Node模块化开发</h3><p>我们来看一下两个文件：</p>\n<p>bar.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const name &#x3D; &#39;coderwhy&#39;;\nconst age &#x3D; 18;\n\nfunction sayHello(name) &#123;\n  console.log(&quot;Hello &quot; + name);\n&#125;</code></pre>\n\n<p>main.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(name);\nconsole.log(age);\n\nsayHello(&#39;kobe&#39;);</code></pre>\n\n<p>上面的代码会报错：</p>\n<ul>\n<li>在node中每一个文件都是一个独立的模块，有自己的作用域；</li>\n<li>那么，就意味着别的模块main中不能随便访问另外一个模块bar中的内容；</li>\n<li>bar需要导出自己想要暴露的变量、函数、对象等等；</li>\n<li>main从bar中导入自己想要使用的变量、函数、对象等等；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kiboje8hwm1puPMdA3bP3sUYp9LA7m7LpVibnl8ACF7EyTwLgJEtoiadNV6tmQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">导出和导入</p>\n<h4 id=\"2-2-1-exports导出\"><a href=\"#2-2-1-exports导出\" class=\"headerlink\" title=\"2.2.1. exports导出\"></a>2.2.1. exports导出</h4><p><strong>强调：exports是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出</strong></p>\n<p>bar.js中导出内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exports.name &#x3D; name;\nexports.age &#x3D; age;\nexports.sayHello &#x3D; sayHello;</code></pre>\n\n<p>main.js中导入内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const bar &#x3D; require(&#39;.&#x2F;bar&#39;);</code></pre>\n\n<p>上面这行代码意味着什么呢？</p>\n<ul>\n<li>意味着main中的bar变量等于exports对象；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">main中的bar &#x3D; bar中的exports</code></pre>\n\n<p>所以，我可以编写下面的代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const bar &#x3D; require(&#39;.&#x2F;bar&#39;);\n\nconst name &#x3D; bar.name;\nconst age &#x3D; bar.age;\nconst sayHello &#x3D; bar.sayHello;\n\nconsole.log(name);\nconsole.log(age);\n\nsayHello(&#39;kobe&#39;);</code></pre>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojewT2wSgxhOcSHdyzZWicejEY7dYHuicgm9AzH1jtLibH0U9Loj7ZTVFbKw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>模块之间的引用关系</p>\n<p>为了进一步论证，bar和exports是同一个对象：</p>\n<ul>\n<li>所以，bar对象是exports对象的浅拷贝；</li>\n<li>浅拷贝的本质就是一种引用的赋值而已；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeicBuAibNeFXU9qkIauXYDOMsE7QCUxZesYWFouOBC7SQatrZpb4lUoEA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">定时器修改对象</p>\n<h4 id=\"2-2-2-module-exports\"><a href=\"#2-2-2-module-exports\" class=\"headerlink\" title=\"2.2.2. module.exports\"></a>2.2.2. module.exports</h4><p>但是Node中我们经常导出东西的时候，又是通过module.exports导出的：</p>\n<ul>\n<li>module.exports和exports有什么关系或者区别呢？</li>\n</ul>\n<p>我们追根溯源，通过维基百科中对CommonJS规范的解析：</p>\n<ul>\n<li>CommonJS中是没有module.exports的概念的；</li>\n<li>但是为了实现模块的导出，Node中使用的是Module的类，每一个模块都是Module的一个实例，也就是module；</li>\n<li><strong>所以在Node中真正用于导出的其实根本不是exports，而是module.exports；</strong></li>\n<li>因为module才是导出的真正实现者；</li>\n</ul>\n<p>但是，为什么exports也可以导出呢？</p>\n<ul>\n<li>这是因为module对象的exports属性是exports对象的一个引用；</li>\n<li>也就是说 <code>module.exports = exports = main中的bar</code>；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeib966pL7iazrlQAJFO14AUekibxu8JF2MHxUrVoX0csXo1nJMjZeWOjmw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20201011163653515</p>\n<p>注意：真正导出的模块内容的核心其实是module.exports，只是为了实现CommonJS的规范，刚好module.exports对exports对象有一个引用而已；</p>\n<p>那么，如果我的代码这样修改了：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeE1wEXS3pNL4evJyQ0ia6lF5nx0aH7Lc6CQichwyWtoOKUlcBqIM8qOHQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20201011164006266</p>\n<p>你能猜到内存中会有怎么样的表现吗？</p>\n<ul>\n<li>结论：和exports对象没有任何关系了，exports你随便玩自己的吧；</li>\n<li>module.exports我现在导出一个自己的对象，不带着你玩了；</li>\n<li>新的对象取代了exports对象的导出，那么就意味着require导入的对象是新的对象；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeQeOBuV3g4Gv6td12x74GguP2uS3Ze7FeHtWWLN3FM5o4j18yB3Bkiaw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20201011164223607</p>\n<h4 id=\"2-2-3-require细节\"><a href=\"#2-2-3-require细节\" class=\"headerlink\" title=\"2.2.3. require细节\"></a>2.2.3. require细节</h4><p>我们现在已经知道，require是一个函数，可以帮助我们引入一个文件（模块）中导入的对象。</p>\n<p>那么，require的查找规则是怎么样的呢？</p>\n<ul>\n<li><a href=\"https://nodejs.org/dist/latest-v14.x/docs/api/modules.html#modules_all_together\">https://nodejs.org/dist/latest-v14.x/docs/api/modules.html#modules_all_together</a></li>\n</ul>\n<p><strong>这里我总结比较常见的查找规则：</strong></p>\n<p>导入格式如下：require(X)</p>\n<ul>\n<li><p>情况一：X是一个核心模块，比如path、http</p>\n</li>\n<li><ul>\n<li>直接返回核心模块，并且停止查找</li>\n</ul>\n</li>\n<li><p>情况二：X是以 <code>./</code> 或 <code>../</code> 或 <code>/</code>（根目录）开头的</p>\n</li>\n<li><ul>\n<li>查找目录下面的index文件</li>\n</ul>\n</li>\n<li><p>1> 查找X/index.js文件</p>\n</li>\n<li><p>2> 查找X/index.json文件</p>\n</li>\n<li><p>3> 查找X/index.node文件</p>\n</li>\n<li><p>1.如果有后缀名，按照后缀名的格式查找对应的文件</p>\n</li>\n<li><p>2.如果没有后缀名，会按照如下顺序：</p>\n</li>\n<li><p>1> 直接查找文件X</p>\n</li>\n<li><p>2> 查找X.js文件</p>\n</li>\n<li><p>3> 查找X.json文件</p>\n</li>\n<li><p>4> 查找X.node文件</p>\n</li>\n<li><p>第一步：将X当做一个文件在对应的目录下查找；</p>\n</li>\n<li><p>第二步：没有找到对应的文件，将X作为一个目录</p>\n</li>\n<li><p>如果没有找到，那么报错：<code>not found</code></p>\n</li>\n<li><p>情况三：直接是一个X（没有路径），并且X不是一个核心模块</p>\n</li>\n<li><ul>\n<li>比如 <code>/Users/coderwhy/Desktop/Node/TestCode/04_learn_node/05_javascript-module/02_commonjs/main.js</code>中编写 <code>require(&#39;why&#39;)</code></li>\n</ul>\n</li>\n<li><p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeccY2Bics4UStoH4FzQrWyibQ4JPiaQayWNXn7ph55CpDPSNmeVXb0Jxyg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">查找顺序</p>\n</li>\n<li><p>如果上面的路径中都没有找到，那么报错：<code>not found</code></p>\n</li>\n</ul>\n<h4 id=\"2-2-4-模块加载顺序\"><a href=\"#2-2-4-模块加载顺序\" class=\"headerlink\" title=\"2.2.4. 模块加载顺序\"></a>2.2.4. 模块加载顺序</h4><p>这里我们研究一下模块的加载顺序问题。</p>\n<p><strong>结论一：模块在被第一次引入时，模块中的js代码会被运行一次</strong></p>\n<p>aaa.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const name &#x3D; &#39;coderwhy&#39;;\n\nconsole.log(&quot;Hello aaa&quot;);\n\nsetTimeout(() &#x3D;&gt; &#123;\n  console.log(&quot;setTimeout&quot;);\n&#125;, 1000);</code></pre>\n\n<p>main.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const aaa &#x3D; require(&#39;.&#x2F;aaa&#39;);</code></pre>\n\n<p>aaa.js中的代码在引入时会被运行一次</p>\n<p><strong>结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</strong></p>\n<p>main.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const aaa &#x3D; require(&#39;.&#x2F;aaa&#39;);\nconst bbb &#x3D; require(&#39;.&#x2F;bbb&#39;);</code></pre>\n\n<p>aaa.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const ccc &#x3D; require(&quot;.&#x2F;ccc&quot;);</code></pre>\n\n<p>bbb.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const ccc &#x3D; require(&quot;.&#x2F;ccc&quot;);</code></pre>\n\n<p>ccc.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&#39;ccc被加载&#39;);</code></pre>\n\n<p>ccc中的代码只会运行一次。</p>\n<p><strong>为什么只会加载运行一次呢？</strong></p>\n<ul>\n<li>这是因为每个模块对象module都有一个属性：loaded。</li>\n<li>为false表示还没有加载，为true表示已经加载；</li>\n</ul>\n<p><strong>结论三：如果有循环引入，那么加载顺序是什么？</strong></p>\n<p>如果出现下面模块的引用关系，那么加载顺序是什么呢？</p>\n<ul>\n<li>这个其实是一种数据结构：图结构；</li>\n<li>图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）；</li>\n<li>Node采用的是深度优先算法：main -> aaa -> ccc -> ddd -> eee ->bbb</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeicyjvLkriaru3ojNlKRmvS2JxaSFMSc2FBKKwYarUJo4yg4gswJiaR3pA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">多个模块的引入关系</p>\n<h3 id=\"2-3-Node的源码解析\"><a href=\"#2-3-Node的源码解析\" class=\"headerlink\" title=\"2.3. Node的源码解析\"></a>2.3. Node的源码解析</h3><p>Module类</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeY4IPWs3EMyKOMWKeM6j67YYqCxEBibXBPr88jK58OMNW4vAiaj6sWAnw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>Module类</p>\n<p>Module.prototype.require函数</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kiboje0sX4zUA3vz40Ozw8qcUhylACJpZPhEXeZrKboRMRgQpwhCpZibWbceg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>require函数</p>\n<p>Module._load函数</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeEjMHCucTVCC7q8WcQNmShUiaKWkFvkLSccd6HjJdM2MVkyVwrDoff8Q/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>_load函数的实现</p>\n<h2 id=\"AMD和CMD规范\"><a href=\"#AMD和CMD规范\" class=\"headerlink\" title=\"AMD和CMD规范\"></a>AMD和CMD规范</h2><h3 id=\"3-1-CommonJS规范缺点\"><a href=\"#3-1-CommonJS规范缺点\" class=\"headerlink\" title=\"3.1. CommonJS规范缺点\"></a>3.1. CommonJS规范缺点</h3><p>CommonJS加载模块是同步的：</p>\n<ul>\n<li>同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行；</li>\n<li>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快；</li>\n</ul>\n<p>如果将它应用于浏览器呢？</p>\n<ul>\n<li>浏览器加载js文件需要先从服务器将文件下载下来，之后在加载运行；</li>\n<li>那么采用同步的就意味着后续的js代码都无法正常运行，即使是一些简单的DOM操作；</li>\n</ul>\n<p>所以在浏览器中，我们通常不使用CommonJS规范：</p>\n<ul>\n<li>当然在webpack中使用CommonJS是另外一回事；</li>\n<li>因为它会将我们的代码转成浏览器可以直接执行的代码；</li>\n</ul>\n<p>在早期为了可以在浏览器中使用模块化，通常会采用AMD或CMD：</p>\n<ul>\n<li>但是目前一方面现代的浏览器已经支持ES Modules，另一方面借助于webpack等工具可以实现对CommonJS或者ES Module代码的转换；</li>\n<li>AMD和CMD已经使用非常少了，所以这里我们进行简单的演练；</li>\n</ul>\n<h3 id=\"3-2-AMD规范\"><a href=\"#3-2-AMD规范\" class=\"headerlink\" title=\"3.2. AMD规范\"></a>3.2. AMD规范</h3><p>AMD主要是应用于浏览器的一种模块化规范：</p>\n<ul>\n<li>AMD是Asynchronous Module Definition（异步模块定义）的缩写；</li>\n<li>它采用的是异步加载模块；</li>\n<li>事实上AMD的规范还要早于CommonJS，但是CommonJS目前依然在被使用，而AMD使用的较少了；</li>\n</ul>\n<p>我们提到过，规范只是定义代码的应该如何去编写，只有有了具体的实现才能被应用：</p>\n<ul>\n<li>AMD实现的比较常用的库是require.js和curl.js；</li>\n</ul>\n<p><strong>这里我们以require.js为例讲解：</strong></p>\n<p>第一步：下载require.js</p>\n<ul>\n<li>下载地址：<a href=\"https://github.com/requirejs/requirejs\">https://github.com/requirejs/requirejs</a></li>\n<li>找到其中的require.js文件；</li>\n</ul>\n<p>第二步：定义HTML的script标签引入require.js和定义入口文件：</p>\n<ul>\n<li>data-main属性的作用是在加载完src的文件后会加载执行该文件</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;require.js&quot; data-main&#x3D;&quot;.&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p>第三步：编写如下目录和代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── index.html\n├── index.js\n├── lib\n│   └── require.js\n└── modules\n    ├── bar.js\n    └── foo.js</code></pre>\n\n<p>index.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(function() &#123;\n  require.config(&#123;\n    baseUrl: &#39;&#39;,\n    paths: &#123;\n      foo: &#39;.&#x2F;modules&#x2F;foo&#39;,\n      bar: &#39;.&#x2F;modules&#x2F;bar&#39;\n    &#125;\n  &#125;)\n \n  &#x2F;&#x2F; 开始加载执行foo模块的代码\n  require([&#39;foo&#39;], function(foo) &#123;\n\n  &#125;)\n&#125;)();</code></pre>\n\n<p>modules/bar.js</p>\n<ul>\n<li>如果一个模块不依赖其他，那么直接使用define(function)即可</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">define(function() &#123;\n  const name &#x3D; &quot;coderwhy&quot;;\n  const age &#x3D; 18;\n  const sayHello &#x3D; function(name) &#123;\n    console.log(&quot;Hello &quot; + name);\n  &#125;\n\n  return &#123;\n    name,\n    age, \n    sayHello\n  &#125;\n&#125;)</code></pre>\n\n<p>modules/foo.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">define([&#39;bar&#39;], function(bar) &#123;\n  console.log(bar.name);\n  console.log(bar.age);\n  bar.sayHello(&#39;kobe&#39;);\n&#125;)</code></pre>\n\n<h3 id=\"3-3-CMD规范\"><a href=\"#3-3-CMD规范\" class=\"headerlink\" title=\"3.3. CMD规范\"></a>3.3. <strong>CMD规范</strong></h3><p>CMD规范也是应用于浏览器的一种模块化规范：</p>\n<ul>\n<li>CMD 是Common Module Definition（通用模块定义）的缩写；</li>\n<li>它也采用了异步加载模块，但是它将CommonJS的优点吸收了过来；</li>\n<li>但是目前CMD使用也非常少了；</li>\n</ul>\n<p>CMD也有自己比较优秀的实现方案：</p>\n<ul>\n<li>SeaJS</li>\n</ul>\n<p><strong>我们一起看一下SeaJS如何使用：</strong></p>\n<p>第一步：下载SeaJS</p>\n<ul>\n<li>下载地址：<a href=\"https://github.com/seajs/seajs\">https://github.com/seajs/seajs</a></li>\n<li>找到dist文件夹下的sea.js</li>\n</ul>\n<p>第二步：引入sea.js和使用主入口文件</p>\n<ul>\n<li><code>seajs</code>是指定主入口文件的</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script src&#x3D;&quot;.&#x2F;lib&#x2F;sea.js&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script&gt;\n  seajs.use(&#39;.&#x2F;index.js&#39;);\n&lt;&#x2F;script&gt;</code></pre>\n\n<p>第三步：编写如下目录和代码</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── index.html\n├── index.js\n├── lib\n│   └── sea.js\n└── modules\n    ├── bar.js\n    └── foo.js</code></pre>\n\n<p>index.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">define(function(require, exports, module) &#123;\n  const foo &#x3D; require(&#39;.&#x2F;modules&#x2F;foo&#39;);\n&#125;)</code></pre>\n\n<p>bar.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">define(function(require, exports, module) &#123;\n  const name &#x3D; &#39;lilei&#39;;\n  const age &#x3D; 20;\n  const sayHello &#x3D; function(name) &#123;\n    console.log(&quot;你好 &quot; + name);\n  &#125;\n\n  module.exports &#x3D; &#123;\n    name,\n    age,\n    sayHello\n  &#125;\n&#125;)</code></pre>\n\n<p>foo.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">define(function(require, exports, module) &#123;\n  const bar &#x3D; require(&#39;.&#x2F;bar&#39;);\n\n  console.log(bar.name);\n  console.log(bar.age);\n  bar.sayHello(&quot;韩梅梅&quot;);\n&#125;)</code></pre>\n\n<h2 id=\"ES-Module\"><a href=\"#ES-Module\" class=\"headerlink\" title=\"ES Module\"></a>ES Module</h2><h3 id=\"4-1-认识ES-Module\"><a href=\"#4-1-认识ES-Module\" class=\"headerlink\" title=\"4.1. 认识ES Module\"></a>4.1. 认识ES Module</h3><p>JavaScript没有模块化一直是它的痛点，所以才会产生我们前面学习的社区规范：CommonJS、AMD、CMD等，所以在ES推出自己的模块化系统时，大家也是兴奋异常。</p>\n<p>ES Module和CommonJS的模块化有一些不同之处：</p>\n<ul>\n<li>一方面它使用了import和export关键字；</li>\n<li>另一方面它采用编译期静态类型检测，并且动态引用的方式；</li>\n</ul>\n<p>ES Module模块采用export和import关键字来实现模块化：</p>\n<ul>\n<li>export负责将模块内的内容导出；</li>\n<li>import负责从其他模块导入内容；</li>\n</ul>\n<p>了解：采用ES Module将自动采用严格模式：<code>use strict</code></p>\n<ul>\n<li>如果你不熟悉严格模式可以简单看一下MDN上的解析；</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></li>\n</ul>\n<h3 id=\"4-2-ES-Module的使用\"><a href=\"#4-2-ES-Module的使用\" class=\"headerlink\" title=\"4.2. ES Module的使用\"></a>4.2. ES Module的使用</h3><h4 id=\"4-2-1-代码结构组件\"><a href=\"#4-2-1-代码结构组件\" class=\"headerlink\" title=\"4.2.1. 代码结构组件\"></a>4.2.1. 代码结构组件</h4><p>这里我在浏览器中演示ES6的模块化开发：</p>\n<p>代码结构如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">├── index.html\n├── main.js\n└── modules\n    └── foo.js</code></pre>\n\n<p>index.html中引入两个js文件作为模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script src&#x3D;&quot;.&#x2F;modules&#x2F;foo.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;main.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p>如果直接在浏览器中运行代码，会报如下错误：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeeWRicwIysicCm4m69Kfd8FFfaEcWuRdSV4spX0zrGLzX51KCgZ6ibELPg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>模块化运行</p>\n<p>这个在MDN上面有给出解释：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules</a></li>\n<li>你需要注意本地测试 — 如果你通过本地加载Html 文件 (比如一个 <code>file://</code> 路径的文件), 你将会遇到 CORS 错误，因为Javascript 模块安全性需要。</li>\n<li>你需要通过一个服务器来测试。</li>\n</ul>\n<p>我这里使用的VSCode，VSCode中有一个插件：Live Server</p>\n<ul>\n<li>通过插件运行，可以将我们的代码运行在一个本地服务中；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeUG7186yJvYjzRXmzl3NFJg46oIEJibAPpbJvyBmycic4YF91qVfibuW7A/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20201012153439900</p>\n<h4 id=\"4-2-2-export关键字\"><a href=\"#4-2-2-export关键字\" class=\"headerlink\" title=\"4.2.2. export关键字\"></a>4.2.2. export关键字</h4><p>export关键字将一个模块中的变量、函数、类等导出；</p>\n<p>foo.js文件中默认代码如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const name &#x3D; &#39;coderwhy&#39;;\nconst age &#x3D; 18;\nlet message &#x3D; &quot;my name is why&quot;;\n\nfunction sayHello(name) &#123;\n  console.log(&quot;Hello &quot; + name);\n&#125;</code></pre>\n\n<p><strong>我们希望将其他中内容全部导出，它可以有如下的方式：</strong></p>\n<p>方式一：在语句声明的前面直接加上export关键字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export const name &#x3D; &#39;coderwhy&#39;;\nexport const age &#x3D; 18;\nexport let message &#x3D; &quot;my name is why&quot;;\n\nexport function sayHello(name) &#123;\n  console.log(&quot;Hello &quot; + name);\n&#125;</code></pre>\n\n<p>方式二：将所有需要导出的标识符，放到export后面的 <code>&#123;&#125;</code>中</p>\n<ul>\n<li>注意：这里的 <code>&#123;&#125;</code>里面不是ES6的对象字面量的增强写法，<code>&#123;&#125;</code>也不是表示一个对象的；</li>\n<li>所以：<code>export &#123;name: name&#125;</code>，是错误的写法；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const name &#x3D; &#39;coderwhy&#39;;\nconst age &#x3D; 18;\nlet message &#x3D; &quot;my name is why&quot;;\n\nfunction sayHello(name) &#123;\n  console.log(&quot;Hello &quot; + name);\n&#125;\n\nexport &#123;\n  name,\n  age,\n  message,\n  sayHello\n&#125;</code></pre>\n\n<p>方式三：导出时给<code>标识符</code>起一个别名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export &#123;\n  name as fName,\n  age as fAge,\n  message as fMessage,\n  sayHello as fSayHello\n&#125;</code></pre>\n\n<h4 id=\"4-2-3-import关键字\"><a href=\"#4-2-3-import关键字\" class=\"headerlink\" title=\"4.2.3. import关键字\"></a>4.2.3. import关键字</h4><p>import关键字负责从另外一个模块中导入内容</p>\n<p><strong>导入内容的方式也有多种：</strong></p>\n<p>方式一：<code>import &#123;标识符列表&#125; from &#39;模块&#39;</code>；</p>\n<ul>\n<li>注意：这里的<code>&#123;&#125;</code>也不是一个对象，里面只是存放导入的标识符列表内容；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; name, age, message, sayHello &#125; from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\n\nconsole.log(name)\nconsole.log(message);\nconsole.log(age);\nsayHello(&quot;Kobe&quot;);</code></pre>\n\n<p>方式二：导入时给标识符起别名</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; name as wName, age as wAge, message as wMessage, sayHello as wSayHello &#125; from &#39;.&#x2F;modules&#x2F;foo.js&#39;;</code></pre>\n\n<p>方式三：将模块功能放到一个模块功能对象（a module object）上</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import * as foo from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\n\nconsole.log(foo.name);\nconsole.log(foo.message);\nconsole.log(foo.age);\nfoo.sayHello(&quot;Kobe&quot;);</code></pre>\n\n<h4 id=\"4-2-4-export和import结合\"><a href=\"#4-2-4-export和import结合\" class=\"headerlink\" title=\"4.2.4. export和import结合\"></a>4.2.4. export和import结合</h4><p>如果从一个模块中导入的内容，我们希望再直接导出出去，这个时候可以直接使用export来导出。</p>\n<p>bar.js中导出一个sum函数：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export const sum &#x3D; function(num1, num2) &#123;\n  return num1 + num2;\n&#125;</code></pre>\n\n<p>foo.js中导入，但是只是做一个中转：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export &#123; sum &#125; from &#39;.&#x2F;bar.js&#39;;</code></pre>\n\n<p>main.js直接从foo中导入：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; sum &#125; from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\nconsole.log(sum(20, 30));</code></pre>\n\n<p>甚至在foo.js中导出时，我们可以变化它的名字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export &#123; sum as barSum &#125; from &#39;.&#x2F;bar.js&#39;;</code></pre>\n\n<p>为什么要这样做呢？</p>\n<ul>\n<li>在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</li>\n<li>这样方便指定统一的接口规范，也方便阅读；</li>\n<li>这个时候，我们就可以使用export和import结合使用；</li>\n</ul>\n<h4 id=\"4-2-4-default用法\"><a href=\"#4-2-4-default用法\" class=\"headerlink\" title=\"4.2.4. default用法\"></a>4.2.4. default用法</h4><p>前面我们学习的导出功能都是有名字的导出（named exports）：</p>\n<ul>\n<li>在导出export时指定了名字；</li>\n<li>在导入import时需要知道具体的名字；</li>\n</ul>\n<p>还有一种导出叫做默认导出（default export）</p>\n<ul>\n<li>默认导出export时可以不需要指定名字；</li>\n<li>在导入时不需要使用 <code>&#123;&#125;</code>，并且可以自己来指定名字；</li>\n<li>它也方便我们和现有的CommonJS等规范相互操作；</li>\n</ul>\n<p>导出格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export default function sub(num1, num2) &#123;\n  return num1 - num2;\n&#125;</code></pre>\n\n<p>导入格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import sub from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\n\nconsole.log(sub(20, 30));</code></pre>\n\n<p>注意：在一个模块中，只能有一个默认导出（default export）；</p>\n<h4 id=\"4-2-5-import\"><a href=\"#4-2-5-import\" class=\"headerlink\" title=\"4.2.5. import()\"></a>4.2.5. import()</h4><p>通过import加载一个模块，是不可以在其放到逻辑代码中的，比如：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if (true) &#123;\n  import sub from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\n&#125;</code></pre>\n\n<p>为什么会出现这个情况呢？</p>\n<ul>\n<li>这是因为ES Module在被JS引擎解析时，就必须知道它的依赖关系；</li>\n<li>由于这个时候js代码没有任何的运行，所以无法在进行类似于if判断中根据代码的执行情况；</li>\n<li>甚至下面的这种写法也是错误的：因为我们必须到运行时能确定path的值；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const path &#x3D; &#39;.&#x2F;modules&#x2F;foo.js&#39;;\n\nimport sub from path;</code></pre>\n\n<p>但是某些情况下，我们确确实实希望动态的来加载某一个模块：</p>\n<ul>\n<li>如果根据不懂的条件，动态来选择加载模块的路径；</li>\n<li><strong>这个时候我们需要使用 <code>import()</code> 函数来动态加载；</strong></li>\n</ul>\n<p>aaa.js模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export function aaa() &#123;\n  console.log(&quot;aaa被打印&quot;);\n&#125;</code></pre>\n\n<p>bbb.js模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">export function bbb() &#123;\n  console.log(&quot;bbb被执行&quot;);\n&#125;</code></pre>\n\n<p>main.js模块：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let flag &#x3D; true;\nif (flag) &#123;\n  import(&#39;.&#x2F;modules&#x2F;aaa.js&#39;).then(aaa &#x3D;&gt; &#123;\n    aaa.aaa();\n  &#125;)\n&#125; else &#123;\n  import(&#39;.&#x2F;modules&#x2F;bbb.js&#39;).then(bbb &#x3D;&gt; &#123;\n    bbb.bbb();\n  &#125;)\n&#125;</code></pre>\n\n<h3 id=\"4-3-ES-Module的原理\"><a href=\"#4-3-ES-Module的原理\" class=\"headerlink\" title=\"4.3. ES Module的原理\"></a>4.3. ES Module的原理</h3><h4 id=\"4-3-1-ES-Module和CommonJS的区别\"><a href=\"#4-3-1-ES-Module和CommonJS的区别\" class=\"headerlink\" title=\"4.3.1. ES Module和CommonJS的区别\"></a>4.3.1. ES Module和CommonJS的区别</h4><p><strong>CommonJS模块加载js文件的过程是运行时加载的，并且是同步的：</strong></p>\n<ul>\n<li>运行时加载意味着是js引擎在执行js代码的过程中加载 模块；</li>\n<li>同步的就意味着一个文件没有加载结束之前，后面的代码都不会执行；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">console.log(&quot;main代码执行&quot;);\n\nconst flag &#x3D; true;\nif (flag) &#123;\n  &#x2F;&#x2F; 同步加载foo文件，并且执行一次内部的代码\n  const foo &#x3D; require(&#39;.&#x2F;foo&#39;);\n  console.log(&quot;if语句继续执行&quot;);\n&#125;</code></pre>\n\n<p><strong>CommonJS通过module.exports导出的是一个对象：</strong></p>\n<ul>\n<li>导出的是一个对象意味着可以将这个对象的引用在其他模块中赋值给其他变量；</li>\n<li>但是最终他们指向的都是同一个对象，那么一个变量修改了对象的属性，所有的地方都会被修改；</li>\n</ul>\n<p><strong>ES Module加载js文件的过程是编译（解析）时加载的，并且是异步的：</strong></p>\n<ul>\n<li><p>编译时（解析）时加载，意味着import不能和运行时相关的内容放在一起使用：</p>\n</li>\n<li><ul>\n<li>比如from后面的路径需要动态获取；</li>\n</ul>\n</li>\n<li><p>比如不能将import放到if等语句的代码块中；</p>\n</li>\n<li><p>所以我们有时候也称ES Module是静态解析的，而不是动态或者运行时解析的；</p>\n</li>\n<li><p>异步的意味着：JS引擎在遇到<code>import</code>时会去获取这个js文件，但是这个获取的过程是异步的，并不会阻塞主线程继续执行；</p>\n</li>\n<li><ul>\n<li>也就是说设置了 <code>type=module</code> 的代码，相当于在script标签上也加上了 <code>async</code> 属性；</li>\n</ul>\n</li>\n<li><p>如果我们后面有普通的script标签以及对应的代码，那么ES Module对应的js文件和代码不会阻塞它们的执行；</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script src&#x3D;&quot;main.js&quot; type&#x3D;&quot;module&quot;&gt;&lt;&#x2F;script&gt;\n&lt;!-- 这个js文件的代码不会被阻塞执行 --&gt;\n&lt;script src&#x3D;&quot;index.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre>\n\n<p><strong>ES Module通过export导出的是变量本身的引用：</strong></p>\n<ul>\n<li>export在导出一个变量时，js引擎会解析这个语法，并且创建<strong>模块环境记录</strong>（module environment record）；</li>\n<li><strong>模块环境记录</strong>会和变量进行 <code>绑定</code>（binding），并且这个绑定是实时的；</li>\n<li>而在导入的地方，我们是可以实时的获取到绑定的最新值的；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojeezXibRWtBBwGrUqbiceysIwmIBaWxjhEc1QAOOr0MSjCbOJTkKhP5dfw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">export和import绑定的过程</p>\n<p><strong>所以我们下面的代码是成立的：</strong></p>\n<p>bar.js文件中修改</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">let name &#x3D; &#39;coderwhy&#39;;\n\nsetTimeout(() &#x3D;&gt; &#123;\n  name &#x3D; &quot;湖人总冠军&quot;;\n&#125;, 1000);\n\nsetTimeout(() &#x3D;&gt; &#123;\n  console.log(name);\n&#125;, 2000);\n\nexport &#123;\n  name\n&#125;</code></pre>\n\n<p>main.js文件中获取</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; name &#125; from &#39;.&#x2F;modules&#x2F;bar.js&#39;;\n\nconsole.log(name);\n\n&#x2F;&#x2F; bar中修改, main中验证\nsetTimeout(() &#x3D;&gt; &#123;\n  console.log(name);\n&#125;, 2000);</code></pre>\n\n<p>但是，下面的代码是不成立的：main.js中修改</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; name &#125; from &#39;.&#x2F;modules&#x2F;bar.js&#39;;\n\nconsole.log(name);\n\n&#x2F;&#x2F; main中修改, bar中验证\nsetTimeout(() &#x3D;&gt; &#123;\n  name &#x3D; &#39;kobe&#39;;\n&#125;, 1000);</code></pre>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojelXdJWbQtsL9dkFfVickXCPiclf8icow980G4sPwpITsbzuEYaZS1VPIoA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">导入的变量不可以被修改</p>\n<p>思考：如果bar.js中导出的是一个对象，那么main.js中是否可以修改对象中的属性呢？</p>\n<ul>\n<li>答案是可以的，因为他们指向同一块内存空间；（自己编写代码验证，这里不再给出）</li>\n</ul>\n<h4 id=\"4-3-2-Node中支持-ES-Module\"><a href=\"#4-3-2-Node中支持-ES-Module\" class=\"headerlink\" title=\"4.3.2. Node中支持 ES Module\"></a>4.3.2. Node中支持 ES Module</h4><p><strong>在Current版本中</strong></p>\n<p>在最新的Current版本（v14.13.1）中，支持es module我们需要进行如下操作：</p>\n<ul>\n<li>方式一：在package.json中配置 <code>type: module</code>（后续再学习，我们现在还没有讲到package.json文件的作用）</li>\n<li>方式二：文件以 <code>.mjs</code> 结尾，表示使用的是ES Module；</li>\n</ul>\n<p>这里我们暂时选择以 <code>.mjs</code> 结尾的方式来演练：</p>\n<p>bar.mjs</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const name &#x3D; &#39;coderwhy&#39;;\n\nexport &#123;\n  name\n&#125;</code></pre>\n\n<p>main.mjs</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import &#123; name &#125; from &#39;.&#x2F;modules&#x2F;bar.mjs&#39;;\n\nconsole.log(name);</code></pre>\n\n<p><strong>在LTS版本中</strong></p>\n<p>在最新的LST版本（v12.19.0）中，我们也是可以正常运行的，但是会报一个警告：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXuseDpSr345APaEno34kibojefTf4B6uacj7YUH5BD1IKh5IzA1DcedJ5ia6Y1Wnul1HCo9fVCWjMdRQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">lts版本的警告</p>\n<h4 id=\"4-3-3-ES-Module和CommonJS的交互\"><a href=\"#4-3-3-ES-Module和CommonJS的交互\" class=\"headerlink\" title=\"4.3.3. ES Module和CommonJS的交互\"></a>4.3.3. ES Module和CommonJS的交互</h4><p><strong>CommonJS加载ES Module</strong></p>\n<p>结论：通常情况下，CommonJS不能加载ES Module</p>\n<ul>\n<li>因为CommonJS是同步加载的，但是ES Module必须经过静态分析等，无法在这个时候执行JavaScript代码；</li>\n<li>但是这个并非绝对的，某些平台在实现的时候可以对代码进行针对性的解析，也可能会支持；</li>\n<li>Node当中是不支持的；</li>\n</ul>\n<p><strong>ES Module加载CommonJS</strong></p>\n<p>结论：多数情况下，ES Module可以加载CommonJS</p>\n<ul>\n<li>ES Module在加载CommonJS时，会将其module.exports导出的内容作为default导出方式来使用；</li>\n<li>这个依然需要看具体的实现，比如webpack中是支持的、Node最新的Current版本也是支持的；</li>\n<li>但是在最新的LTS版本中就不支持；</li>\n</ul>\n<p>foo.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">const address &#x3D; &#39;foo的address&#39;;\n\nmodule.exports &#x3D; &#123;\n  address\n&#125;</code></pre>\n\n<p>main.js</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">import foo from &#39;.&#x2F;modules&#x2F;foo.js&#39;;\nconsole.log(foo.address);</code></pre>\n","text":"三 . 掌握前端模块化1.1. JavaScript设计缺陷那么，到底什么是模块化开发呢？ 事实上模块化开发最终的目的是将程序划分成一个个小的结构； 这个结构中编写属于自己的逻辑代码，有自己的作用域，不会影响到其他的结构； 这个结构可以将自己希望暴露的变量、函数、对象等导出给其结...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89-%E6%8E%8C%E6%8F%A1%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96\"><span class=\"toc-text\">三 . 掌握前端模块化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-JavaScript%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7\"><span class=\"toc-text\">1.1. JavaScript设计缺陷</span></a></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node基础四","uid":"e9d3cfba4c19a66c9a7d2ec6535dbb77","slug":"node/base/Node基础四","date":"2022-10-01T04:24:10.000Z","updated":"2022-10-16T03:42:07.077Z","comments":true,"path":"api/articles/node/base/Node基础四.json","keywords":"chriswood blogs sharing","cover":null,"text":"四.常用内置模块1.1. 认识path模块path模块用于对路径和文件进行处理，提供了很多好用的方法。 并且我们知道在Mac OS、Linux和window上的路径是不一样的 window上会使用 \\或者 \\\\ 来作为文件路径的分隔符，当然目前也支持 /； 在Mac OS、Lin...","link":"","photos":[],"count_time":{"symbolsCount":"8.4k","symbolsTime":"8 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Node基础二","uid":"a6a1fb5bcb751ccc4e9548f88f960a7a","slug":"node/base/Node基础二","date":"2022-10-01T04:06:20.000Z","updated":"2022-10-16T03:42:07.073Z","comments":true,"path":"api/articles/node/base/Node基础二.json","keywords":"chriswood blogs sharing","cover":[],"text":"二.node基础1.1. JavaScript文件执行如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？ &#x2F;&#x2F; 1.直接打印一段文字 console.log(&quot;我是一段JavaScript代码&quot;); &#x2F;&...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
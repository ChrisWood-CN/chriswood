{"title":"Node基础一","uid":"16ea75a74e45c427c7de22a19d8e1e05","slug":"node/base/Node基础一","date":"2022-09-30T15:33:43.000Z","updated":"2023-06-30T02:33:00.405Z","comments":true,"path":"api/articles/node/base/Node基础一.json","keywords":"chriswood blogs sharing","cover":[],"content":"<h2 id=\"一-JavaScript运行原理\"><a href=\"#一-JavaScript运行原理\" class=\"headerlink\" title=\"一.JavaScript运行原理\"></a>一.JavaScript运行原理</h2><h3 id=\"1-1-Atwood定律\"><a href=\"#1-1-Atwood定律\" class=\"headerlink\" title=\"1.1. Atwood定律\"></a>1.1. Atwood定律</h3><p>官方对Node.js的定义：</p>\n<ul>\n<li><p>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</p>\n</li>\n<li><p>什么是JavaScript运行环境？</p>\n</li>\n<li><p>为什么JavaScript需要特别的运行环境呢？</p>\n</li>\n<li><p>什么又是JavaScript引擎？</p>\n</li>\n<li><p>什么是V8？</p>\n</li>\n</ul>\n<p>我们先来把这些概念搞清楚，再去看Node到底是什么？</p>\n<p>Stack Overflow的创立者之一的 Jeff Atwood 在2007年提出了著名的 Atwood定律：</p>\n<ul>\n<li>Any application that can be written in JavaScript, will eventually be written in JavaScript.</li>\n<li>任何可以使用JavaScript来实现的应用都最终都会使用JavaScript实现</li>\n</ul>\n<p>但是在发明之初，JavaScript的目的是应用于在浏览器执行简单的脚本任务，对浏览器以及其中的DOM进行各种操作，所以JavaScript的应用场景非常受限。</p>\n<ul>\n<li>Atwood定律更像是一种美好的远景，在当时看来还没有实现的可能性。</li>\n<li>但是随着Node的出现，Atwood定律已经越来越多的被证实是正确的。</li>\n</ul>\n<p>但是为了可以理解Node.js到底是如何帮助我们做到这一点的，我们必须了解JavaScript是如何被运行的。</p>\n<h3 id=\"1-2-浏览器内核\"><a href=\"#1-2-浏览器内核\" class=\"headerlink\" title=\"1.2. 浏览器内核\"></a>1.2. 浏览器内核</h3><p>我们经常会说：不同的浏览器有不同的内核组成</p>\n<ul>\n<li>Gecko：早期被Netscape和Mozilla Firefox浏览器浏览器使用；</li>\n<li>Trident：微软开发，被IE4~IE11浏览器使用，但是Edge浏览器已经转向Blink；</li>\n<li>Webkit：苹果基于KHTML开发、开源的，用于Safari，Google Chrome之前也在使用；</li>\n<li>Blink：是Webkit的一个分支，Google开发，目前应用于Google Chrome、Edge、Opera等；</li>\n</ul>\n<p>事实上，我们经常说的浏览器内核指的是浏览器的排版引擎：</p>\n<ul>\n<li><strong>排版引擎</strong>（layout engine），也称为<strong>浏览器引擎</strong>（browser engine）、<strong>页面渲染引擎</strong>（rendering engine）或<strong>样版引擎</strong>。</li>\n</ul>\n<p><img src=\"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/node/b326323caf6b410198ddc5cabfe5ab81.png\" alt=\"图片\">WebKit main flow</p>\n<p>但是在这个执行过程中，HTML解析的时候遇到了JavaScript标签，应该怎么办呢？</p>\n<ul>\n<li>会停止解析HTML，而去加载和执行JavaScript代码；</li>\n</ul>\n<p>当然，为什么不直接异步去加载执行JavaScript代码，而要在这里停止掉呢？</p>\n<ul>\n<li>这是因为JavaScript代码可以操作我们的DOM；</li>\n<li>所以浏览器希望将HTML解析的DOM和JavaScript操作之后的DOM放到一起来生成最终的DOM树，而不是频繁的去生成新的DOM树；</li>\n</ul>\n<p>那么，JavaScript代码由谁来执行呢？</p>\n<ul>\n<li>JavaScript引擎</li>\n</ul>\n<h3 id=\"1-3-JavaScript引擎\"><a href=\"#1-3-JavaScript引擎\" class=\"headerlink\" title=\"1.3. JavaScript引擎\"></a>1.3. JavaScript引擎</h3><p>为什么需要JavaScript引擎呢？</p>\n<ul>\n<li>事实上我们编写的JavaScript无论你交给浏览器或者Node执行，最后都是需要被CPU执行的；</li>\n<li>但是CPU只认识自己的指令集，实际上是机器语言，才能被CPU所执行；</li>\n<li>所以我们需要JavaScript引擎帮助我们将JavaScript代码翻译成CPU指令来执行；</li>\n</ul>\n<p>比较常见的JavaScript引擎有哪些呢？</p>\n<ul>\n<li><strong>SpiderMonkey</strong>：第一款JavaScript引擎，由Brendan Eich开发（也就是JavaScript作者）；</li>\n<li><strong>Chakra</strong>：微软开发，用于IT浏览器；</li>\n<li><strong>JavaScriptCore</strong>：WebKit中的JavaScript引擎，Apple公司开发；</li>\n<li><strong>V8</strong>：Google开发的强大JavaScript引擎，也帮助Chrome从众多浏览器中脱颖而出；</li>\n</ul>\n<p>这里我们先以WebKit为例，WebKit事实上由两部分组成的：</p>\n<ul>\n<li>WebCore：负责HTML解析、布局、渲染等等相关的工作；</li>\n<li>JavaScriptCore：解析、执行JavaScript代码；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ictqFSK4mQRMq1QlUahGHbqU2JlZctsYoVuH9BTQdowian3fxYBn9NIA/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">webkit内核</p>\n<p>看到这里，学过小程序的同学有没有感觉非常的熟悉呢？</p>\n<ul>\n<li>在小程序中编写的JavaScript代码就是被JSCore执行的；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw00EBdcmxxy5ibz4rPm6IEgnL2ac6BdbU9Q8t1plYMYYTGl1wJcFibS3aQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\"></p>\n<p>另外一个强大的JavaScript引擎就是V8引擎。</p>\n<h3 id=\"1-4-V8引擎\"><a href=\"#1-4-V8引擎\" class=\"headerlink\" title=\"1.4. V8引擎\"></a>1.4. V8引擎</h3><p>我们来看一下官方对V8引擎的定义：</p>\n<ul>\n<li>V8是用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等。</li>\n<li>它实现ECMAScript和WebAssembly，并在Windows 7或更高版本，macOS 10.12+和使用x64，IA-32，ARM或MIPS处理器的Linux系统上运行。</li>\n<li>V8可以独立运行，也可以嵌入到任何C ++应用程序中。</li>\n</ul>\n<p>V8引擎本身的源码非常复杂，大概有超过100w行C++代码，但是我们可以简单了解一下它执行JavaScript代码的原理：</p>\n<ul>\n<li><p>Parse模块会将JavaScript代码转换成AST（抽象语法树），这是因为解释器并不直接认识JavaScript代码；</p>\n</li>\n<li><ul>\n<li>如果函数没有被调用，那么是不会被转换成AST的；</li>\n</ul>\n</li>\n<li><p>Parse的V8官方文档：<a href=\"https://v8.dev/blog/scanner\">https://v8.dev/blog/scanner</a></p>\n</li>\n<li><p>Ignition是一个解释器，会将AST转换成ByteCode（字节码）</p>\n</li>\n<li><ul>\n<li>同时会收集TurboFan优化所需要的信息（比如函数参数的类型信息，有了类型才能进行真实的运算）；</li>\n</ul>\n</li>\n<li><p>如果函数只调用一次，Ignition会执行解释执行ByteCode；</p>\n</li>\n<li><p>Ignition的V8官方文档：<a href=\"https://v8.dev/blog/ignition-interpreter\">https://v8.dev/blog/ignition-interpreter</a></p>\n</li>\n<li><p>TurboFan是一个编译器，可以将字节码编译为CPU可以直接执行的机器码；</p>\n</li>\n<li><ul>\n<li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能；</li>\n</ul>\n</li>\n<li><p>但是，机器码实际上也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化（比如sum函数原来执行的是number类型，后来执行变成了string类型），之前优化的机器码并不能正确的处理运算，就会逆向的转换成字节码；</p>\n</li>\n<li><p>TurboFan的V8官方文档：<a href=\"https://v8.dev/blog/turbofan-jit\">https://v8.dev/blog/turbofan-jit</a></p>\n</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0NsdC5lgxmMx4g5IdddzjM3y2EsjflNlXA5hCpouMSgIhjuMuTaK7sQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20200924165143332</p>\n<p>上面是JavaScript代码的执行过程，事实上V8的内存回收也是其强大的另外一个原因，这里暂时先不展开讨论：</p>\n<ul>\n<li>Orinoco模块，负责垃圾回收，将程序中不需要的内存回收；</li>\n<li>Orinoco的V8官方文档：<a href=\"https://v8.dev/blog/trash-talk\">https://v8.dev/blog/trash-talk</a></li>\n</ul>\n<h3 id=\"2-1-Node-js是什么？\"><a href=\"#2-1-Node-js是什么？\" class=\"headerlink\" title=\"2.1. Node.js是什么？\"></a>2.1. Node.js是什么？</h3><p>回顾：官方对Node.js的定义：</p>\n<ul>\n<li>Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0CVgJr8GbR3yZqwAZc5LoC7L9h7DhJJEvK02OpNeZbK2u7qQZutrJPQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">image-20200924193328076</p>\n<p>也就是说Node.js基于V8引擎来执行JavaScript的代码，但是不仅仅只有V8引擎：</p>\n<ul>\n<li>前面我们知道Node.js可以嵌入到任何C ++应用程序中，无论是Chrome还是Node.js，事实上都是嵌入了V8引擎来执行JavaScript代码；</li>\n<li>但是在Chrome浏览器中，还需要解析、渲染HTML、CSS等相关渲染引擎，另外还需要提供支持浏览器操作的API、浏览器自己的事件循环等；</li>\n<li>另外，在Node.js中我们也需要进行一些额外的操作，比如文件系统读&#x2F;写、网络IO、加密、压缩解压文件等操作；</li>\n</ul>\n<p>所以，我们可以简单理解规划出Node.js和浏览器的差异：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0QoNkQ5etdCFE2v3Km6xo9Fwt033tJU8DB3ic9icYDWymPaqvzOcehkQw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">Chrome浏览器和Node架构区别</p>\n<p>这里也有一份单独的Node.js的架构图：</p>\n<ul>\n<li>我们编写的JavaScript代码会经过V8引擎，再通过Node.js的Bindings，将任务放到Libuv的事件循环中；</li>\n<li><strong>libuv</strong>（Unicorn Velociraptor—独角伶盗龙）是使用C语言编写的库；</li>\n<li>libuv提供了事件循环、文件系统读写、网络IO、线程池等等内容；</li>\n<li>具体内部代码的执行流程，我会在后续专门讲解事件和异步IO的原理中详细讲解；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0icKKjBDq3aSaMLmMjPTY5Ux1QtjsDgiaZTom62yt3hQUlZLc7unJ8Rdw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">What is Node.js? Where, when and how to use it with examples</p>\n<h3 id=\"2-2-Node-js可以做什么？\"><a href=\"#2-2-Node-js可以做什么？\" class=\"headerlink\" title=\"2.2. Node.js可以做什么？\"></a>2.2. Node.js可以做什么？</h3><p>了解了Node.js的架构，那么使用它我们可以做什么呢？</p>\n<ul>\n<li>前面我们提到，Node.js的出现，真正让Atwood定律变成了现实，Node.js的应用场景也越来越多。</li>\n</ul>\n<p>我们可以使用基于Node.js的Electron开发出类似于VSCode这种强大的桌面应用程序。另外前端自动化、模块化打包工具gulp、webpack也是基于Node.js开发和使用的。</p>\n<p>Node.js的快速发展也让企业对Node.js技术越来越重视，在前端招聘中通常会对Node.js有一定的要求，特别对于高级前端开发工程师，Node.js更是必不可少的技能：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw09Fg50B0b7JsykNNKngN1MH8PaFKZWYnxOhE6vT5bv4J7vuYLR0HTGw/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">前端工程师岗位需求</p>\n<p>目前前端开发的库都是以node包的形式进行管理；</p>\n<ul>\n<li>npm、yarn工具成为前端开发使用最多的工具；</li>\n<li>越来越多的公司使用Node.js作为web服务器开发；</li>\n<li>大量项目需要借助Node.js完成前后端渲染的同构应用；</li>\n<li>资深前端工程师需要为项目编写脚本工具（前端工程师编写脚本通常会使用JavaScript，而不是Python或者shell）；</li>\n<li>很多企业在使用Electron来开发桌面应用程序；</li>\n</ul>\n<p>总结一下，目前Node.js到底有哪些应用场景呢？</p>\n<ul>\n<li><p>前后端页面渲染</p>\n</li>\n<li><ul>\n<li>支持项目同构开发</li>\n</ul>\n</li>\n<li><p>对于需要进行首屏优化、SEO的页面进行后端渲染</p>\n</li>\n<li><p>开发命令行工具</p>\n</li>\n<li><ul>\n<li>webpack、gulp等都是基于Node</li>\n</ul>\n</li>\n<li><p>开发自己独立的命令行工具（类似于shell、Python做的事情，对于前端更加友好）</p>\n</li>\n<li><p>桌面应用的开发</p>\n</li>\n<li><ul>\n<li>类似于VSCode这种强大的桌面应用</li>\n</ul>\n</li>\n<li><p>甚至开发桌面端类似于wayward大型游戏</p>\n</li>\n<li><p>进行服务器开发</p>\n</li>\n<li><ul>\n<li>拥有类似express、koa等强大的web框架</li>\n</ul>\n</li>\n<li><p>开发Web Socket等服务器</p>\n</li>\n</ul>\n<p>所以，作为前端开发工程师，Node.js已经是我们必须掌握的核心技术。</p>\n<h3 id=\"2-3-Node-js的安装\"><a href=\"#2-3-Node-js的安装\" class=\"headerlink\" title=\"2.3. Node.js的安装\"></a>2.3. Node.js的安装</h3><h4 id=\"2-3-1-Node-js下载安装\"><a href=\"#2-3-1-Node-js下载安装\" class=\"headerlink\" title=\"2.3.1. Node.js下载安装\"></a>2.3.1. Node.js下载安装</h4><p>Node.js是在2009年诞生的，目前最新的版本是分别是12.18.4以及14.12.0：</p>\n<ul>\n<li>LTS版本：相对稳定一些，推荐线上环境使用该版本；</li>\n<li>Current版本：最新的Node版本，包含很多新特性；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0xlb6z8syRPdY3icwZYunKxGibLO3gIyibRicz5S4ORp8e8OpybYHKnBxJg/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">node的版本</p>\n<p>这些我们选择什么版本呢？</p>\n<ul>\n<li>如果你是学习使用，可以选择current版本；</li>\n<li>如果你是公司开发，建议选择LTS版本；</li>\n</ul>\n<p>Node的安装方式有很多：</p>\n<ul>\n<li>可以借助于一些操作系统上的软件管理工具，比如Mac上的homebrew，Linux上的yum、dnf等；</li>\n<li>也可以直接下载对应的安装包下载安装；</li>\n</ul>\n<p>我们选择下载安装，下载自己操作系统的安装包直接安装就可以了：</p>\n<ul>\n<li>window选择.msi安装包，Mac选择.pkg安装包，Linux会在后续部署中讲解；</li>\n<li>安装过程中会配置环境变量；</li>\n<li>并且安装node过程中会安装npm（<em>Node Package Manager</em>）工具；</li>\n</ul>\n<p>我当前电脑上的版本：</p>\n<ul>\n<li>node版本是12.16.1；</li>\n<li>npm版本是6.14.8；</li>\n</ul>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0ywcBhHXMp5vgSgTQWsqmq1JxrvkPNqaMWTH7dJepoo568KcamnJg3g/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">我的node版本</p>\n<p>你应该已经发现，我这里使用的版本并不是Node的最新版本，无论是LTS或者Current：</p>\n<ul>\n<li>正好借助这里，和大家讲一下node的版本升级；</li>\n</ul>\n<h4 id=\"2-3-2-Node-js版本管理\"><a href=\"#2-3-2-Node-js版本管理\" class=\"headerlink\" title=\"2.3.2. Node.js版本管理\"></a>2.3.2. Node.js版本管理</h4><p>在实际开发学习中，我们只需要使用一个Node版本来开发或者学习即可。</p>\n<p>但是，如果你希望通过可以快速更新或切换多个版本时，可以借助于一些工具：</p>\n<ul>\n<li>nvm：Node Version Manager；</li>\n<li>n：Interactively Manage Your Node.js Versions（交互式管理你的Node.js版本）</li>\n</ul>\n<p>这里我演示管理工具：n</p>\n<ul>\n<li>n是TJ方便node的版本管理，专门开发的；</li>\n<li>官方介绍是：n -  Interactively Manage Your Node.js Versions（交互式管理你的Node.js版本）</li>\n</ul>\n<p>安装n：直接使用npm安装即可</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 安装工具n\nnpm install -g n\n# 查看安装的版本\nn --version</code></pre>\n\n<p>安装最新的lts版本：</p>\n<ul>\n<li>前面添加的sudo是权限问题；</li>\n<li>可以两个版本都安装，之后我们可以通过n快速在两个版本间切换；</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 安装最新的lts版本\nn lts\n\n# 安装最新的版本\nn latest</code></pre>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw01l41FBS8sDZYclR0cTB6FCuQJjptRzc3xoLwajFriaJiaVmrRIEiaO7PQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">安装lts版本</p>\n<p>查看所有的版本，并且选择要使用的版本：</p>\n<ul>\n<li>可以上下选择想使用的版本</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 查看所有的版本\nn</code></pre>\n\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0aoBbgIUcG1bzUgn2eHd5hbw5LUoFH9e9eTPib940eA7dP9d7kcosGJQ/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">查看和选择所有的版本</p>\n<p>查看当前Node的版本：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_jpg/O8xWXzAqXusHFTAWoQP8JvEX0wfuorw0gOicVkLUIgr0IHSXMSV6X9eiabSRQ3Bz0mCoGQRwHFpOMHJbREKJww5A/640?wx_fmt=jpeg&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"图片\">查看当前的版本</p>\n<p>问题：这两个工具都不支持window</p>\n<ul>\n<li>n：n is not supported natively on Windows.</li>\n<li>nvm：nvm does not support Windows</li>\n</ul>\n<p>Window的同学怎么办？</p>\n<ul>\n<li>1.并不是每个人都需要安装多个版本，在课堂上我会以最新的Current版本讲解几乎所有内容；</li>\n<li>2.接下来我会在Mac上面演练n工具的使用，windows上可以使用nvm-window来完成；</li>\n</ul>\n","text":"一.JavaScript运行原理1.1. Atwood定律官方对Node.js的定义： Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 什么是JavaScript运行环境？ 为什么JavaScript需要特别的运行环境呢？ 什么又是Jav...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-JavaScript%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">一.JavaScript运行原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-Atwood%E5%AE%9A%E5%BE%8B\"><span class=\"toc-text\">1.1. Atwood定律</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8\"><span class=\"toc-text\">1.2. 浏览器内核</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-JavaScript%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">1.3. JavaScript引擎</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-V8%E5%BC%95%E6%93%8E\"><span class=\"toc-text\">1.4. V8引擎</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-Node-js%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.1. Node.js是什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Node-js%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.2. Node.js可以做什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-Node-js%E7%9A%84%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.3. Node.js的安装</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-1-Node-js%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.3.1. Node.js下载安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-2-Node-js%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">2.3.2. Node.js版本管理</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node基础二","uid":"a6a1fb5bcb751ccc4e9548f88f960a7a","slug":"node/base/Node基础二","date":"2022-10-01T04:06:20.000Z","updated":"2023-06-30T02:33:00.405Z","comments":true,"path":"api/articles/node/base/Node基础二.json","keywords":"chriswood blogs sharing","cover":[],"text":"二.node基础1.1. JavaScript文件执行如果我们编写一个js文件，里面存放JavaScript代码，如何来执行它呢？ &#x2F;&#x2F; 1.直接打印一段文字 console.log(&quot;我是一段JavaScript代码&quot;); &#x2F;&...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}
{"title":"Nginx常用操作及配置","uid":"18dd7f629894be8963e8c1c6b1ef8456","slug":"nginx/Nginx常用操作及配置","date":"2022-09-30T15:24:15.000Z","updated":"2023-03-06T01:53:15.000Z","comments":true,"path":"api/articles/nginx/Nginx常用操作及配置.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h1 id=\"Nginx常用操作及配置\"><a href=\"#Nginx常用操作及配置\" class=\"headerlink\" title=\"Nginx常用操作及配置\"></a>Nginx常用操作及配置</h1><h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#强制停止Nginx\nkill -9 nginx \nstart nginx\nnginx -s quit\nnginx -s reload</code></pre>\n\n<h3 id=\"常见配置\"><a href=\"#常见配置\" class=\"headerlink\" title=\"常见配置\"></a>常见配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#指定运行worker进程的用户和组\nuser  nginx;\n#指定nginx守护进程的pid文件\npid &#x2F;path&#x2F;to&#x2F;pid_file;\nworker_rlimit_nofile number; #设置所有worker进程最大可以打开的文件数，默认为1024\nworker_rlimit_core size; #指明所有worker进程所能够使用的总体的最大核心文件大小，保持默认即可\n# 启动n个worker进程，这里的n为了避免上下文切换，通常设置为cpu总核心数-1或等于总核心数\nworker_processes 1;\nworker_cpu_affinity cpumask …; #将进程绑定到某cpu中，避免频繁刷新缓存\n#cpumask：使用8位二进制表示cpu核心，如：\n#0000 0001 第一颗cpu核心\n#0000 0010 第二颗cpu核心\n#0000 0100 第三颗cpu核心\n#0000 1000 第四颗cpu核心\n#0001 0000 第五颗cpu核心\n#0010 0000 第六颗cpu核心\n#0100 0000 第七颗cpu核心\n#1000 0000 第八颗cpu核心\ntimer_resolution interval; #计时器解析度。降低此值，可减少gettimeofday()系统调用的次数\nworker_priority number; #指明worker进程的nice值\n\nevents &#123;\n  #master调度用户请求至各worker进程时使用的负载均衡锁；on表示能让多个worker轮流地、序列化地去响应新请求\n  accept_mutex &#123;off|on&#125;; \n  # 每个进程的最大连接数量\n  worker_connections 1024;\n&#125;\n\nhttp &#123;\n  include mime.types;\n  default_type application&#x2F;octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n\n  # 演示如何强制http跳转https\n  server &#123;\n    listen 80;\n    server_name test.com;\n\n    # http强制跳转到https\n    rewrite ^(.*)$ https:&#x2F;&#x2F;$server_name$1 permanent;\n  &#125;\n\n  # 演示如何配置微信支付的校验文件\n  server &#123;\n    listen 80;\n    server_name localhost;\n\n    # 默认根路径\n    location &#x2F; &#123;\n      root index.html;\n    &#125;\n    # 微信支付校验文件，可以直接配置访问名称\n    location ^~&#x2F;MP_verify_2g3uEjrB5B2LIbNl.txt &#123;\n      alias &#x2F;home&#x2F;MP_verify_2g3uEjrB5B2LIbNl.txt;\n    &#125;\n    # 微信支付校验文件，也可以通过正则配置\n    location ~^&#x2F;MP_verify_[a-zA-Z0-9]*\\.(txt)$ &#123;\n      root &#x2F;home&#x2F;;\n      rewrite ^&#x2F;home&#x2F;(.txt)$ &#x2F;home&#x2F;$1 last;\n    &#125;\n  &#125;\n\n  # 演示root和alias两种配置静态资源的区别\n  server &#123;\n    listen 80;\n    server_name localhost;\n\n    # 用root方式，location中的路径会拼加到root的地址后面\n    # 请求路径为：http:&#x2F;&#x2F;localhost:8080&#x2F;files&#x2F;index.jpg    实际访问为：&#x2F;home&#x2F;files&#x2F;index.jpg\n    location ~^&#x2F;files&#x2F; &#123;\n      root &#x2F;home&#x2F;;\n      index index.html index.htm;\n    &#125;\n    # 用alias方式，location中的路径不会拼加到alias的地址后面\n    # 这请求路径为：http:&#x2F;&#x2F;localhost:8080&#x2F;files&#x2F;index.jpg    实际访问为：&#x2F;home&#x2F;index.jpg\n    location ~^&#x2F;files&#x2F; &#123;\n      alias &#x2F;home&#x2F;;\n      index index.html index.htm;\n    &#125;\n  &#125;\n\n  # 演示请求后台接口代理配置\n  server &#123;\n    listen 8080;\n    server_name localhost;\n\n    #################### 第一种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际指向为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第二种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第三种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;usergetUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第四种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n  &#125;\n\n  # 演示前端项目部署加访问前缀的nginx配置\n  server &#123;\n    listen 8090;\n    server_name localhost;\n\n    # 部署路径：&#x2F;home&#x2F;web&#x2F;my_demo\n    # 访问路径为：http:&#x2F;&#x2F;localhost:8090&#x2F;\n    location &#x2F; &#123;\n      try_files $uri $uri&#x2F; &#x2F;index.html;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      root &#x2F;home&#x2F;web&#x2F;my_demo&#x2F;;\n      index index.html index.htm;\n    &#125;\n\n    # 部署路径：&#x2F;home&#x2F;web&#x2F;my_demo\n    # 访问路径为：http:&#x2F;&#x2F;localhost:8090&#x2F;my_demo&#x2F;\n    # 如果location路径最后没有配置斜杠，则浏览器输入访问地址后，路径最后会自动拼一个斜杠\n    location ^~&#x2F;my_demo&#x2F; &#123;\n      try_files $uri $uri&#x2F; &#x2F;my_demo&#x2F;index.html;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      root &#x2F;home&#x2F;web&#x2F;;\n      index index.html index.htm;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n<p>##nginx.conf配置</p>\n<h3 id=\"nginx的HTTP配置主要包括四个区块\"><a href=\"#nginx的HTTP配置主要包括四个区块\" class=\"headerlink\" title=\"nginx的HTTP配置主要包括四个区块\"></a>nginx的HTTP配置主要包括四个区块</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">http &#123;&#x2F;&#x2F;协议级别\n  include mime.types;\n  default_type application&#x2F;octet-stream;\n  keepalive_timeout 65;\n  gzip on;\n  upstream &#123;&#x2F;&#x2F;负载均衡配置\n    …\n  &#125;\n  server &#123;&#x2F;&#x2F;服务器级别，每个server类似于httpd中的一个\n    listen 80;\n    server_name localhost;\n    location &#x2F; &#123;&#x2F;&#x2F;请求级别，类似于httpd中的，用于定义URL与本地文件系统的映射关系\n      root html;\n      index index.html index.htm;\n    &#125; \n  &#125;\n&#125;</code></pre>\n<h3 id=\"location配置\"><a href=\"#location配置\" class=\"headerlink\" title=\"location配置\"></a>location配置</h3><h4 id=\"location-匹配优先级\"><a href=\"#location-匹配优先级\" class=\"headerlink\" title=\"location 匹配优先级\"></a>location 匹配优先级</h4><ul>\n<li>&#x3D; 精确匹配会第一个被处理。如果发现精确匹配，nginx停止搜索其他匹配。 </li>\n<li>普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。</li>\n<li>^~ 则只匹配该规则，nginx停止搜索其他匹配，否则nginx会继续处理其他location指令。</li>\n<li>最后匹配理带有”<del>“和”</del>*”的指令，如果找到相应的匹配，则nginx停止搜索其他匹配；当没有正则表达式或者没有正则表达式被匹配的情况下，那么匹配程度最高的逐字匹配指令会被使用。</li>\n</ul>\n<h4 id=\"location规则\"><a href=\"#location规则\" class=\"headerlink\" title=\"location规则\"></a>location规则</h4><h5 id=\"1-location和proxy-pass都带-x2F-，则真实地址不带location匹配目录\"><a href=\"#1-location和proxy-pass都带-x2F-，则真实地址不带location匹配目录\" class=\"headerlink\" title=\"1.location和proxy_pass都带&#x2F;，则真实地址不带location匹配目录\"></a>1.location和proxy_pass都带&#x2F;，则真实地址不带location匹配目录</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api&#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;;\n    #访问地址：example.taotaozn.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"2-location不带-x2F-，proxy-pass带-x2F-，则真实地址会带-x2F\"><a href=\"#2-location不带-x2F-，proxy-pass带-x2F-，则真实地址会带-x2F\" class=\"headerlink\" title=\"2.location不带&#x2F;，proxy_pass带&#x2F;，则真实地址会带&#x2F;\"></a>2.location不带&#x2F;，proxy_pass带&#x2F;，则真实地址会带&#x2F;</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;;\n    #访问地址： example.taotaozn.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"3-location带-x2F-，proxy-pass不带-x2F-，则真实地址会带location匹配目录-x2F-api-x2F\"><a href=\"#3-location带-x2F-，proxy-pass不带-x2F-，则真实地址会带location匹配目录-x2F-api-x2F\" class=\"headerlink\" title=\"3.location带&#x2F;，proxy_pass不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;\"></a>3.location带&#x2F;，proxy_pass不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api&#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;\n    #访问地址： example.taotaozn.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"4-location和proxy-pass都不带-x2F-，则真实地址会带location匹配目录-x2F-api-x2F\"><a href=\"#4-location和proxy-pass都不带-x2F-，则真实地址会带location匹配目录-x2F-api-x2F\" class=\"headerlink\" title=\"4.location和proxy_pass都不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;\"></a>4.location和proxy_pass都不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;\n    #访问地址： www.test.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"5-同1，location和proxy-pass都带-x2F-，但-proxy-pass带地址\"><a href=\"#5-同1，location和proxy-pass都带-x2F-，但-proxy-pass带地址\" class=\"headerlink\" title=\"5.同1，location和proxy_pass都带&#x2F;，但 proxy_pass带地址\"></a>5.同1，location和proxy_pass都带&#x2F;，但 proxy_pass带地址</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api&#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server&#x2F;;\n    #访问地址： www.test.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"6-同2，但-proxy-pass带地址，则真实地址会多个-x2F\"><a href=\"#6-同2，但-proxy-pass带地址，则真实地址会多个-x2F\" class=\"headerlink\" title=\"6.同2，但 proxy_pass带地址，则真实地址会多个&#x2F;\"></a>6.同2，但 proxy_pass带地址，则真实地址会多个&#x2F;</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server&#x2F;;\n    #访问地址： www.test.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server&#x2F;&#x2F;upload\n&#125;</code></pre>\n<h5 id=\"7-同3，但-proxy-pass带地址，则真实地址会直接连起来\"><a href=\"#7-同3，但-proxy-pass带地址，则真实地址会直接连起来\" class=\"headerlink\" title=\"7.同3，但 proxy_pass带地址，则真实地址会直接连起来\"></a>7.同3，但 proxy_pass带地址，则真实地址会直接连起来</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api&#x2F; &#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server;\n    #访问地址： www.test.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;serverupload\n&#125;</code></pre>\n<h5 id=\"8-同4，但-proxy-pass带地址，则真实地址匹配地址会替换location匹配目录\"><a href=\"#8-同4，但-proxy-pass带地址，则真实地址匹配地址会替换location匹配目录\" class=\"headerlink\" title=\"8.同4，但 proxy_pass带地址，则真实地址匹配地址会替换location匹配目录\"></a>8.同4，但 proxy_pass带地址，则真实地址匹配地址会替换location匹配目录</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F;api&#123;\n    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server;\n    #访问地址： www.test.com&#x2F;api&#x2F;upload--&gt;http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;server&#x2F;upload\n&#125;</code></pre>\n<h4 id=\"location语法\"><a href=\"#location语法\" class=\"headerlink\" title=\"location语法\"></a>location语法</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">location [&#x3D;||*|^~] &#x2F;uri&#x2F; &#123; … &#125;</code></pre>\n<ul>\n<li>&#x3D; 严格匹配。如果请求匹配这个location，那么将停止搜索并立即处理此请求</li>\n<li>~ 区分大小写匹配(可用正则表达式)</li>\n<li>~* 不区分大小写匹配(可用正则表达式)</li>\n<li>!~ 区分大小写不匹配</li>\n<li>!~* 不区分大小写不匹配</li>\n<li>^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式</li>\n</ul>\n<h4 id=\"alias与root的区别\"><a href=\"#alias与root的区别\" class=\"headerlink\" title=\"alias与root的区别\"></a>alias与root的区别</h4><ul>\n<li>root 实际访问文件路径会拼接URL中的路径</li>\n<li>alias 实际访问文件路径不会拼接URL中的路径<pre class=\"line-numbers language-none\"><code class=\"language-none\">location ^~ &#x2F;scootor&#x2F; &#123; \n    alias &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;static&#x2F;; \n&#125;\n#请求：http:&#x2F;&#x2F;example.taotaozn.com&#x2F;scootor&#x2F;index.html\n#实际访问：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;static&#x2F;index.html文件\n\nlocation ^~ &#x2F;scootor&#x2F; &#123; \n    root &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;; \n&#125;\n#请求：http:&#x2F;&#x2F;example.taotaozn.com&#x2F;scootor&#x2F;index.html\n#实际访问：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;html&#x2F;scootor&#x2F;index.html文件</code></pre></li>\n</ul>\n<h3 id=\"rewrite\"><a href=\"#rewrite\" class=\"headerlink\" title=\"rewrite\"></a>rewrite</h3><p>语法：rewrite regex replacement flag<br>应用于：server location location中的if</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location  &#x2F;images &#123;\n    rewrite ^&#x2F;images&#x2F;(.*\\.jpg)$ &#x2F;imgs&#x2F;$1 break;\n&#125;</code></pre>\n<h5 id=\"last和break关键字的区别\"><a href=\"#last和break关键字的区别\" class=\"headerlink\" title=\"last和break关键字的区别\"></a>last和break关键字的区别</h5><ul>\n<li>last 和 break 当出现在location 之外时，两者的作用是一致的没有任何差异</li>\n<li>last 和 break 当出现在location 内部时：<ul>\n<li>last: rewrite后会跳出location作用域，重新开始再走一次刚才的行为，<br>当前的匹配结束，继续下一个匹配，最多匹配10个到20个，一旦此rewrite规则重写完成后，<br>就不再被后面其它的rewrite规则进行处理 而是由UserAgent重新对重写后的URL再一次发起请求，<br>并从头开始执行类似的过程</li>\n<li>break: rewrite后不会跳出location 作用域，它的生命也在这个location中终结<br>中止Rewrite，不再继续匹配，一旦此rewrite规则重写完成后，由UserAgent对新的URL重新发起请求，<br>且不再会被当前location内的任何rewrite规则所检查</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"permanent和redirect关键字的区别\"><a href=\"#permanent和redirect关键字的区别\" class=\"headerlink\" title=\"permanent和redirect关键字的区别\"></a>permanent和redirect关键字的区别</h5><ul>\n<li>rewrite … permanent 永久性重定向，请求日志中的状态码为301</li>\n<li>rewrite … redirect 临时重定向，请求日志中的状态码为302</li>\n</ul>\n<h4 id=\"try-files\"><a href=\"#try-files\" class=\"headerlink\" title=\"try_files\"></a>try_files</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">location &#x2F; &#123;\n    try_files $uri $uri&#x2F; &#x2F;index.html?$args;\n&#125;\n# 语法：try_files file1 [file2 ... filen] fallback</code></pre>\n\n<h4 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h4><p>语法：if (condition) {…}<br>应用于：server和location</p>\n<h5 id=\"常见condition\"><a href=\"#常见condition\" class=\"headerlink\" title=\"常见condition\"></a>常见condition</h5><ul>\n<li>变量名（变量值为空串，或者以“0”开始，则为false，其它的均为true）</li>\n<li>以变量为操作数构成的比较表达式（可使用&#x3D;，!&#x3D;类似的比较操作符进行测试）</li>\n<li>正则表达式的模式匹配操作<ul>\n<li>~：区分大小写的模式匹配检查</li>\n<li>~*：不区分大小写的模式匹配检查</li>\n<li>!<del>和 !</del>*：对上面两种取反</li>\n</ul>\n</li>\n<li>指定路径为文件的可能性（-f，!-f)</li>\n<li>指定路径为目录的可能性（-d，!-d）</li>\n<li>文件的存在性（-e，!-e）</li>\n<li>文件是否有执行权限（-x，!-x）</li>\n</ul>\n<h6 id=\"浏览器实现分离案例\"><a href=\"#浏览器实现分离案例\" class=\"headerlink\" title=\"浏览器实现分离案例\"></a>浏览器实现分离案例</h6><pre class=\"line-numbers language-none\"><code class=\"language-none\">if ($http_user_agent ~ Firefox) &#123;\n  rewrite ^(.*)$ &#x2F;firefox&#x2F;$1 break;\n&#125;\n\nif ($http_user_agent ~ MSIE) &#123;\n  rewrite ^(.*)$ &#x2F;msie&#x2F;$1 break;\n&#125;\n\nif ($http_user_agent ~ Chrome) &#123;\n  rewrite ^(.*)$ &#x2F;chrome&#x2F;$1 break;\n&#125;</code></pre>\n\n<h4 id=\"nginx防盗链配置\"><a href=\"#nginx防盗链配置\" class=\"headerlink\" title=\"nginx防盗链配置\"></a>nginx防盗链配置</h4><p>语法：valid_referers [none|blocked|server_names] … 默认值：none<br>这个指令在referer头的基础上为 $invalid_referer 变量赋值，其值为0或1。<br>如果valid_referers列表中没有Referer头的值， $invalid_referer将被设置为1<br>应用于：server和location</p>\n<h5 id=\"防盗链案例\"><a href=\"#防盗链案例\" class=\"headerlink\" title=\"防盗链案例\"></a>防盗链案例</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">location ~* \\.(jpg|gif|jpeg|png)$ &#123;\n  valid_referers none blocked www.test.com;\n  if ($invalid_referer) &#123;\n    rewrite ^&#x2F; http:&#x2F;&#x2F;www.test.com&#x2F;403.html;\n  &#125;\n&#125;</code></pre>\n\n<h4 id=\"nginx的cors配置\"><a href=\"#nginx的cors配置\" class=\"headerlink\" title=\"nginx的cors配置\"></a>nginx的cors配置</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    listen       80;\n    server_name  localhost;\n    #判断请求域名是否是指定域名的子域名，如果是，则将内置域名赋值给内置变量$allow_url，便于指定Access-Control-Allow-Origin\n    if ( $http_origin ~ http:&#x2F;&#x2F;(.*).taotaozn.com)&#123;\n          set $allow_url $http_origin;\n    &#125;\n    #是否允许请求带有验证信息\n    add_header Access-Control-Allow-Credentials true;\n    #允许跨域访问的域名,可以是一个域的列表，也可以是通配符*\n    add_header Access-Control-Allow-Origin  $allow_url;\n    #允许脚本访问的返回头\n    add_header Access-Control-Allow-Headers &#39;x-requested-with,content-type,Cache-Control,Pragma,Date,x-timestamp&#39;;\n    #允许使用的请求方法，以逗号隔开\n    add_header Access-Control-Allow-Methods &#39;POST,GET,OPTIONS,PUT,DELETE&#39;;\n    #允许自定义的头部，以逗号隔开,大小写不敏感\n    add_header Access-Control-Expose-Headers &#39;WWW-Authenticate,Server-Authorization&#39;;\n    #P3P支持跨域cookie操作\n    add_header P3P &#39;policyref&#x3D;&quot;&#x2F;w3c&#x2F;p3p.xml&quot;, CP&#x3D;&quot;NOI DSP PSAa OUR BUS IND ONL UNI COM NAV INT LOC&quot;&#39;;\n    add_header test  1;\n\n    if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;\n         return 204;\n     &#125;\n    location  &#x2F; &#123;\n         root html;\n    &#125;\n    location &#x3D; &#x2F;demo&#x2F;test1.html &#123;\n         proxy_pass http:&#x2F;&#x2F;www.tataozn.com&#x2F;demo&#x2F;test1.html;\n    &#125;\n    \n    error_page   500 502 503 504  &#x2F;50x.html;\n    location  &#x2F;50x.html &#123;\n        root   html;\n    &#125;\n&#125;</code></pre>\n\n<h4 id=\"nginx通过expires配置缓存\"><a href=\"#nginx通过expires配置缓存\" class=\"headerlink\" title=\"nginx通过expires配置缓存\"></a>nginx通过expires配置缓存</h4><p>语法：expires [time|@time-of-day|epoch|max|off]<br>默认值：expires off<br>应用于：http、server和location</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：expires仅仅适用于200, 204, 301, 302,和304应答</p></blockquote>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#经常使用的配置\n#告知浏览器缓存此文件并设置缓存时间\nlocation ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ &#123;\n    expires 10s;#缓存2秒\n    #expires 2m;#缓存2分钟\n    #expires 2h;#缓存2小时\n    #expires 2d;#缓存2天\n    root   html;\n&#125;</code></pre>\n\n<h4 id=\"nginx的gzip配置\"><a href=\"#nginx的gzip配置\" class=\"headerlink\" title=\"nginx的gzip配置\"></a>nginx的gzip配置</h4><p>语法：gzip on|off<br>默认值：gzip off<br>应用于：http, server, location, location中的if</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 搭配\ngzip_types：默认值为gzip_types text&#x2F;html ；为除“text&#x2F;html”之外的MIME类型启用压缩，“text&#x2F;html”总是会被压缩。\ngzip_min_length：默认值为gzip_min_length 0 ；设置被压缩的最小请求，单位为bytes。少于这个值大小的请求将不会被压缩，这个值由请求头中的Content-Length字段决定。\ngzip_buffers ：默认值为gzip_buffers 4 4k&#x2F;8k ；指定缓存压缩应答的缓冲区数量和大小，如果不设置，一个缓存区的大小为分页大小，根据环境的不同可能是4k或8k。\ngzip_comp_level ：默认值为gzip_comp_level 1 ；指定压缩等级，其值从1到9，1为最小化压缩（处理速度快），9为最大化压缩（处理速度慢）。</code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">location  &#x2F; &#123;\n    # 对js、css、html格式的文件启用gzip压缩功能,图片格式由于压缩比例太小，且压缩耗费cpu不建议压缩\n    gzip on; # 启用gzip压缩，默认是off，不启用\n    gzip_types application&#x2F;javascript text&#x2F;css;#为除“text&#x2F;html”之外的MIME类型启用压缩，“text&#x2F;html”总是会被压缩。\n    gzip_min_length 1024; # 所压缩文件的最小值，小于这个的不会压缩\n    gzip_buffers 4 1k; # 设置压缩响应的缓冲块的大小和个数，默认是内存一个页的大小\n    gzip_comp_level 1; # 压缩水平，默认1。取值范围1-9，取值越大压缩比率越大，但越耗cpu时间\n    root  html;\n&#125;</code></pre>\n","text":"Nginx常用操作及配置常用操作#强制停止Nginx kill -9 nginx start nginx nginx -s quit nginx -s reload 常见配置#指定运行worker进程的用户和组 user nginx; #指定nginx守护进程的pid文件 pid...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Nginx","slug":"Nginx","count":2,"path":"api/categories/Nginx.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":2,"path":"api/tags/Nginx.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Nginx常用操作及配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">常见配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#nginx%E7%9A%84HTTP%E9%85%8D%E7%BD%AE%E4%B8%BB%E8%A6%81%E5%8C%85%E6%8B%AC%E5%9B%9B%E4%B8%AA%E5%8C%BA%E5%9D%97\"><span class=\"toc-text\">nginx的HTTP配置主要包括四个区块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#location%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">location配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#location-%E5%8C%B9%E9%85%8D%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">location 匹配优先级</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#location%E8%A7%84%E5%88%99\"><span class=\"toc-text\">location规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-location%E5%92%8Cproxy-pass%E9%83%BD%E5%B8%A6-x2F-%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%B8%8D%E5%B8%A6location%E5%8C%B9%E9%85%8D%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">1.location和proxy_pass都带&#x2F;，则真实地址不带location匹配目录</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-location%E4%B8%8D%E5%B8%A6-x2F-%EF%BC%8Cproxy-pass%E5%B8%A6-x2F-%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%BC%9A%E5%B8%A6-x2F\"><span class=\"toc-text\">2.location不带&#x2F;，proxy_pass带&#x2F;，则真实地址会带&#x2F;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-location%E5%B8%A6-x2F-%EF%BC%8Cproxy-pass%E4%B8%8D%E5%B8%A6-x2F-%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%BC%9A%E5%B8%A6location%E5%8C%B9%E9%85%8D%E7%9B%AE%E5%BD%95-x2F-api-x2F\"><span class=\"toc-text\">3.location带&#x2F;，proxy_pass不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-location%E5%92%8Cproxy-pass%E9%83%BD%E4%B8%8D%E5%B8%A6-x2F-%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%BC%9A%E5%B8%A6location%E5%8C%B9%E9%85%8D%E7%9B%AE%E5%BD%95-x2F-api-x2F\"><span class=\"toc-text\">4.location和proxy_pass都不带&#x2F;，则真实地址会带location匹配目录&#x2F;api&#x2F;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#5-%E5%90%8C1%EF%BC%8Clocation%E5%92%8Cproxy-pass%E9%83%BD%E5%B8%A6-x2F-%EF%BC%8C%E4%BD%86-proxy-pass%E5%B8%A6%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">5.同1，location和proxy_pass都带&#x2F;，但 proxy_pass带地址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-%E5%90%8C2%EF%BC%8C%E4%BD%86-proxy-pass%E5%B8%A6%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%BC%9A%E5%A4%9A%E4%B8%AA-x2F\"><span class=\"toc-text\">6.同2，但 proxy_pass带地址，则真实地址会多个&#x2F;</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-%E5%90%8C3%EF%BC%8C%E4%BD%86-proxy-pass%E5%B8%A6%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E4%BC%9A%E7%9B%B4%E6%8E%A5%E8%BF%9E%E8%B5%B7%E6%9D%A5\"><span class=\"toc-text\">7.同3，但 proxy_pass带地址，则真实地址会直接连起来</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#8-%E5%90%8C4%EF%BC%8C%E4%BD%86-proxy-pass%E5%B8%A6%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%88%99%E7%9C%9F%E5%AE%9E%E5%9C%B0%E5%9D%80%E5%8C%B9%E9%85%8D%E5%9C%B0%E5%9D%80%E4%BC%9A%E6%9B%BF%E6%8D%A2location%E5%8C%B9%E9%85%8D%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">8.同4，但 proxy_pass带地址，则真实地址匹配地址会替换location匹配目录</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#location%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">location语法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#alias%E4%B8%8Eroot%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">alias与root的区别</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rewrite\"><span class=\"toc-text\">rewrite</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#last%E5%92%8Cbreak%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">last和break关键字的区别</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#permanent%E5%92%8Credirect%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">permanent和redirect关键字的区别</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#try-files\"><span class=\"toc-text\">try_files</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if\"><span class=\"toc-text\">if</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81condition\"><span class=\"toc-text\">常见condition</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E7%A6%BB%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">浏览器实现分离案例</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nginx%E9%98%B2%E7%9B%97%E9%93%BE%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">nginx防盗链配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%98%B2%E7%9B%97%E9%93%BE%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">防盗链案例</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nginx%E7%9A%84cors%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">nginx的cors配置</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nginx%E9%80%9A%E8%BF%87expires%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">nginx通过expires配置缓存</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#nginx%E7%9A%84gzip%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">nginx的gzip配置</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node基础一","uid":"16ea75a74e45c427c7de22a19d8e1e05","slug":"node/base/Node基础一","date":"2022-09-30T15:33:43.000Z","updated":"2023-06-09T06:14:42.926Z","comments":true,"path":"api/articles/node/base/Node基础一.json","keywords":"chriswood blogs sharing","cover":[],"text":"一.JavaScript运行原理1.1. Atwood定律官方对Node.js的定义： Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 什么是JavaScript运行环境？ 为什么JavaScript需要特别的运行环境呢？ 什么又是Jav...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}
{"title":"Nginx常用操作及配置","uid":"18dd7f629894be8963e8c1c6b1ef8456","slug":"nginx/Nginx常用操作及配置","date":"2022-09-30T15:24:15.000Z","updated":"2022-10-01T05:16:43.066Z","comments":true,"path":"api/articles/nginx/Nginx常用操作及配置.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h1 id=\"Nginx常用操作及配置\"><a href=\"#Nginx常用操作及配置\" class=\"headerlink\" title=\"Nginx常用操作及配置\"></a>Nginx常用操作及配置</h1><h3 id=\"常用操作\"><a href=\"#常用操作\" class=\"headerlink\" title=\"常用操作\"></a>常用操作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#强制停止Nginx\npkill -9 nginx \nstart nginx\nnginx -s quit\nnginx -s reload</code></pre>\n\n<h3 id=\"常见配置\"><a href=\"#常见配置\" class=\"headerlink\" title=\"常见配置\"></a>常见配置</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 进程数量\nworker_processes 1;\n\nevents &#123;\n  # 最大连接数量\n  worker_connections 1024;\n&#125;\n\nhttp &#123;\n  include mime.types;\n  default_type application&#x2F;octet-stream;\n  sendfile on;\n  keepalive_timeout 65;\n\n  # 演示如何强制http跳转https\n  server &#123;\n    listen 80;\n    server_name test.com;\n\n    # http强制跳转到https\n    rewrite ^(.*)$ https:&#x2F;&#x2F;$server_name$1 permanent;\n  &#125;\n\n  # 演示如何配置微信支付的校验文件\n  server &#123;\n    listen 80;\n    server_name localhost;\n\n    # 默认根路径\n    location &#x2F; &#123;\n      root index.html;\n    &#125;\n    # 微信支付校验文件，可以直接配置访问名称\n    location ^~&#x2F;MP_verify_2g3uEjrB5B2LIbNl.txt &#123;\n      alias &#x2F;home&#x2F;MP_verify_2g3uEjrB5B2LIbNl.txt;\n    &#125;\n    # 微信支付校验文件，也可以通过正则配置\n    location ~^&#x2F;MP_verify_[a-zA-Z0-9]*\\.(txt)$ &#123;\n      root &#x2F;home&#x2F;;\n      rewrite ^&#x2F;home&#x2F;(.txt)$ &#x2F;home&#x2F;$1 last;\n    &#125;\n  &#125;\n\n  # 演示root和alias两种配置静态资源的区别\n  server &#123;\n    listen 80;\n    server_name localhost;\n\n    # 用root方式，location中的路径会拼加到root的地址后面\n    # 请求路径为：http:&#x2F;&#x2F;localhost:8080&#x2F;files&#x2F;index.jpg    实际访问为：&#x2F;home&#x2F;files&#x2F;index.jpg\n    location ~^&#x2F;files&#x2F; &#123;\n      root &#x2F;home&#x2F;;\n      index index.html index.htm;\n    &#125;\n    # 用alias方式，location中的路径不会拼加到alias的地址后面\n    # 这请求路径为：http:&#x2F;&#x2F;localhost:8080&#x2F;files&#x2F;index.jpg    实际访问为：&#x2F;home&#x2F;index.jpg\n    location ~^&#x2F;files&#x2F; &#123;\n      alias &#x2F;home&#x2F;;\n      index index.html index.htm;\n    &#125;\n  &#125;\n\n  # 演示请求后台接口代理配置\n  server &#123;\n    listen 8080;\n    server_name localhost;\n\n    #################### 第一种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际指向为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;api&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第二种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第三种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;usergetUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n\n    #################### 第四种场景 ####################\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;getUser\n    location ^~&#x2F;api&#x2F; &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n    # 请求路径为：http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;api&#x2F;getUser   实际代理为：http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;&#x2F;getUser\n    location ^~&#x2F;api &#123;\n      proxy_pass http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;user&#x2F;;\n      proxy_set_header Host $http_host; #后台可以获取到完整的ip+端口号\n      proxy_set_header X-Real-IP $remote_addr; #后台可以获取到用户访问的真实ip地址\n    &#125;\n  &#125;\n\n  # 演示前端项目部署加访问前缀的nginx配置\n  server &#123;\n    listen 8090;\n    server_name localhost;\n\n    # 部署路径：&#x2F;home&#x2F;web&#x2F;my_demo\n    # 访问路径为：http:&#x2F;&#x2F;localhost:8090&#x2F;\n    location &#x2F; &#123;\n      try_files $uri $uri&#x2F; &#x2F;index.html;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      root &#x2F;home&#x2F;web&#x2F;my_demo&#x2F;;\n      index index.html index.htm;\n    &#125;\n\n    # 部署路径：&#x2F;home&#x2F;web&#x2F;my_demo\n    # 访问路径为：http:&#x2F;&#x2F;localhost:8090&#x2F;my_demo&#x2F;\n    # 如果location路径最后没有配置斜杠，则浏览器输入访问地址后，路径最后会自动拼一个斜杠\n    location ^~&#x2F;my_demo&#x2F; &#123;\n      try_files $uri $uri&#x2F; &#x2F;my_demo&#x2F;index.html;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header Host $http_host;\n      root &#x2F;home&#x2F;web&#x2F;;\n      index index.html index.htm;\n    &#125;\n  &#125;\n&#125;</code></pre>\n\n","text":"Nginx常用操作及配置常用操作#强制停止Nginx pkill -9 nginx start nginx nginx -s quit nginx -s reload 常见配置# 进程数量 worker_processes 1; events &#123; # 最大连接数量 wo...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/categories/Nginx.json"}],"tags":[{"name":"Nginx","slug":"Nginx","count":1,"path":"api/tags/Nginx.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Nginx%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">Nginx常用操作及配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">常用操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">常见配置</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/2172/6517189_chirswoodcn_1639811236.png!avatar200","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Node基础一","uid":"16ea75a74e45c427c7de22a19d8e1e05","slug":"node/base/Node基础一","date":"2022-09-30T15:33:43.000Z","updated":"2022-10-01T05:16:43.070Z","comments":true,"path":"api/articles/node/base/Node基础一.json","keywords":"chriswood blogs sharing","cover":[],"text":"一.JavaScript运行原理1.1. Atwood定律官方对Node.js的定义： Node.js是一个基于V8 JavaScript引擎的JavaScript运行时环境。 什么是JavaScript运行环境？ 为什么JavaScript需要特别的运行环境呢？ 什么又是Jav...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://portrait.gitee.com/uploads/avatars/user/2172/6517189_chirswoodcn_1639811236.png!avatar200","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}
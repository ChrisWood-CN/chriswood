{"title":"Mysql基础","uid":"e92c64341ee2ef385eda6a1d1f832be9","slug":"mysql/base/Mysql基础","date":"2022-10-01T04:55:09.000Z","updated":"2023-02-08T09:08:40.485Z","comments":true,"path":"api/articles/mysql/base/Mysql基础.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><p>常见数据库</p>\n<p>MYSQL：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。</p>\n<p>Oracle：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。</p>\n<p>DB2 ：IBM公司的数据库产品,收费的。常应用在银行系统中.</p>\n<p>SQLServer：MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。</p>\n<p>SyBase：已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。</p>\n<p>SQLite：嵌入式的小型数据库，应用在手机端。</p>\n<p>常用数据库：MYSQL，Oracle</p>\n<h4 id=\"SQL语句\"><a href=\"#SQL语句\" class=\"headerlink\" title=\"SQL语句\"></a>SQL语句</h4><p>SQL分类：</p>\n<p>数据定义语言：简称DDL(Data Definition Language)，用来定义数据库对象：数据库，表，列等。关键<br>字：create，alter，drop等</p>\n<p>数据操作语言：简称DML(Data Manipulation Language)，用来对数据库中表的记录进行更新。关键<br>字：insert，delete，update等</p>\n<p>数据控制语言：简称DCL(Data Control Language)，用来定义数据库的访问权限和安全级别，及创建用<br>户</p>\n<p>数据查询语言：简称DQL(Data Query Language)，用来查询数据库中表的记录。关键字：select，<br>from，where等</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">int（integer） 整数类型\nbigint （long） 整数类型\ndouble 小数类型\ndecimal（m,d） 指定整数位与小数位长度的小数类型\ndate 日期类型，格式为yyyy-MM-dd，包含年月日，不包含时分秒\ndatetime 日期类型，格式为 YYYY-MM-DD HH:MM:SS，包含年月日时分秒\ntimestamp 日期类型，时间戳\nvarchar（M） 文本类型， M为0~65535之间的整数\njson 8.0以上版本支持json数据类型</code></pre>\n\n<h5 id=\"DDL操作语言-3\"><a href=\"#DDL操作语言-3\" class=\"headerlink\" title=\"DDL操作语言(3%)\"></a>DDL操作语言(3%)</h5><p>数据库操作：database</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#创建数据库\ncreate database 数据库名;\ncreate database 数据库名 character set 字符集;\n#查看所有数据库\nshow databases;\n#查看某个数据库的定义的信息\nshow create database 数据库名;\n#删除数据库\ndrop database 数据库名;\n#查看正在使用的数据库\nselect database();\n#切换数据库\nuse 数据库名;</code></pre>\n\n<p>表操作：table</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#创建表\ncreate table 表名(\n字段名 类型(长度) [约束],##[ ]代表可以省略\n字段名 类型(长度) [约束],\n&#x2F;*约束 对某列数据进行限制\n主键约束--限制某列数据既不能为空也不能重复\n唯一约束--限制某列数据不能重复\n非空约束--限制某列数据不能为空\n*&#x2F;\n...\n字段名 类型(长度) [约束]\n);\nCREATE TABLE category (\ncid INT primary key, #分类ID\ncname VARCHAR(100) #分类名称\n);\n#查看数据库中的所有表\nshow tables;\n#查看表结构\ndesc 表名;\n#删除表\ndrop table 表名;\n#修改表结构格式\n&#x2F;*添加列*&#x2F;  alter table 表名 add 列名 类型(长度) [约束];\n&#x2F;*修改列的类型长度及约束*&#x2F;  alter table 表名 modify 列名 类型(长度) 约束;\n&#x2F;*修改列名*&#x2F; alter table 表名 change 旧列名 新列名 类型(长度) 约束;\n&#x2F;*删除列*&#x2F; alter table 表名 drop 列名;#列中数据一起删除\n&#x2F;*修改表名*&#x2F;rename table 表名 to 新表名;\n&#x2F;*修改表的字符集*&#x2F;alter table 表名 character set 字符集(了解);</code></pre>\n\n<h5 id=\"DML操作语言-7\"><a href=\"#DML操作语言-7\" class=\"headerlink\" title=\"DML操作语言(7%)\"></a>DML操作语言(7%)</h5><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#插入表记录：insert\n-- 向表中插入某些字段\ninsert into 表 (字段1,字段2,字段3..) values (值1,值2,值3..);\n-- 向表中插入所有字段,字段的顺序为创建表时的顺序 \ninsert into 表 values (值1,值2,值3..);#数值类型外其他的字段类型的值必须使用引号(建议单引号)\ninsert into 表 values (值1,值2,值3..),(值1,值2,值3..); #批量插入\ninsert into 表 values [[值1,值2,值3..],[值1,值2,值3..]]; #批量插入\n-- 涉及自增的可以这样用,自增数值会自动覆盖null\ninsert into 表 values (null,值2,值3...);\n#更新表记录：update\nupdate 表名 set 字段名&#x3D;值,字段名&#x3D;值,...;\nupdate 表名 set 字段名&#x3D;值,字段名&#x3D;值,... where 条件;\n#删除符合条件记录：delete  from 表名 [where 条件] 逐行删除,不重置主键自增,再添加数据继续用之前的主键\n#删除表中所有记录: truncate table 表名  把表也删除,重新创建新表,会重置主键自增,重新开始\ndelete from 表名 [where 条件];</code></pre>\n\n<p>扩展</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">show variables like &#39;character%&#39;; #查看所有mysql的编码\nset names gbk;#临时方案 当前窗口有效\n#安装目录下修改my.ini文件，重启服务所有地方生效。</code></pre>\n\n<h6 id=\"SQL约束\"><a href=\"#SQL约束\" class=\"headerlink\" title=\"SQL约束\"></a>SQL约束</h6><p>主键约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#设置主键约束\nfirstname int PRIMARY KEY -- 1.创建表时，在字段描述处，声明指定字段为主键\nCONSTRAINT pk_personID PRIMARY KEY (firstname,lastname)\n-- 2.创建表时，在constraint约束区域，声明指定字段为主键  格式： [constraint 名称] primary key (字段列表)\n-- 关键字constraint可以省略，如果需要为主键命名，constraint不能省略，主键名称一般没用\n-- 字段列表需要使用小括号括住，如果有多字段需要使用逗号分隔。声明两个以上字段为主键，我们称为联合主键\nALTER TABLE persons ADD PRIMARY KEY (firstname,lastname)-- 3.创建表之后，通过修改表结构，声明指定字段为主键\n\n#删除主键约束\nALTER TABLE persons DROP PRIMARY KEY;#扩展 小bug 删除主键约束之后会保留非空约束</code></pre>\n\n<p>自动增长列</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;* auto_increment（自动增长列）关键字，自动增长列类型必须是整形，自动增长列必须为键(一般是主键)。*&#x2F;\np_id int PRIMARY KEY AUTO_INCREMENT,\n#扩展：默认AUTO_INCREMENT 的开始值是 1，如果希望修改起始值，请使用下列 SQL 语法\nALTER TABLE persons AUTO_INCREMENT&#x3D;100\n#删除方式：\n#delete 一条一条删除，不清空auto_increment记录数。\n#truncate 直接将表删除，重新建表，auto_increment将置为零，从新开始。</code></pre>\n\n<p>非空约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\"># NOT NULL 约束强制列不接受 NULL 值\nid_p int NOT NULL,\nlastname varchar(255) NOT NULL</code></pre>\n\n<p>唯一约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*UNIQUE约束唯一标识数据库表中的每条记录.UNIQUE和PRIMARY KEY约束均为列或列集合提供了唯一性的保\n证.PRIMARY KEY拥有自动定义的UNIQUE约束.!!每个表可以有多个UNIQU约束，但是每个表只能有一个PRIMARY KEY约束。*&#x2F;\nid_p int UNIQUE, -- 1.创建表时，在字段描述处声明唯一\nCONSTRAINT 名称 UNIQUE (id_p)-- 2.创建表时，在约束区域声明唯一\nALTER TABLE persons ADD [CONSTRAINT 名称] UNIQUE (id_p)-- 3.创建表后，修改表结构，声明字段唯一\n#如果值为null,则失去了unique约束的意义\n#删除唯一约束\nALTER TABLE persons DROP INDEX 字段名&#x2F;唯一约束名;</code></pre>\n\n<p>默认约束</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#方式一,创建表,列数据类型后面 default &#39;默认值&#39;\ncity varchar(20) default &#39;北京&#39;\n#方式二,修改表结构\nalter table persons modify city varchar(20) default &#39;北京&#39;\n#删除默认约束\nalter table persons modify city varchar(20)</code></pre>\n\n<h6 id=\"数据库密码重置-扩展\"><a href=\"#数据库密码重置-扩展\" class=\"headerlink\" title=\"数据库密码重置(扩展)\"></a>数据库密码重置(扩展)</h6><ol>\n<li><p>停止mysql服务器运行输入services.msc 停止mysql服务</p>\n</li>\n<li><p>在cmd下,输入mysqld –console –skip-grant-tables 启动服务器,出现一下页面,不要关闭该窗口</p>\n</li>\n<li><p>新打开cmd,输入mysql -uroot 不需要密码</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">use mysql;\nupdate user set password&#x3D;password(&#39;abc&#39;) WHERE user&#x3D;&#39;root&#39;;#新密码为abc</code></pre>\n</li>\n<li><p>关闭两个cmd窗口</p>\n</li>\n</ol>\n<h4 id=\"SQL语句-DQL\"><a href=\"#SQL语句-DQL\" class=\"headerlink\" title=\"SQL语句(DQL)\"></a>SQL语句(DQL)</h4><p>简单查询语句</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;* 格式一 查询指定的列 select 列名,列名 from 表名;\n*&#x2F;\nSELECT pid,pname FROM product;\n&#x2F;* 格式二 查询所有列的数据 \n select 列出所有列名 from 表名;\n select * from 表名 &#x2F;&#x2F;工作中很少用,查询数据多,效率慢\n*&#x2F;\nSELECT * FROM product;\n&#x2F;* 格式三 过滤重复的数据 \nselect distinct 字段1,字段二.. from 表名;\ndistinct关键字之后只有一个字段,就会过滤掉这个字段中重复的数据\ndistinct关键字之后又多个字段,多个字段同时满足才会过滤掉\n*&#x2F;\n-- 查询商品价格 过滤掉重复的价格\nSELECT DISTINCT price FROM product;\n-- 查询商品名称和价格 过滤掉名称和价格同时重复的数据\nSELECT DISTINCT pname,price FROM product;\n&#x2F;* 格式四 别名查询 \n1.给表起一个别名:多表查询时使用\n\tselect *|字段 from 表名 [as] 别名;\n2.给表中的字段起别名\n\tselect 字段1 [as] 别名,...字段n [as] 别名 from 表名;\n注意:别名只是对查询结果临时起一个名字,不会改变表中原有的名字;别名中如有特殊符号或者空格,必须用引号包裹起来\n*&#x2F;\nSELECT * FROM product AS p;\nSELECT pname AS 商品名称,price AS 商品价格 FROM product;\nSELECT pname  商品名称,price  &#39;商品 价格&#39; FROM product;\n&#x2F;*\n查询语句中可以直接进行数据计算\n*&#x2F;\nSELECT (1&#x3D;1+1);-- 2\n-- 查询商品名称和商品价格,把价格在查询时+10000\nSELECT pname  商品名称,price+10000  商品价格 FROM product;</code></pre>\n\n<p>条件查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*\n比较运算符 &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D; &lt;&gt;(!&#x3D;);between...and...显示在某一区间的值含头含尾;in(set)显示在in列表中的值;like&#39;_a%&#39;模糊查询,_代表一个字符%代表零个或多个任意字符;is null判断是否为空\n逻辑运算符 and or not\n*&#x2F;</code></pre>\n\n<p>排序查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*通过order by语句，可以将查询出的结果进行排序。暂时放置在select语句的最后。\nSELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;\n#ASC 升序 (默认)\n#DESC 降序\n*&#x2F;\nSELECT * FROM product ORDER BY price DESC,category_id DESC;</code></pre>\n\n<p>聚合查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*\n之前的查询都是横向查询，都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。\n五个聚合函数\ncount：统计指定列不为NULL的记录行数；\nsum：计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0；\nmax：计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；\nmin：计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；\navg：计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0；\n*&#x2F;\nSELECT count(*) FROM product</code></pre>\n\n<p>分组查询</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">SELECT 被份组的字段1,(求和,平均值,个数,最大,最小) FROM 表名 [where 条件 ]GROUP BY 被分组字段 HAVING 分组条件;\n#分组操作中的having子语句，是用于在分组后对数据进行过滤的，作用类似于where条件。\n&#x2F;*\nhaving与where的区别:\nhaving是在分组后对数据进行过滤\nwhere是在分组前对数据进行过滤\nhaving后面可以使用分组函数(统计函数)\nwhere后面不可以使用分组函数\n*&#x2F;</code></pre>\n\n<p>分页查询</p>\n<p>在工作中不是把所有满足条件的数据全部查询出来,效率低下,对数据进行分页查询,</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*\n分页查询语句 关键字 limit\n格式: \n只要n条数据 select *|字段 from 表名 limit n;\nselect *|字段 from 表名 limit m n; m表示每页开始的行的索引(变化的) n表示每页的数量(不变的)\n注意:数据库行的索引从0开始,列的索引从1开始\n*&#x2F;</code></pre>\n\n<h4 id=\"多表操作\"><a href=\"#多表操作\" class=\"headerlink\" title=\"多表操作\"></a>多表操作</h4><h6 id=\"一对多关系\"><a href=\"#一对多关系\" class=\"headerlink\" title=\"一对多关系\"></a>一对多关系</h6><p>建表原则:从表使用主表的主键作为外键</p>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">&#x2F;*\n外键约束的作用:保证数据的准确和完整\n主表中有的数据,从表可以有也可以没有\n主表中没有的数据,从表也不能有\n删除主表的数据,必须保证从表没有使用\n*&#x2F;\n#声明外键约束\nalter table 从表 add [constraint][外键名称] foreign key (从表外键字段名) references 主表 (主表的主键);\n#删除外键约束\nalter table 从表 drop foreign key 外键名称</code></pre>\n\n<h6 id=\"多对多关系\"><a href=\"#多对多关系\" class=\"headerlink\" title=\"多对多关系\"></a>多对多关系</h6><p>需要创建一张中间表(商品主键–订单主键),中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键</p>\n<h6 id=\"一对多操作\"><a href=\"#一对多操作\" class=\"headerlink\" title=\"一对多操作\"></a>一对多操作</h6><h6 id=\"多对多操作\"><a href=\"#多对多操作\" class=\"headerlink\" title=\"多对多操作\"></a>多对多操作</h6><h4 id=\"多表关系实战\"><a href=\"#多表关系实战\" class=\"headerlink\" title=\"多表关系实战\"></a>多表关系实战</h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#实战1：省和市 \n&#x2F;*\n省和市实例\n*&#x2F;\nCREATE DATABASE day03;\nUSE day03;\n-- 创建主表\nCREATE TABLE province(\n  pid INT PRIMARY KEY AUTO_INCREMENT,\n  pname VARCHAR(20),\n  description VARCHAR(50)\n);\nINSERT INTO province(pname,description) VALUES (&#39;河北&#39;,&#39;雾霾&#39;),(&#39;内蒙古&#39;,&#39;草原&#39;),(&#39;广东&#39;,&#39;经济特区&#39;);\n-- 创建从表\nCREATE TABLE city(\n  cid INT PRIMARY KEY AUTO_INCREMENT,\n  cname VARCHAR(20),\n  description VARCHAR(50),\n-- 所属省份 外键\n  province_pid INT\n);\nALTER TABLE city ADD FOREIGN KEY (province_pid) REFERENCES province(pid);\nSHOW TABLES;\nINSERT INTO city VALUES (NULL,&#39;石家庄&#39;,&#39;雾霾之最&#39;,1),(NULL,&#39;承德&#39;,&#39;避暑山庄&#39;,1);\nINSERT INTO city VALUES (NULL,&#39;包头&#39;,&#39;草原钢城&#39;,2),(NULL,&#39;赤峰&#39;,&#39;红山文化&#39;,2);\nINSERT INTO city VALUES (NULL,&#39;深圳&#39;,&#39;经济特区&#39;,3),(NULL,&#39;东莞&#39;,&#39;服务行业&#39;,3);\n-- 城市表添加主表省份不存在的数据\nINSERT INTO city VALUES (NULL,&#39;澳门&#39;,&#39;博彩娱乐&#39;,4);-- 报错</code></pre>\n\n<h6 id=\"自关联的一对多关系-了解\"><a href=\"#自关联的一对多关系-了解\" class=\"headerlink\" title=\"自关联的一对多关系(了解)\"></a>自关联的一对多关系(了解)</h6><p>本表的外键使用本表的主键,工作中很少用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">地区主键</th>\n<th align=\"center\">地区名称</th>\n<th align=\"center\">地区描述</th>\n<th align=\"center\">所属省份</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">河北</td>\n<td align=\"center\">雾霾</td>\n<td align=\"center\">null</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">内蒙古</td>\n<td align=\"center\">草原</td>\n<td align=\"center\">null</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">石家庄</td>\n<td align=\"center\">雾霾之最</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\">承德</td>\n<td align=\"center\">避暑山庄</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\">5</td>\n<td align=\"center\">包头</td>\n<td align=\"center\">草原钢城</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">6</td>\n<td align=\"center\">赤峰</td>\n<td align=\"center\">红山文化</td>\n<td align=\"center\">2</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#实战2\n&#x2F;*\n用户和角色\n*&#x2F;\n创建用户表\n创建角色表\n创建中间表 添加外键(直接在创建表时声明或者alter table 从表名 add foreign key (从表字段名) references 主表(主表字段名))</code></pre>\n\n<h4 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h4><pre class=\"line-numbers language-mysql\" data-language=\"mysql\"><code class=\"language-mysql\">#交叉连接查询(很少用,有错误数据,笛卡尔积)\nselect * from 表A,表B\n#内连接查询,在交叉连接查询的基础上,使用外键约束作为查询条件\n&#x2F;*隐式内连接 ,不使用关键字 [inner] join on*&#x2F;\nselect * from 表A,表B where 表A.主键&#x3D;表B.外键;\n&#x2F;*显式内连接 ,使用关键字 [inner] join on    on的后面可继续写where条件*&#x2F;\nselect * from 表A  [inner] join 表B on 表A.主键&#x3D;表B.外键;\n#外连接,在交叉查询的基础上,使用外键约束作为查询条件\n&#x2F;*左外连接 ,使用关键字 left [outer] join on*&#x2F;\nselect * from 表A  left [outer] join 表B on 表A.主键&#x3D;表B.外键;\n-- 左外连接查询以左边表为主,左边有的数据右边没有就使用null代替,左边没有的数据,右边也不能出现\n&#x2F;*右外连接 ,使用关键字 right [outer] join on*&#x2F;\nselect * from 表A  right [outer] join 表B on 表A.主键&#x3D;表B.外键;\n-- 右外连接和左外连接相反\n\n#子查询 sql语句的嵌套\n&#x2F;*一条sql语句的查询结果,作为另一条sql语句的查询条件*&#x2F;\nselect * from 表B where 字段&#x3D;(select 字段 from 表A [where条件])\n&#x2F;*一条sql语句的查询结果,作为另一条sql语句的另一张表(隐式内连接查询,先过滤数据)*&#x2F;\nselect * from (select * from 表A [where条件]),表B where 表A.主键&#x3D;表B.外键</code></pre>\n\n<h4 id=\"事务操作\"><a href=\"#事务操作\" class=\"headerlink\" title=\"事务操作\"></a>事务操作</h4><p>事务指的是逻辑上的一组操作,组成这组操作的各个单元要么全都成功,要么全都失败<br>事务作用：保证在一个事务中多次SQL操作要么全都成功,要么全都失败</p>\n<p>mysql事务操作 start transaction开启事务 commit提交事务 rollback回滚事务</p>\n<h4 id=\"事务总结\"><a href=\"#事务总结\" class=\"headerlink\" title=\"事务总结\"></a>事务总结</h4><h6 id=\"事务特性ACID\"><a href=\"#事务特性ACID\" class=\"headerlink\" title=\"事务特性ACID\"></a>事务特性ACID</h6><ul>\n<li>原子性(Atomicity)指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li>\n<li>一致性(Consistency)事务前后数据的完整性必须保持一致</li>\n<li>隔离性(Isolation)事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。</li>\n<li>持久性(Durability)持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</li>\n</ul>\n<h6 id=\"并发访问问题\"><a href=\"#并发访问问题\" class=\"headerlink\" title=\"并发访问问题\"></a>并发访问问题</h6><ul>\n<li>脏读：一个事务读到了另一个事务未提交的数据</li>\n<li>不可重复读：一个事务读到了另一个事务已经提交(update)的数据。引发另一个事务，在事务中的多次查询结果不一致</li>\n<li>虚读 &#x2F;幻读：一个事务读到了另一个事务已经提交(insert)的数据。导致另一个事务，在事务中多次查询的结果不一致</li>\n</ul>\n<h6 id=\"隔离级别-解决问题\"><a href=\"#隔离级别-解决问题\" class=\"headerlink\" title=\"隔离级别(解决问题)\"></a>隔离级别(解决问题)</h6><p>数据库规范规定了4种隔离级别，分别用于描述两个事务并发的所有情况</p>\n<p>1.read uncommitted 读未提交，一个事务读到另一个事务没有提交的数据,可能存在脏读、不可重复读、虚读</p>\n<p>2.read committed 读已提交，一个事务读到另一个事务已经提交的数据，可能存在不可重复读、虚读</p>\n<p>3.repeatable read 可重复读，在一个事务中读到的数据始终保持一致，无论另一个事务是否提交，可能存在虚读</p>\n<p><em>serializable 串行化，同时只能执行一个事务，相当于事务中的单线程，三个问题都没有了</em></p>\n<p>安全性： serializable[8]&gt;repeatable read[4]&gt;read committed[2 ]&gt;read uncommitted[1]</p>\n<p>性能对比刚好和安全性相反</p>\n<p>常见数据库的默认隔离级别：MySql: repeatable read   Oracle: read committed</p>\n<h4 id=\"mysql统计技巧\"><a href=\"#mysql统计技巧\" class=\"headerlink\" title=\"mysql统计技巧\"></a>mysql统计技巧</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 统计前六个月的数据\nSELECT month_table.monthValue as month, temp.countValue as count FROM\n(SELECT\n\tdate_format( @lastDay :&#x3D; last_day( date_add( @lastDay, INTERVAL 1 MONTH ) ), &#39;%Y-%m&#39; ) monthValue \nFROM\n\t( SELECT @lastDay :&#x3D; date_add( curdate( ), INTERVAL - 6 MONTH ) FROM mysql.help_topic LIMIT 6 ) a) month_table\nLEFT JOIN\n(select DATE_FORMAT(u.create_time,&#39;%Y-%m&#39;) as monthValue, count(*) as countValue from sys_user u GROUP BY DATE_FORMAT(u.create_time,&#39;%Y-%m&#39;)) temp ON temp.monthValue &#x3D; month_table.monthValue\nORDER BY month_table.monthValue\n-- 原理 1 制作前六个月的月份表\nSELECT\n\tdate_format( @lastDay :&#x3D; last_day( date_add( @lastDay, INTERVAL 1 MONTH ) ), &#39;%Y-%m&#39; ) monthValue \nFROM\n\t( SELECT @lastDay :&#x3D; date_add( curdate( ), INTERVAL - 6 MONTH ) FROM mysql.help_topic LIMIT 6 ) a\n-- 原理 2 制作目标表的按月分组的统计数据\nselect DATE_FORMAT(u.create_time,&#39;%Y-%m&#39;) as monthValue, count(*) as countValue from sys_user u GROUP BY DATE_FORMAT(u.create_time,&#39;%Y-%m&#39;)\n-- 使用外链接合并两张临时表，并查询出需要的字段</code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">-- 统计近30天的数据\n-- 1 生成30天的表\nSELECT\n\t\t@s :&#x3D; @s + 1 AS indexs,\n\t\tDATE_FORMAT( DATE( DATE_SUB( CURRENT_DATE, INTERVAL @s DAY ) ), &#39;%Y-%m-%d&#39; ) AS dates \n\tFROM\n\t\tmysql.help_topic,\n\t\t( SELECT @s :&#x3D; -1 ) temp  #不想包含当天，@s:&#x3D;0\n\tWHERE\n\t\t@s &lt; 30 \n\tORDER BY\n\t\tdates\n-- 制作目标表按天的统计数据\n-- 使用外链接合并两张临时表，并查询出需要的字段</code></pre>\n\n<h4 id=\"MySQL日期格式化\"><a href=\"#MySQL日期格式化\" class=\"headerlink\" title=\"MySQL日期格式化\"></a>MySQL日期格式化</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">MySQL日期格式化DATE_FORMAT()取值范围。\n值     含义\n%S、%s 秒        两位数字形式的秒（ 00,01, ..., 59）\n%I、%i 分       两位数字形式的分（ 00,01, ..., 59）\n%H    小时     24小时制，两位数形式小时（00,01, ...,23）\n%h    12小时制，两位数形式小时（00,01, ...,12）\n%k    24小时制，数形式小时（0,1, ...,23）\n%l    12小时制，数形式小时（0,1, ...,12）\n%T    24小时制，时间形式（HH:mm:ss）\n%r    12小时制，时间形式（hh:mm:ss AM 或 PM）\n%p    AM上午或PM下午 \n%W    周      一周中每一天的名称（Sunday,Monday, ...,Saturday）\n%a    一周中每一天名称的缩写（Sun,Mon, ...,Sat） \n%w     以数字形式标识周（0&#x3D;Sunday,1&#x3D;Monday, ...,6&#x3D;Saturday） \n%U    数字表示周数，星期天为周中第一天\n%u    数字表示周数，星期一为周中第一天\n%d     天     两位数字表示月中天数（01,02, ...,31）\n%e      数字表示月中天数（1,2, ...,31）\n%D    英文后缀表示月中天数（1st,2nd,3rd ...） \n%j    以三位数字表示年中天数（001,002, ...,366） \n%M     月  英文月名（January,February, ...,December） \n%b     英文缩写月名（Jan,Feb, ...,Dec） \n%m     两位数字表示月份（01,02, ...,12）\n%c     数字表示月份（1,2, ...,12） \n%Y    年     四位数字表示的年份（2015,2016...）\n%y      两位数字表示的年份（15,16...）\n%文字   文字输出       直接输出文字内容</code></pre>\n\n","text":"Mysql常见数据库 MYSQL：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。 Oracle：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。 DB2 ：IBM公司的数据库产品,收费的。常应用在银...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/tags/Mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Mysql\"><span class=\"toc-text\">Mysql</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SQL%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">SQL语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DDL%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80-3\"><span class=\"toc-text\">DDL操作语言(3%)</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#DML%E6%93%8D%E4%BD%9C%E8%AF%AD%E8%A8%80-7\"><span class=\"toc-text\">DML操作语言(7%)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#SQL%E7%BA%A6%E6%9D%9F\"><span class=\"toc-text\">SQL约束</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">数据库密码重置(扩展)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SQL%E8%AF%AD%E5%8F%A5-DQL\"><span class=\"toc-text\">SQL语句(DQL)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">多表操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">一对多关系</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">多对多关系</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">一对多操作</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">多对多操作</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E5%85%B3%E7%B3%BB%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">多表关系实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%85%B3%E8%81%94%E7%9A%84%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB-%E4%BA%86%E8%A7%A3\"><span class=\"toc-text\">自关联的一对多关系(了解)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">多表查询</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">事务操作</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">事务总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%8A%A1%E7%89%B9%E6%80%A7ACID\"><span class=\"toc-text\">事务特性ACID</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">并发访问问题</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB-%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">隔离级别(解决问题)</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mysql%E7%BB%9F%E8%AE%A1%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">mysql统计技巧</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#MySQL%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">MySQL日期格式化</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"springboot配置文件","uid":"38ca70cafbfd87b7f0418630bd7d0ad1","slug":"springboot/springboot配置文件","date":"2022-10-08T07:55:43.000Z","updated":"2023-02-07T07:03:00.000Z","comments":true,"path":"api/articles/springboot/springboot配置文件.json","keywords":"chriswood blogs sharing","cover":null,"text":"springboot配置文件在springboot 项目中一般默认的配置文件是application.properties,但是实际项目中我们一般会使用application.yml文件 yml文件读取顺序存放目录SpringBoot配置文件默认可以放到以下目录中，可以自动读取到...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"springboot","slug":"springboot","count":2,"path":"api/categories/springboot.json"},{"name":"springboot配置","slug":"springboot/springboot配置","count":2,"path":"api/categories/springboot/springboot配置.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"},{"name":"springboot配置","slug":"springboot配置","count":2,"path":"api/tags/springboot配置.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Node基础十二","uid":"c5c39a45409b6c5284d037b63eb17322","slug":"node/base/Node基础十二","date":"2022-10-01T04:32:50.000Z","updated":"2023-02-08T09:08:40.489Z","comments":true,"path":"api/articles/node/base/Node基础十二.json","keywords":"chriswood blogs sharing","cover":[],"text":"十二.数据库MySQL认识数据库1.1. 为什么要使用数据库任何的软件系统都需要存放大量的数据，这些数据通常是非常复杂和庞大的： 比如用户信息包括姓名、年龄、性别、地址、身份证号、出生日期等等； 比如商品信息包括商品的名称、描述、价格（原价）、分类标签、商品图片等等； 比如歌曲信...","link":"","photos":[],"count_time":{"symbolsCount":"39k","symbolsTime":"35 mins."},"categories":[{"name":"Node","slug":"Node","count":12,"path":"api/categories/Node.json"}],"tags":[{"name":"Node Node基础系列","slug":"Node-Node基础系列","count":12,"path":"api/tags/Node-Node基础系列.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"docker-compose","uid":"9744696a0b3b0998bf3993789981c178","slug":"docker/docker-compose","date":"2023-03-02T02:09:40.000Z","updated":"2023-06-15T06:03:05.000Z","comments":true,"path":"api/articles/docker/docker-compose.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>云服务器centOS 7.6 64位</p>\n<h2 id=\"docker-compose安装\"><a href=\"#docker-compose安装\" class=\"headerlink\" title=\"docker-compose安装\"></a>docker-compose安装</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.15.1&#x2F;docker-compose-linux-x86_64&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\nchmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose\ndocker-compose\n# 验证docker-compose.yml文件\ndocker-compose config -q\n# 拉取服务依赖的镜像\ndocker-compose pull nginx\n# 创建并启动所有服务的容器\ndocker-compose up\n# 列出工程中所有服务的容器\ndocker-compose ps</code></pre>\n<h2 id=\"docker-compose命令\"><a href=\"#docker-compose命令\" class=\"headerlink\" title=\"docker-compose命令\"></a>docker-compose命令</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">Define and run multi-container applications with Docker.\n\nUsage:\n  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]\n  docker-compose -h|--help\n\nOptions:\n  -f, --file FILE             Specify an alternate compose file\n                              (default: docker-compose.yml)\n  -p, --project-name NAME     Specify an alternate project name\n                              (default: directory name)\n  --verbose                   Show more output\n  --log-level LEVEL           Set log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n  --no-ansi                   Do not print ANSI control characters\n  -v, --version               Print version and exit\n  -H, --host HOST             Daemon socket to connect to\n\n  --tls                       Use TLS; implied by --tlsverify\n  --tlscacert CA_PATH         Trust certs signed only by this CA\n  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file\n  --tlskey TLS_KEY_PATH       Path to TLS key file\n  --tlsverify                 Use TLS and verify the remote\n  --skip-hostname-check       Don&#39;t check the daemon&#39;s hostname against the\n                              name specified in the client certificate\n  --project-directory PATH    Specify an alternate working directory\n                              (default: the path of the Compose file)\n  --compatibility             If set, Compose will attempt to convert keys\n                              in v3 files to their non-Swarm equivalent\n\nCommands:\n  build              构建或重建服务\n  bundle             从compose配置文件中产生一个docker绑定\n  config             验证并查看compose配置文件\n  create             创建服务\n  down               停止并移除容器、网络、镜像和数据卷\n  events             从容器中接收实时的事件\n  exec               在一个运行中的容器上执行一个命令\n  help               获取命令的帮助信息\n  images             列出所有镜像\n  kill               通过发送SIGKILL信号来停止指定服务的容器\n  logs               从容器中查看服务日志输出\n  pause              暂停服务\n  port               打印绑定的公共端口\n  ps                 列出所有运行中的容器\n  pull               拉取并下载指定服务镜像\n  push               Push service images\n  restart            重启YAML文件中定义的服务\n  rm                 删除指定已经停止服务的容器\n  run                在一个服务上执行一条命令\n  scale              设置指定服务运行容器的个数\n  start              在容器中启动指定服务\n  stop               停止已运行的服务\n  top                显示各个服务容器内运行的进程\n  unpause            恢复容器服务\n  up                 创建并启动容器\n  version            显示Docker-Compose版本信息</code></pre>\n<h3 id=\"docker-compose用法\"><a href=\"#docker-compose用法\" class=\"headerlink\" title=\"docker-compose用法\"></a>docker-compose用法</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose [-f &lt;args&gt;...] [options] [COMMAND] [ARGS...]\ndocker-compose [-f docker-compose.yml] up -d</code></pre>\n<h3 id=\"docker-compose-pull\"><a href=\"#docker-compose-pull\" class=\"headerlink\" title=\"docker-compose pull\"></a>docker-compose pull</h3><p>拉取服务依赖的镜像</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose pull [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–ignore-pull-failures 忽略拉取镜像过程中的错误</li>\n<li>–parallel 同时拉取多个镜像</li>\n<li>–quiet 拉取镜像过程中不打印进度信息</li>\n</ul>\n<h3 id=\"docker-compose-build\"><a href=\"#docker-compose-build\" class=\"headerlink\" title=\"docker-compose build\"></a>docker-compose build</h3><p>构建镜像，服务容器一旦构建后将会带上一个标记名称，可以随时在项目目录下运行docker-compose build来重新构建服务。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose build [options] [--build-arg key&#x3D;val...] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–compress 通过gzip压缩构建上下文环境</li>\n<li>–force-rm 删除构建过程中的临时容器</li>\n<li>–no-cache 构建镜像过程中不使用缓存 </li>\n<li>–pull 始终尝试通过拉取操作来获取更新版本的镜像 </li>\n<li>-m, –memory MEM为构建的容器设置内存大小 </li>\n<li>–build-arg key&#x3D;val 为服务设置build-time变量</li>\n</ul>\n<h3 id=\"docker-compose-create\"><a href=\"#docker-compose-create\" class=\"headerlink\" title=\"docker-compose create\"></a>docker-compose create</h3><p>为服务创建容器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose create [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–force-recreate 重新创建容器，即使配置和镜像没有改变，不兼容–no-recreate参数。</li>\n<li>–no-recreate 如果容器已经存在则无需重新创建，不兼容–force-recreate参数。</li>\n<li>–no-build 不创建镜像即使缺失</li>\n<li>–build 创建容器前生成镜像</li>\n</ul>\n<h3 id=\"docker-compose-exec\"><a href=\"#docker-compose-exec\" class=\"headerlink\" title=\"docker-compose exec\"></a>docker-compose exec</h3><p>进入容器命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose exec [options] SERVICE COMMAND [ARGS...]\neg: docker-compose exec --index&#x3D;1 tomcat &#x2F;bin&#x2F;bash</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>-d 分离模式，以后台守护进程运行命令。</li>\n<li>–privileged 获取特权</li>\n<li>-T 禁用分配TTY，默认docker-compose exec分配TTY。</li>\n<li>–index&#x3D;index 当一个服务拥有多个容器时可通过该参数登录到该服务下的任何容器</li>\n</ul>\n<h3 id=\"docker-compose-run\"><a href=\"#docker-compose-run\" class=\"headerlink\" title=\"docker-compose run\"></a>docker-compose run</h3><p>针对服务运行一次性命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY&#x3D;VAL...] SERVICE [COMMAND] [ARGS...]\n#启动web服务并bash作为其命令运行\neg: docker-compose run web bash </code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>-d 指定在后台以守护进程方式运行服务容器，不占用主进程</li>\n<li>–name NAME 给容器指定名字</li>\n<li>–entrypoint CMD 重写镜像的entrypoint命令</li>\n<li>-e KEY&#x3D;VAL 设置能被多次使用的环境变量</li>\n<li>-l, –label KEY&#x3D;VAL 添加标签</li>\n<li>–no-deps 设置不启动服务所链接的容器</li>\n<li>–rm 运行后删除容器. detached模式会忽略</li>\n<li>-p, 将容器的端口发布到主机</li>\n<li>–service-ports 在启用服务端口并映射到主机的情况下运行命令</li>\n<li>–use-aliases 在容器连接到的网络中使用服务的网络别名。</li>\n<li>-v, –volume&#x3D;[] 绑定装载卷（默认值[]）</li>\n<li>-T 禁用分配TTY，默认docker-compose exec分配TTY。</li>\n<li>-w, –workdir&#x3D;”” 容器内的工作目录</li>\n</ul>\n<h3 id=\"docker-compose-up\"><a href=\"#docker-compose-up\" class=\"headerlink\" title=\"docker-compose up\"></a>docker-compose up</h3><p>启动所有服务，会一次性完成 build 和 create 以及run命令的三个操作。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose up [options] [--scale SERVICE&#x3D;NUM...] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>-d 指定在后台以守护进程方式运行服务容器，不占用主进程</li>\n<li>-no-color 设置不使用颜色来区分不同的服务器的控制输出</li>\n<li>-no-deps 设置不启动服务所链接的容器</li>\n<li>-force-recreate 设置强制重新创建容器，不能与–no-recreate选项同时使用。</li>\n<li>–no-create 若容器已经存在则不再重新创建，不能与–force-recreate选项同时使用。</li>\n<li>–no-build 设置不自动构建缺失的服务镜像</li>\n<li>–build 设置在启动容器前构建服务镜像</li>\n<li>–abort-on-container-exit 若任何一个容器被停止则停止所有容器，不能与选项-d同时使用。</li>\n<li>-t, –timeout TIMEOUT 设置停止容器时的超时秒数，默认为10秒。</li>\n<li>–remove-orphans 设置删除服务中没有在compose文件中定义的容器</li>\n<li>–scale SERVICE&#x3D;NUM 设置服务运行容器的个数，此选项将会负载在compose中通过scale指定的参数。</li>\n</ul>\n<h3 id=\"docker-compose-ps\"><a href=\"#docker-compose-ps\" class=\"headerlink\" title=\"docker-compose ps\"></a>docker-compose ps</h3><p>列出当前的所有容器，需要注意的是必须在docker-compose.yml文件所在的目录下执行该命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose ps [options] [SERVICE...]</code></pre>\n<h3 id=\"docker-compose-down\"><a href=\"#docker-compose-down\" class=\"headerlink\" title=\"docker-compose down\"></a>docker-compose down</h3><p>停止和删除容器、网络、卷、镜像</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose down [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–rmi type<ul>\n<li>-rmi all 删除compose文件中定义的所有镜像</li>\n<li>–rmi local 删除镜像名为空的镜像</li>\n</ul>\n</li>\n<li>-v, –volumes 删除已经在compose文件中定义的和匿名的附在容器上的数据卷</li>\n<li>–remove-orphans 删除服务中没有在compose中定义的容器</li>\n</ul>\n<h3 id=\"docker-compose-restart\"><a href=\"#docker-compose-restart\" class=\"headerlink\" title=\"docker-compose restart\"></a>docker-compose restart</h3><p>重启服务</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose restart [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>-t, –timeout TIMEOUT指定重启前停止容器的超时时长，默认为10秒</li>\n</ul>\n<h3 id=\"docker-compose-rm\"><a href=\"#docker-compose-rm\" class=\"headerlink\" title=\"docker-compose rm\"></a>docker-compose rm</h3><p>删除所有停止状态的容器，推荐先执行docker-compose stop命令来停止容器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ocker-compose rm [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>-f, –force 强制直接删除包含非停止状态的容器</li>\n<li>-v 删除容器所挂载的数据卷</li>\n</ul>\n<h3 id=\"docker-compose-start\"><a href=\"#docker-compose-start\" class=\"headerlink\" title=\"docker-compose start\"></a>docker-compose start</h3><p>启动已经存在的容器</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose start [SERVICE...]</code></pre>\n<h3 id=\"docker-compose-stop\"><a href=\"#docker-compose-stop\" class=\"headerlink\" title=\"docker-compose stop\"></a>docker-compose stop</h3><p>停止已运行的服务</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose stop [options] [SERVICE...]</code></pre>\n<h3 id=\"docker-compose-logs\"><a href=\"#docker-compose-logs\" class=\"headerlink\" title=\"docker-compose logs\"></a>docker-compose logs</h3><p>查看容器的日志</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose logs [options] [SERVICE...]</code></pre>\n<h3 id=\"docker-compose-pause\"><a href=\"#docker-compose-pause\" class=\"headerlink\" title=\"docker-compose pause\"></a>docker-compose pause</h3><p>暂停一个服务容器</p>\n<h3 id=\"docker-compose-unpause\"><a href=\"#docker-compose-unpause\" class=\"headerlink\" title=\"docker-compose unpause\"></a>docker-compose unpause</h3><p>恢复处于暂停状态中的服务</p>\n<h3 id=\"docker-compose-kill\"><a href=\"#docker-compose-kill\" class=\"headerlink\" title=\"docker-compose kill\"></a>docker-compose kill</h3><p>发送SIGKILL信号来强制停止服务容器，支持通过-s参数来指定发送的信号。</p>\n<h3 id=\"docker-compose-config\"><a href=\"#docker-compose-config\" class=\"headerlink\" title=\"docker-compose config\"></a>docker-compose config</h3><p>验证并查看compose文件配置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose config [options]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–resolve-image-digests 将镜像标签标记为摘要</li>\n<li>-q, –quiet 只验证配置不输出，当配置正确时不输出任何容器，当配置错误时输出错误信息。</li>\n<li>–services 打印服务名称，一行显示一个。</li>\n<li>–volumes 打印数据卷名称，一行显示一个。</li>\n</ul>\n<h3 id=\"docker-compose-port\"><a href=\"#docker-compose-port\" class=\"headerlink\" title=\"docker-compose port\"></a>docker-compose port</h3><p>显示某个容器端口所映射的公共端口</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose port [options] SERVICE PRIVATE_PORT</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–protocol&#x3D;proto 指定端口协议，默认为TCP，可选UDP。</li>\n<li>–index&#x3D;index 若同一个服务存在多个容器，指定命令对象容器的索引序号，默认为1</li>\n</ul>\n<h3 id=\"docker-compose-push\"><a href=\"#docker-compose-push\" class=\"headerlink\" title=\"docker-compose push\"></a>docker-compose push</h3><p>推送镜像到仓库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker-compose push [options] [SERVICE...]</code></pre>\n<p>命令选项[options]</p>\n<ul>\n<li>–ignore-push-failure 忽略推送镜像过程中的错误</li>\n</ul>\n<h3 id=\"docker-compose-version\"><a href=\"#docker-compose-version\" class=\"headerlink\" title=\"docker-compose version\"></a>docker-compose version</h3><p>Docker Compose版本信息</p>\n<h2 id=\"Docker五种网络模式与应用场景\"><a href=\"#Docker五种网络模式与应用场景\" class=\"headerlink\" title=\"Docker五种网络模式与应用场景\"></a>Docker五种网络模式与应用场景</h2><p>bridge（默认）、host 、container 、none 和⾃定义（Macvlan）五种模式。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#指定容器的网络模式为host模式，与主机共享端口和ip，这样会占用宿主机的端口，宿主机的端口只能被这一个容器共享\nnetwork_mode: &quot;host&quot;</code></pre>\n<h3 id=\"bridge模式\"><a href=\"#bridge模式\" class=\"headerlink\" title=\"bridge模式\"></a>bridge模式</h3><p>bridge模式是docker的默认⽹络模式 ，当Docker进程启动时，会在主机上创建⼀个名为docker0的虚拟⽹桥，此主机上启动的Docker容器会连接到这个虚拟⽹桥上。<br>虚拟⽹桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了⼀个⼆层⽹络中。<br>从docker0⼦⽹中分配⼀个IP给容器使⽤，并设置docker0的IP地址为容器的默认⽹关。<br>bridge模式是docker的默认⽹络模式，不写–network参数的话就是bridge模式，可以通过 -P 或 -p 参数来指定端⼝映射。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name tomcat -d -p 8088:8080 tomcat</code></pre>\n<p>特点：<br>隔离性好，会占⽤宿主机端⼝，只占⽤⼀个真实IP，适⽤于⼤多数场景</p>\n<h3 id=\"host模式\"><a href=\"#host模式\" class=\"headerlink\" title=\"host模式\"></a>host模式</h3><p>使用host模式启动容器，该容器不会获得独立的Network Namespace，而是和宿主机共同使用一个Network Namespace，不会虚拟自己的网卡，配置自己的ip等，<br>而是使用宿主机的ip和端口，也就是会占用宿主机的端口。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name mytomcat --network&#x3D;host -d tomcat\n# tomcat容器默认使用的是8080端口，使用host模式，tomcat容器占用了主机的端口\ncurl http:&#x2F;&#x2F;localhost:8080</code></pre>\n<p>特点：隔离性最差，只占⽤⼀个真实IP，会占⽤宿主机端⼝，会出现端⼝冲突，性能最好。能确认所有容器端⼝不冲突且默认都需要对外暴露时使⽤。</p>\n<h3 id=\"container模式\"><a href=\"#container模式\" class=\"headerlink\" title=\"container模式\"></a>container模式</h3><p>这个模式指定新创建的容器和已经存在的⼀个容器共享⼀个Network Namespace，⽽不是和宿主机共享<br>新创建的容器不会创建⾃⼰的⽹卡和配置⾃⼰的IP，⽽是和⼀个指定的容器共享IP、端⼝范围等。 同样，两个容器除了⽹络⽅⾯，其他的如⽂件系统、进程列表等<br>还是隔离的。两个容器的进程可以通过 IO⽹卡设备通信<br>例子: 采用nginx容器作为容器桥反射tomcat端口</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run --name tomcat -d -p 80:80 tomcat</code></pre>\n<p>tomcat默认暴露8080端⼝，这里利⽤bridge模式绑定80端⼝，本地访问失败，因为映射的容器端口是80，然而tomcat的容器默认端口是8080，所以访问不到<br>将nginx通过容器模式绑定到tomcat容器，这样通过tomcat容器的80端⼝便可转发给nginx处理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -d --name nginx --net container:tomcat nginx</code></pre>\n<p>特点：隔离性好，只占⽤⼀个真实IP，会占⽤容器端⼝，性能差，开发⽹关应⽤时可以考虑</p>\n<h3 id=\"none模式\"><a href=\"#none模式\" class=\"headerlink\" title=\"none模式\"></a>none模式</h3><p>在这种模式下，Docker容器拥有自己的Network Namespace，但是并不为Docker容器进行任何网络配置。 也就是说，这个Docker容器没有⽹卡、IP、路由等<br>信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker run -it --net&#x3D;none web</code></pre>\n<p>特点：一般用的比较少，⼀切全靠⾃定义，各项特性靠自己决定。</p>\n<h3 id=\"macvlan模式\"><a href=\"#macvlan模式\" class=\"headerlink\" title=\"macvlan模式\"></a>macvlan模式</h3><h4 id=\"Docker的Bridge模式\"><a href=\"#Docker的Bridge模式\" class=\"headerlink\" title=\"Docker的Bridge模式\"></a>Docker的Bridge模式</h4><p>docker桥接模式是在单个主机上桥接运行的，无法实现多个宿主机通信，并且会占用主机的端口。<br>优点：兼容性好，是Docker默认的通信规则<br>缺点：主机端⼝占⽤严重，⽆法使⽤指定端⼝（如：80）<br>缺点：⽆法跨主机容器间通信</p>\n<h4 id=\"Macvlan是什么\"><a href=\"#Macvlan是什么\" class=\"headerlink\" title=\"Macvlan是什么\"></a>Macvlan是什么</h4><p>Docker内置的Macvlan驱动（Windows上是 Transparent）是为此场景而生。通过为容器提供MAC和IP地址，让容器在物理⽹络上成为”⼀等公⺠”。<br>因为⽆须端⼝映射或者额外桥接，可以直接通过主机接⼝（或者⼦接⼝）访问容器接⼝。<br>但是，Macvlan的缺点是需要将主机网卡（NIC）设置为混杂模式（Promiscuous Mode），这在⼤部分公有云平台上是不允许的。所以Macvlan对于<br>公司内部的数据中心网络来说很棒（假设公司网络组能接受NIC设置为混杂模式），但是 Macvlan 在公有云上并不可行。 Macvlan本身是linux<br>kernel模块，其功能是允许在同⼀个物理⽹卡上配置多个MAC地址，即多个interface，每个interface可以配置⾃⼰的IP。macvlan本质上是⼀种<br>⽹卡虚拟化技术</p>\n<h4 id=\"Macvlan操作步骤\"><a href=\"#Macvlan操作步骤\" class=\"headerlink\" title=\"Macvlan操作步骤\"></a>Macvlan操作步骤</h4><h5 id=\"1-确认⽹卡名称ifconfig\"><a href=\"#1-确认⽹卡名称ifconfig\" class=\"headerlink\" title=\"1.确认⽹卡名称ifconfig\"></a>1.确认⽹卡名称ifconfig</h5><h5 id=\"2-开启混杂模式\"><a href=\"#2-开启混杂模式\" class=\"headerlink\" title=\"2.开启混杂模式\"></a>2.开启混杂模式</h5><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不要轻易在linux服务器上执行，可以使用vmware新建linux虚拟机测试</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ip link set ens33 promisc on\nifconfig ens33 promisc</code></pre>\n<h5 id=\"3-创建Macvlan⽹络\"><a href=\"#3-创建Macvlan⽹络\" class=\"headerlink\" title=\"3.创建Macvlan⽹络\"></a>3.创建Macvlan⽹络</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-d macvlan #指定⽹络模式\n--subnet&#x3D;192.168.31.0&#x2F;24 #设置⼦⽹掩码</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker network create -d macvlan \\\n--subnet&#x3D;192.168.31.0&#x2F;24 \\\n--ip-range&#x3D;192.168.31.0&#x2F;24 \\\n--gateway&#x3D;192.168.31.1 \\\n-o parent&#x3D;ens33 \\\nmacvlan32\n# –ip-range&#x3D;192.168.31.0&#x2F;24 设置容器允许的IP范围\n# –gateway&#x3D;192.168.31.1 设置⽹关\n# -o parent&#x3D;ens33 设置上⼀级⽹卡（或虚拟⽹卡）名称\n# macvlan32 指定当前macvlan⽹络名称</code></pre>\n<h5 id=\"4-加⼊macvlan⽹络\"><a href=\"#4-加⼊macvlan⽹络\" class=\"headerlink\" title=\"4.加⼊macvlan⽹络\"></a>4.加⼊macvlan⽹络</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker run -itd --name tomcat1 --ip&#x3D;192.168.31.190 --network macvlan32 tomcat\ndocker run -itd --name tomcat2 --ip&#x3D;192.168.31.191 --network macvlan32 tomcat</code></pre>\n<p>优点：</p>\n<ul>\n<li>1、独⽴IP，维护方便，不占用主机端口，使⽤容器默认端⼝</li>\n<li>2、拥有稳定的IP后，容器间跨主机通信成为可能，因为⽆论是物理机、虚拟机、容器都是物理⽹络的“⼀等公⺠”，容器间通信时直接指定IP即可</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>1、⽹络环境需要⽀持混杂模式，公有云不⽀持，不过都上公有云了，为什么不⽤直接⽤云供应商提供的容器服务呢？</li>\n<li>2、部分⼤规模应⽤集群，内⽹IP地址是稀缺资源，例如阿⾥云、腾讯云，不适合使⽤Macvlan</li>\n<li>3、默认容器端⼝均对外暴露，需要在内⽹构建应⽤防⽕墙&#x2F;⽹关决定哪些IP的哪些端⼝允许外界访问，哪些不允许</li>\n</ul>\n<h2 id=\"容器状态\"><a href=\"#容器状态\" class=\"headerlink\" title=\"容器状态\"></a>容器状态</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">created（已创建）\nrestarting（重启中）\nrunning或up（运行中）\nremoving（迁移中）\npaused（暂停）\nexited（停止）\ndead（死亡）\ndocker ps -a命令，可以查看全部已存在的容器</code></pre>\n\n\n<h2 id=\"docker-compose-yml文件编写\"><a href=\"#docker-compose-yml文件编写\" class=\"headerlink\" title=\"docker-compose.yml文件编写\"></a>docker-compose.yml文件编写</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考：<a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\">https://docs.docker.com/compose/compose-file/compose-file-v3/</a></p></blockquote>\n<h3 id=\"Compose和-Docker兼容性矩阵\"><a href=\"#Compose和-Docker兼容性矩阵\" class=\"headerlink\" title=\"Compose和 Docker兼容性矩阵\"></a>Compose和 Docker兼容性矩阵</h3><p>docker-ce版本和compose版本对应关系根据具体情况编辑</p>\n<h3 id=\"docker-swarm上的docker-compose示例\"><a href=\"#docker-swarm上的docker-compose示例\" class=\"headerlink\" title=\"docker swarm上的docker-compose示例\"></a>docker swarm上的docker-compose示例</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">version: &quot;3.9&quot;\nservices:\n\n  redis:\n    image: redis:alpine\n    ports:\n      - &quot;6379&quot;\n    networks:\n      - frontend\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  db:\n    image: postgres:9.4\n    volumes:\n      - db-data:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data\n    networks:\n      - backend\n    deploy:\n      placement:\n        max_replicas_per_node: 1\n        constraints:\n          - &quot;node.role&#x3D;&#x3D;manager&quot;\n\n  vote:\n    image: dockersamples&#x2F;examplevotingapp_vote:before\n    ports:\n      - &quot;5000:80&quot;\n    networks:\n      - frontend\n    depends_on:\n      - redis\n    deploy:\n      replicas: 2\n      update_config:\n        parallelism: 2\n      restart_policy:\n        condition: on-failure\n\n  result:\n    image: dockersamples&#x2F;examplevotingapp_result:before\n    ports:\n      - &quot;5001:80&quot;\n    networks:\n      - backend\n    depends_on:\n      - db\n    deploy:\n      replicas: 1\n      update_config:\n        parallelism: 2\n        delay: 10s\n      restart_policy:\n        condition: on-failure\n\n  worker:\n    image: dockersamples&#x2F;examplevotingapp_worker\n    networks:\n      - frontend\n      - backend\n    deploy:\n      mode: replicated\n      replicas: 1\n      labels: [APP&#x3D;VOTING]\n      restart_policy:\n        condition: on-failure\n        delay: 10s\n        max_attempts: 3\n        window: 120s\n      placement:\n        constraints:\n          - &quot;node.role&#x3D;&#x3D;manager&quot;\n\n  visualizer:\n    image: dockersamples&#x2F;visualizer:stable\n    ports:\n      - &quot;8080:8080&quot;\n    stop_grace_period: 1m30s\n    volumes:\n      - &quot;&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock&quot;\n    deploy:\n      placement:\n        constraints:\n          - &quot;node.role&#x3D;&#x3D;manager&quot;\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db-data:</code></pre>\n<h4 id=\"基本配置选项\"><a href=\"#基本配置选项\" class=\"headerlink\" title=\"基本配置选项\"></a>基本配置选项</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">services:\n  webapp:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args: #添加构建参数，这些参数是只能在构建过程中访问的环境变量 使用数组或字典\n        buildno: 1 \n        exportPort: 8888\n#      下面这种格式也可以\n#      - buildno&#x3D;1\n#      - exportPort&#x3D;8888\n      labels: # 使用Docker标签将元数据添加到生成的镜像。使用数组或字典\n        com.example.description: &quot;Accounting webapp&quot;\n        com.example.department: &quot;Finance&quot;\n      network: host #构建期间为 RUN 指令设置的网络\n      target: prod #构建 Dockerfile中定义的指定阶段。参阅docker的多阶段构建文档\n    configs:      #配置必须已经存在或已在顶级配置配置中定义  docker swarm中才有\n      - my_other_config\n      - source: my_config\n        target: &#x2F;redis_config \n        uid: &#39;103&#39; #在服务的任务容器中拥有已安装配置文件的数字 UID 或 GID。如果未指定，两者在 Linux 上均默认为 0\n        gid: &#39;103&#39;\n        mode: 0440 #八进制表示法在服务的任务容器中安装的文件的权限\n    image: myimage:latest\n    credential_spec:\n      config: my_credential_spec\n    container_name: my-web-container\n    # deploy在swarm中生效  \n    # 这些只在普通docker中生效build，cgroup_parent，container_name，devices，tmpfs，external_links，links，\n    # network_mode，restart，security_opt，userns_mode\n    deploy: #指定与服务的部署和运行相关的配置\n      endpoint_mode: vip #为连接到群的外部客户端指定服务发现方法\n      # vip Docker为服务分配一个虚拟 IP (VIP)，充当客户端访问网络服务的前端\n      # dnsrr  DNS轮询服务发现  Docker为服务设置 DNS条目，对服务名称的DNS查询返回IP地址列表，客户端直接连接到其中一个\n      labels:\n        com.example.description: &quot;This label will appear on the web service&quot;\n      mode: replicated #global（每个集群节点一个容器）或replicated （指定数量的容器）。默认replicated\n      replicas: 6  #在给定时间应该运行的容器数量\n      placement:  #指定约束和优先部署顺序\n        max_replicas_per_node: 1  #如果服务是replicated（这是默认设置），则限制任何时候可以在节点上运行的副本数\n        constraints:\n          - &quot;node.role&#x3D;&#x3D;manager&quot;\n        preferences:\n          - spread: node.labels.zone\n      resources: #配置资源限制\n        limits:\n          cpus: &#39;0.50&#39;\n          memory: 50M\n        reservations:\n          cpus: &#39;0.25&#39;\n          memory: 20M\n      update_config: #更新容器策略\n        parallelism: 2 #一次执行的容器数，设置为0则全部一次执行\n        delay: 10s\n        failure_action: pause #失败后操作 continue pause\n      rollback_config: #回滚容器策略\n        parallelism: 2 #一次执行的容器数，设置为0则全部一次执行\n        delay: 10s\n        failure_action: pause #失败后操作 continue pause\n      restart_policy: #重启容器策略\n        condition: on-failure  #none, on-failure or any (default: any).\n        delay: 5s #重新启动尝试之间等待的时间过长\n        max_attempts: 3 #最大尝试次数\n        window: 120s #在决定重启是否成功之前等待多长时间\n    depends_on:\n      - db\n      - redis\n\n  redis:\n    image: redis:latest\n    container_name: redis\n    \n  db:\n    image: postgres:latest\n    container_name: db\n    environment:\n      POSTGRES_PASSWORD: 123456\n\n  configs:   #配置   docker swarm中才有\n    my_config:\n      file: .&#x2F;my_config.txt\n    my_other_config:\n      external: true</code></pre>\n","text":"环境云服务器centOS 7.6 64位 docker-compose安装curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":5,"path":"api/tags/docker.json"},{"name":"docker-compose","slug":"docker-compose","count":1,"path":"api/tags/docker-compose.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#docker-compose%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">docker-compose安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#docker-compose%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">docker-compose命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">docker-compose用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-pull\"><span class=\"toc-text\">docker-compose pull</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-build\"><span class=\"toc-text\">docker-compose build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-create\"><span class=\"toc-text\">docker-compose create</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-exec\"><span class=\"toc-text\">docker-compose exec</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-run\"><span class=\"toc-text\">docker-compose run</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-up\"><span class=\"toc-text\">docker-compose up</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-ps\"><span class=\"toc-text\">docker-compose ps</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-down\"><span class=\"toc-text\">docker-compose down</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-restart\"><span class=\"toc-text\">docker-compose restart</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-rm\"><span class=\"toc-text\">docker-compose rm</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-start\"><span class=\"toc-text\">docker-compose start</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-stop\"><span class=\"toc-text\">docker-compose stop</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-logs\"><span class=\"toc-text\">docker-compose logs</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-pause\"><span class=\"toc-text\">docker-compose pause</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-unpause\"><span class=\"toc-text\">docker-compose unpause</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-kill\"><span class=\"toc-text\">docker-compose kill</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-config\"><span class=\"toc-text\">docker-compose config</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-port\"><span class=\"toc-text\">docker-compose port</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-push\"><span class=\"toc-text\">docker-compose push</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-compose-version\"><span class=\"toc-text\">docker-compose version</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%BA%94%E7%A7%8D%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">Docker五种网络模式与应用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bridge%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">bridge模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#host%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">host模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#container%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">container模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#none%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">none模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#macvlan%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">macvlan模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84Bridge%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">Docker的Bridge模式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Macvlan%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Macvlan是什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Macvlan%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">Macvlan操作步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%A1%AE%E8%AE%A4%E2%BD%B9%E5%8D%A1%E5%90%8D%E7%A7%B0ifconfig\"><span class=\"toc-text\">1.确认⽹卡名称ifconfig</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%BC%80%E5%90%AF%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">2.开启混杂模式</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BAMacvlan%E2%BD%B9%E7%BB%9C\"><span class=\"toc-text\">3.创建Macvlan⽹络</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E5%8A%A0%E2%BC%8Amacvlan%E2%BD%B9%E7%BB%9C\"><span class=\"toc-text\">4.加⼊macvlan⽹络</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%8A%B6%E6%80%81\"><span class=\"toc-text\">容器状态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#docker-compose-yml%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99\"><span class=\"toc-text\">docker-compose.yml文件编写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Compose%E5%92%8C-Docker%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9F%A9%E9%98%B5\"><span class=\"toc-text\">Compose和 Docker兼容性矩阵</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#docker-swarm%E4%B8%8A%E7%9A%84docker-compose%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">docker swarm上的docker-compose示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">基本配置选项</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RedisTemplate的opsFor操作","uid":"9a127567f79009a5dd921fb33be17694","slug":"java/redisson/RedisTemplate的opsFor操作","date":"2023-03-07T02:04:31.000Z","updated":"2023-07-03T14:14:19.359Z","comments":true,"path":"api/articles/java/redisson/RedisTemplate的opsFor操作.json","keywords":"chriswood blogs sharing","cover":null,"text":"一、opsForValueKey-Value操作 1、set(K key, V value)向Redis新增一个key-value，k-v可以是泛型。 redisTemplate.opsForValue().set(obj1,obj2); 2.get(Object key)&#x...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Redis","slug":"Redis","count":1,"path":"api/categories/Redis.json"}],"tags":[{"name":"Redisson","slug":"Redisson","count":1,"path":"api/tags/Redisson.json"},{"name":"RedisTemplate","slug":"RedisTemplate","count":1,"path":"api/tags/RedisTemplate.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"docker安装及远程CA证书制作","uid":"cebf02140ec9de3ceef8bc16f1ce1f74","slug":"docker/docker安装及CA证书制作","date":"2023-03-01T07:37:24.000Z","updated":"2023-06-15T06:26:11.000Z","comments":true,"path":"api/articles/docker/docker安装及CA证书制作.json","keywords":"chriswood blogs sharing","cover":null,"text":"环境云服务器centOS 7.6 64位 安装步骤docker安装sudo yum install -y yum-utils sudo yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":5,"path":"api/tags/docker.json"},{"name":"docker远程CA证书","slug":"docker远程CA证书","count":1,"path":"api/tags/docker远程CA证书.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
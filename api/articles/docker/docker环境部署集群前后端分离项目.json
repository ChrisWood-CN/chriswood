{"title":"docker环境部署集群前后端分离项目","uid":"fd6db9879e8a7f6e92c3104daa24218a","slug":"docker/docker环境部署集群前后端分离项目","date":"2022-10-12T08:05:29.000Z","updated":"2023-02-03T05:14:05.341Z","comments":true,"path":"api/articles/docker/docker环境部署集群前后端分离项目.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h1 id=\"docker环境部署集群前后端分离项目\"><a href=\"#docker环境部署集群前后端分离项目\" class=\"headerlink\" title=\"docker环境部署集群前后端分离项目\"></a>docker环境部署集群前后端分离项目</h1><h2 id=\"一、基础\"><a href=\"#一、基础\" class=\"headerlink\" title=\"一、基础\"></a>一、基础</h2><h3 id=\"1-Docker虚拟机常用命令\"><a href=\"#1-Docker虚拟机常用命令\" class=\"headerlink\" title=\"1.Docker虚拟机常用命令\"></a>1.Docker虚拟机常用命令</h3><p>1.先更新软件包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">yum -y update</code></pre>\n<p>2.安装Docker虚拟机</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">yum install -y docker</code></pre>\n<p>3.运行、重启、关闭Docker虚拟机</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">service docker start\nservice docker start\nservice docker stop</code></pre>\n<p>4.搜索镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker search 镜像名称</code></pre>\n<p>5.下载镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker pull 镜像名称</code></pre>\n<p>6.查看镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker images</code></pre>\n<p>7.删除镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker rmi 镜像名称</code></pre>\n<p>8.运行容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker run 启动参数  镜像名称</code></pre>\n<p>9.查看容器列表</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker ps -a</code></pre>\n<p>10.停止、挂起、恢复容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker stop 容器ID\ndocker pause 容器ID\ndocker unpase 容器ID</code></pre>\n<p>11.查看容器信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker inspect 容器ID</code></pre>\n<p>12.删除容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker rm 容器ID</code></pre>\n<p>13.数据卷管理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker volume create 数据卷名称  #创建数据卷\ndocker volume rm 数据卷名称  #删除数据卷\ndocker volume inspect 数据卷名称  #查看数据卷</code></pre>\n<p>14.网络管理</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker network ls 查看网络信息\ndocker network create --subnet&#x3D;网段 网络名称\ndocker network rm 网络名称</code></pre>\n<p>15.避免VM虚拟机挂起恢复之后，Docker虚拟机断网</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">vi &#x2F;etc&#x2F;sysctl.conf</code></pre>\n<p>文件中添加<code>net.ipv4.ip_forward=1</code>这个配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">#重启网络服务\nsystemctl  restart network</code></pre>\n<p>16.查看容器启动日志</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker logs 容器id&#x2F;name</code></pre>\n<h3 id=\"2-PXC集群\"><a href=\"#2-PXC集群\" class=\"headerlink\" title=\"2.PXC集群\"></a>2.PXC集群</h3><p>1.安装PXC镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker pull percona&#x2F;percona-xtradb-cluster\n# 镜像名称太长，修改一下\ndocker tag percona&#x2F;percona-xtradb-cluster pxc\n# 删除之前的\ndocker rmi percona&#x2F;percona-xtradb-cluster</code></pre>\n<p>2.创建内部网络</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker network create --subnet&#x3D;172.18.0.0&#x2F;16 net1\n# 查看net1网段：\ndocker inspect net1\n# 如果要删除使用删除命令\ndocker network rm net1</code></pre>\n<p>3.创建数据卷</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为pxc不支持映射目录，所以采用映射数据卷的方式。创建数据卷叫v1，这里5个节点，所以创建5个数据卷：</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker volume create --name v1\ndocker volume create --name v2\ndocker volume create --name v3\ndocker volume create --name v4\ndocker volume create --name v5\n# 查看v1数据卷在宿主机的位置\ndocker inspect v1\n# 删除数据卷v1\ndocker volume rm v1</code></pre>\n<p>4.创建备份数据卷（用于热备份数据）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker volume create --name backup</code></pre>\n<p>5.创建5节点的PXC集群</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，每个MySQL容器创建之后，因为要执行PXC的初始化和加入集群等工作，<br>耐心等待1分钟左右再用客户端连接MySQL。另外，必须第1个MySQL节点启动成功，<br>用MySQL客户端能连接上之后，再去创建其他MySQL节点。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>命令参数说明：端口3306，密码123456，集群名称PXC，同步数据密码123456，映射数据目录到宿主机的v1数据卷，给予最高权限，名称叫node1，网段为net1，ip指定为172.18.0.2，运行的镜像是pxc。</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">#创建第1个MySQL节点\ndocker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -v v1:&#x2F;var&#x2F;lib&#x2F;mysql -v backup:&#x2F;data --privileged --name&#x3D;node1 --net&#x3D;net1 --ip 172.18.0.2 pxc\n#创建第2个MySQL节点\ndocker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v2:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node2 --net&#x3D;net1 --ip 172.18.0.3 pxc\n#创建第3个MySQL节点\ndocker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v3:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node3 --net&#x3D;net1 --ip 172.18.0.4 pxc\n#创建第4个MySQL节点\ndocker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v4:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node4 --net&#x3D;net1 --ip 172.18.0.5 pxc\n#创建第5个MySQL节点\ndocker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -e CLUSTER_NAME&#x3D;PXC -e XTRABACKUP_PASSWORD&#x3D;123456 -e CLUSTER_JOIN&#x3D;node1 -v v5:&#x2F;var&#x2F;lib&#x2F;mysql --privileged --name&#x3D;node5 --net&#x3D;net1 --ip 172.18.0.6 pxc</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>验证PXC集群: navicat或者其他工具连接5个数据库节点,在DB1中新建一个数据库一张表并插入数据，提交后，看其它四个节点是否同步。</p></blockquote>\n<p>6.安装Haproxy镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">docker pull haproxy</code></pre>\n<p>7.宿主机上编写Haproxy配置文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">vi &#x2F;home&#x2F;soft&#x2F;haproxy&#x2F;haproxy.cfg \n#vi &#x2F;data&#x2F;software&#x2F;haproxy&#x2F;haproxy.cfg</code></pre>\n<p>配置文件如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">global\n\t#工作目录\n\tchroot &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy\n\t#日志文件，使用rsyslog服务中local5日志设备（&#x2F;var&#x2F;log&#x2F;local5），等级info\n\tlog 127.0.0.1 local5 info\n\t#守护进程运行\n\tdaemon\n\ndefaults\n\tlog\tglobal\n\tmode\thttp\n\t#日志格式\n\toption\thttplog\n\t#日志中不记录负载均衡的心跳检测记录\n\toption\tdontlognull\n    #连接超时（毫秒）\n\ttimeout connect 5000\n    #客户端超时（毫秒）\n\ttimeout client  50000\n\t#服务器超时（毫秒）\n    timeout server  50000\n\n#监控界面\t\nlisten  admin_stats\n\t#监控界面的访问的IP和端口\n\tbind  0.0.0.0:8888\n\t#访问协议\n    mode        http\n\t#URI相对地址\n    stats uri   &#x2F;dbs\n\t#统计报告格式\n    stats realm     Global\\ statistics\n\t#登陆帐户信息\n    stats auth  admin:123456\n#数据库负载均衡\nlisten  proxy-mysql\n\t#访问的IP和端口\n\tbind  0.0.0.0:3306  \n    #网络协议\n\tmode  tcp\n\t#负载均衡算法（轮询算法）\n\t#轮询算法：roundrobin\n\t#权重算法：static-rr\n\t#最少连接算法：leastconn\n\t#请求源IP算法：source \n    balance  roundrobin\n\t#日志格式\n    option  tcplog\n\t#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测\n    option  mysql-check user haproxy\n    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  \n    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  \n\tserver  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 \n\tserver  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000\n\tserver  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000\n\t#使用keepalive检测死链\n    option  tcpka  </code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：<br>1）、option部分，记得在MySQL创建一个没有权限的用户haproxy；CREATE USER ‘haproxy‘@’%’ IDENTIFIED BY ‘’;<br>2）、server部分，记得这里3306是容器的端口，不是宿主机的端口。</p></blockquote>\n<p>8.创建两个Haproxy容器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">#创建第1个Haproxy负载均衡服务器\ndocker run -it -d -p 4001:8888 -p 4002:3306 -v &#x2F;home&#x2F;soft&#x2F;haproxy:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy --name h1 --privileged --net&#x3D;net1 --ip 172.18.0.7 haproxy\n#进入h1容器，启动Haproxy\ndocker exec -it h1 bash\nhaproxy -f &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg\n#创建第2个Haproxy负载均衡服务器\ndocker run -it -d -p 4003:8888 -p 4004:3306 -v &#x2F;home&#x2F;soft&#x2F;haproxy:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy --name h2 --privileged --net&#x3D;net1 --ip 172.18.0.8 haproxy\n#进入h2容器，启动Haproxy\ndocker exec -it h2 bash\nhaproxy -f &#x2F;usr&#x2F;local&#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg</code></pre>\n<p>9.Haproxy容器内安装Keepalived，设置虚拟IP</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意事项：云主机不支持虚拟IP，另外很多公司的网络禁止创建虚拟IP（回家创建）,还有宿主机一定要关闭防火墙和SELINUX，很多同学因为这个而失败的，切记</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">#进入h1容器\ndocker exec -it h1 bash\n#更新软件包\napt-get update\n#安装VIM\napt-get install vim\n#安装Keepalived\napt-get install keepalived\n#编辑Keepalived配置文件（参考下方配置文件）\nvim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf\n#启动Keepalived\nservice keepalived start\n#宿主机执行ping命令\nping 172.18.0.201</code></pre>\n<p>配置文件内容如下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><div class=\"caption\"><span>script</span></div><code class=\"language-bash\">vrrp_instance  VI_1 &#123;\n       state  MASTER\n       interface  eth0\n       virtual_router_id  51\n       priority  100\n       advert_int  1\n       authentication &#123;\n           auth_type  PASS\n           auth_pass  123456\n       &#125;\n       virtual_ipaddress &#123;\n           172.18.0.201\n       &#125;\n   &#125;</code></pre>\n","text":"docker环境部署集群前后端分离项目一、基础1.Docker虚拟机常用命令1.先更新软件包 scriptyum -y update 2.安装Docker虚拟机 scriptyum install -y docker 3.运行、重启、关闭Docker虚拟机 scriptservi...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"docker","slug":"docker","count":2,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#docker%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E9%9B%86%E7%BE%A4%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">docker环境部署集群前后端分离项目</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">一、基础</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Docker%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">1.Docker虚拟机常用命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-PXC%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">2.PXC集群</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"开发环境配置","uid":"f608ca61f1cd18e3f4abde5dcaf441ba","slug":"common/开发环境配置","date":"2022-10-16T02:36:44.000Z","updated":"2023-02-03T05:14:05.341Z","comments":true,"path":"api/articles/common/开发环境配置.json","keywords":"chriswood blogs sharing","cover":null,"text":"开发环境配置篇nodewindowsnvm for windows GitHub地址: https://github.com/coreybutler/nvm-windows/releases推荐使用nvm-setup.exe 自动创建环境变量NVM_HOME和NVM_SYMLIN...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"python node java","slug":"python-node-java","count":1,"path":"api/tags/python-node-java.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java高并发专题-JUC线程池","uid":"ab71b7b05749a5527c735a9fb6d5af98","slug":"java/concurrent/Java高并发专题-JUC线程池","date":"2022-10-08T08:55:43.000Z","updated":"2023-02-03T05:14:05.345Z","comments":true,"path":"api/articles/java/concurrent/Java高并发专题-JUC线程池.json","keywords":"chriswood blogs sharing","cover":null,"text":"线程池Executor框架接口 Executors.newCachedThreadPool() 创建缓存线程池public class ThreadPoolExample1 &#123; public static void main(String[] args) &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Java高并发专题","slug":"Java高并发专题","count":1,"path":"api/categories/Java高并发专题.json"}],"tags":[{"name":"Java高并发专题","slug":"Java高并发专题","count":1,"path":"api/tags/Java高并发专题.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/ChrisWood-CN","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
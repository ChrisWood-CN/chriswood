{"title":"docker镜像构建方式","uid":"05c6b7bccc0f16753e9101299bf620c9","slug":"docker/docker镜像构建方式","date":"2023-02-08T03:04:06.000Z","updated":"2023-06-30T02:33:00.397Z","comments":true,"path":"api/articles/docker/docker镜像构建方式.json","keywords":"chriswood blogs sharing","cover":null,"content":"<p>创建镜像的方法主要有三种：</p>\n<ul>\n<li>基于已有镜像的容器创建</li>\n<li>基于本地模板导入</li>\n<li>基于Dockerfile创建（*推荐）</li>\n</ul>\n<h2 id=\"一、基于容器创建镜像\"><a href=\"#一、基于容器创建镜像\" class=\"headerlink\" title=\"一、基于容器创建镜像\"></a>一、基于容器创建镜像</h2><p>基于已有容器构建镜像主要是通过docker commit命令来构建新的镜像，语法规则如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker commit [OPTIONS] CONTAINER [REPOSITORY:TAG]\ndocker commit -m &quot;centos7+java8+zh&quot; -a &quot;chriswoodcn&quot; 4b40b9568be3 centos7_java8_zh:1.0.0\n# 上面-m选项指定了新镜像的提交信息，-a标注作者信息，4b40b9568be3是容器ID，centos7_java8_zh:1.0.0是指定的新镜像名称和版本。</code></pre>\n\n<h2 id=\"二、基于本地模板导入\"><a href=\"#二、基于本地模板导入\" class=\"headerlink\" title=\"二、基于本地模板导入\"></a>二、基于本地模板导入</h2><p>用户也可以从模板文件中导入镜像，主要使用docker import命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 创造出一个模板，即 将容器导入到一个模板文件中\ndocker export 4b40b9568be3 &gt; &#x2F;root&#x2F;centos7_java8_zh.tar\n# 利用模板导入成镜像\ndocker import &#x2F;root&#x2F;centos7_java8_zh.tar chriswoodcn&#x2F;centos7_java8_zh:1.0\ndocker images\n# REPOSITORY                        TAG                 IMAGE ID            CREATED             SIZE\n# chriswoodcn&#x2F;centos7_java8_zh      1.0              498afccbfb2d        5 seconds ago          560MB</code></pre>\n\n<h2 id=\"三、基于Dockerfile构建\"><a href=\"#三、基于Dockerfile构建\" class=\"headerlink\" title=\"三、基于Dockerfile构建\"></a>三、基于Dockerfile构建</h2><p>基于Dockerfile构建镜像就目前而言是使用最为广泛的 Dockerfile是由一组指令组成的文件，其每条指令对应Linux中的一条命令，Docker程序通过读取Dockerfile中的指令最终生成镜像。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">指令</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">FROM 镜像名称</td>\n<td align=\"left\">指定新镜像基于的镜像，第一条指令必须为FROM指令</td>\n</tr>\n<tr>\n<td align=\"left\">MAINTAINER 名字</td>\n<td align=\"left\">镜像维护人信息</td>\n</tr>\n<tr>\n<td align=\"left\">RUN 命令</td>\n<td align=\"left\">在基于的镜像上执行命令，并提交到新镜像中，可以多条</td>\n</tr>\n<tr>\n<td align=\"left\">CMD[“要运行的程序”,”参数1”,”参数2”]</td>\n<td align=\"left\">指定启动容器时要执行的命令或者脚本 Dockerfile只能有一条CMD命令 不可以追加命令</td>\n</tr>\n<tr>\n<td align=\"left\">EXPOSE 端口号</td>\n<td align=\"left\">指定新镜像加载到docker时要开启的端口号</td>\n</tr>\n<tr>\n<td align=\"left\">ENV 环境变量 变量值</td>\n<td align=\"left\">设置环境变量 后面可以使用 可以多个</td>\n</tr>\n<tr>\n<td align=\"left\">ADD 源文件&#x2F;目录 目标文件&#x2F;目录</td>\n<td align=\"left\">将源文件复制到目标文件</td>\n</tr>\n<tr>\n<td align=\"left\">COPY 源文件&#x2F;目录 目标文件&#x2F;目录</td>\n<td align=\"left\">将主机上的文件&#x2F;目录复制到目标地点</td>\n</tr>\n<tr>\n<td align=\"left\">VOLUME[“目录”]</td>\n<td align=\"left\">在容器中创建一个挂载点</td>\n</tr>\n<tr>\n<td align=\"left\">USER 用户名&#x2F;UID</td>\n<td align=\"left\">指定运行容器时的用户</td>\n</tr>\n<tr>\n<td align=\"left\">WORKDIR 路径</td>\n<td align=\"left\">为后续的RUN、CMD、ENTRYPOINT指定工作目录</td>\n</tr>\n<tr>\n<td align=\"left\">ONBUILD 命令</td>\n<td align=\"left\">指定所生成的镜像作为一个基础镜像时所要运行的命令</td>\n</tr>\n<tr>\n<td align=\"left\">HEALTHCHECK</td>\n<td align=\"left\">健康检查</td>\n</tr>\n<tr>\n<td align=\"left\">ENTRYPOINT</td>\n<td align=\"left\">指定镜像的默认入口命令，该入口命令会在启动容器时作为根命令执行，所有其他传入值作为该命令的参数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>ENTRYPOINT写法<ol>\n<li>exec 格式 -&gt; ENTRYPOINT [“executable”, “param1”, “param2”]</li>\n<li>shell 格式 -&gt; ENTRYPOINT command param1 param2</li>\n</ol>\n</li>\n<li>CMD 和 ENTRYPOINT 区别</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">CMD                   # 指定这个容器启动的时候要运行的命令，不可以追加命令\nENTRYPOINT            # 指定这个容器启动的时候要运行的命令，可以追加命令</code></pre>\n\n<ul>\n<li>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></pre>\n\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">#dockerfile\n#指定父镜像\nFROM centos:centos7\n#指定维护者信息\nMAINTAINER chriswoodcn \nRUN mkdir -p &#x2F;fitness&#x2F;server\nRUN mkdir -p &#x2F;fitness&#x2F;server&#x2F;logs\nRUN mkdir -p &#x2F;fitness&#x2F;server&#x2F;temp\n\nWORKDIR &#x2F;fitness&#x2F;server\n\nENV SERVER_PORT&#x3D;8080\nENV ACTIVE&#x3D;dev\n\nEXPOSE $&#123;SERVER_PORT&#125;\n\nADD .&#x2F;target&#x2F;fitness-admin.jar .&#x2F;app.jar\n\nENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;, &quot;-Dserver.port&#x3D;$&#123;SERVER_PORT&#125;&quot;,&quot;-jar&quot;,&quot;-Dspring.profiles.active&#x3D;$&#123;ACTIVE&#125;&quot;,&quot;-Dfile.encoding&#x3D;UTF-8&quot;,&quot;app.jar&quot;]</code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker build -f dockerfile -t fitness-server:1.0.0 .</code></pre>\n\n<h2 id=\"四、将本地Docker镜像上传到Docker-Hub上\"><a href=\"#四、将本地Docker镜像上传到Docker-Hub上\" class=\"headerlink\" title=\"四、将本地Docker镜像上传到Docker Hub上\"></a>四、将本地Docker镜像上传到Docker Hub上</h2><p>1.创建并登录<a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker login --username&#x3D;chriswoodcn\n# 提示输入密码，正确输入密码后，提示Login Succeeded</code></pre>\n\n<p>2.构建镜像</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker build -f centos7_java8_zh_dockerfile -t chriswoodcn&#x2F;centos7_java8_zh  .</code></pre>\n\n<p>3.网页登录Docker Hub，创建仓库chriswoodcn&#x2F;centos7_java8_zh 4.给镜像打标签</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker tag chriswoodcn&#x2F;centos7_java8_zh chriswoodcn&#x2F;centos7_java8_zh:1.1.0</code></pre>\n\n<p>5.上传镜像到Docker Hub上</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">docker push chriswoodcn&#x2F;centos7_java8_zh:1.1.0</code></pre>\n\n<h3 id=\"五、多阶段构建\"><a href=\"#五、多阶段构建\" class=\"headerlink\" title=\"五、多阶段构建\"></a>五、多阶段构建</h3><p>多阶段构建指在Dockerfile中使用多个FROM语句，每个FROM指令都可以使用不同的基础镜像，并且是一个独立的子构建阶段。 使用多阶段构建打包Java应用具有构建安全、构建速度快、镜像文件体积小等优点</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">#例子\n#First statge : define basic image for build\nFROM maven:3.6.0-jdk-8-alpine AS mj\n#add pom.xml and source code\nADD .&#x2F;pom.xml pom.xml\nADD .&#x2F;src src&#x2F;\n#build code and generate jar package\nRUN mvn clean package\n\n#Second stage: define mini image of java\nFrom openjdk:8-jre-alpine\n#copy jar from the first stage\nCOPY --from&#x3D;mj target&#x2F;my-app-1.0-SNAPSHOT.jar my-app-1.0-SNAPSHOT.jar\n#expose service port\nEXPOSE 8080\n#start service\nCMD [&quot;java&quot;, &quot;-jar&quot;, &quot;my-app-1.0-SNAPSHOT.jar&quot;]</code></pre>\n","text":"创建镜像的方法主要有三种： 基于已有镜像的容器创建 基于本地模板导入 基于Dockerfile创建（*推荐） 一、基于容器创建镜像基于已有容器构建镜像主要是通过docker commit命令来构建新的镜像，语法规则如下： docker commit [OPTIONS] CONTA...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker镜像构建","slug":"docker镜像构建","count":1,"path":"api/tags/docker镜像构建.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E5%9F%BA%E4%BA%8E%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">一、基于容器创建镜像</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E5%9F%BA%E4%BA%8E%E6%9C%AC%E5%9C%B0%E6%A8%A1%E6%9D%BF%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">二、基于本地模板导入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81%E5%9F%BA%E4%BA%8EDockerfile%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">三、基于Dockerfile构建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E5%B0%86%E6%9C%AC%E5%9C%B0Docker%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E5%88%B0Docker-Hub%E4%B8%8A\"><span class=\"toc-text\">四、将本地Docker镜像上传到Docker Hub上</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">五、多阶段构建</span></a></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"docker-repository","uid":"6e09d1f5d84f92c2bc7207691b14094e","slug":"docker/docker-repository","date":"2023-02-09T03:12:06.000Z","updated":"2023-06-30T02:33:00.397Z","comments":true,"path":"api/articles/docker/docker-repository.json","keywords":"chriswood blogs sharing","cover":null,"text":"docker镜像制作alpine_java8_zhv1.0.01.dockerfileFROM openjdk:8-jdk-alpine # 添加timeZone RUN echo &#39;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;al...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker-repository","slug":"docker-repository","count":1,"path":"api/tags/docker-repository.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"springboot日志配置","uid":"6bb5feb5ebe53be9e2c2838a6f221b1e","slug":"springboot/springboot日志配置","date":"2023-02-07T06:59:47.000Z","updated":"2023-06-30T02:33:00.409Z","comments":true,"path":"api/articles/springboot/springboot日志配置.json","keywords":"chriswood blogs sharing","cover":null,"text":"默认日志 Logback默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。 spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot默认的日志框架 ...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"springboot","slug":"springboot","count":2,"path":"api/categories/springboot.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"},{"name":"springboot配置","slug":"springboot配置","count":2,"path":"api/tags/springboot配置.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
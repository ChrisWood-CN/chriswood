{"title":"docker-entrypoint.sh脚本","uid":"bd89df672fae4e3ad93a3365c0b7431d","slug":"docker/docker-entrypoint-sh脚本","date":"2023-06-09T06:13:44.000Z","updated":"2023-07-03T09:32:59.595Z","comments":true,"path":"api/articles/docker/docker-entrypoint-sh脚本.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"出处\"><a href=\"#出处\" class=\"headerlink\" title=\"出处\"></a>出处</h2><p>很多著名库的Dockerfile文件中，通常都是ENTRYPOINT字段是这样：</p>\n<pre class=\"line-numbers language-docker\" data-language=\"docker\"><code class=\"language-docker\">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</code></pre>\n<h2 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h2><p>我们参考分析下MySQL的Dockerfile文件，来认识下docker-entrypoint.sh的用处</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#!&#x2F;bin&#x2F;bash\nset -eo pipefail\nshopt -s nullglob\n\n# if command starts with an option, prepend mysqld\nif [ &quot;$&#123;1:0:1&#125;&quot; &#x3D; &#39;-&#39; ]; then\n\tset -- mysqld &quot;$@&quot;\nfi\n\n# skip setup if they want an option that stops mysqld\nwantHelp&#x3D;\nfor arg; do\n\tcase &quot;$arg&quot; in\n\t\t-&#39;?&#39;|--help|--print-defaults|-V|--version)\n\t\t\twantHelp&#x3D;1\n\t\t\tbreak\n\t\t\t;;\n\tesac\ndone\n\n# usage: file_env VAR [DEFAULT]\n#    ie: file_env &#39;XYZ_DB_PASSWORD&#39; &#39;example&#39;\n# (will allow for &quot;$XYZ_DB_PASSWORD_FILE&quot; to fill in the value of\n#  &quot;$XYZ_DB_PASSWORD&quot; from a file, especially for Docker&#39;s secrets feature)\nfile_env() &#123;\n\tlocal var&#x3D;&quot;$1&quot;\n\tlocal fileVar&#x3D;&quot;$&#123;var&#125;_FILE&quot;\n\tlocal def&#x3D;&quot;$&#123;2:-&#125;&quot;\n\tif [ &quot;$&#123;!var:-&#125;&quot; ] &amp;&amp; [ &quot;$&#123;!fileVar:-&#125;&quot; ]; then\n\t\techo &gt;&amp;2 &quot;error: both $var and $fileVar are set (but are exclusive)&quot;\n\t\texit 1\n\tfi\n\tlocal val&#x3D;&quot;$def&quot;\n\tif [ &quot;$&#123;!var:-&#125;&quot; ]; then\n\t\tval&#x3D;&quot;$&#123;!var&#125;&quot;\n\telif [ &quot;$&#123;!fileVar:-&#125;&quot; ]; then\n\t\tval&#x3D;&quot;$(&lt; &quot;$&#123;!fileVar&#125;&quot;)&quot;\n\tfi\n\texport &quot;$var&quot;&#x3D;&quot;$val&quot;\n\tunset &quot;$fileVar&quot;\n&#125;\n\n# usage: process_init_file FILENAME MYSQLCOMMAND...\n#    ie: process_init_file foo.sh mysql -uroot\n# (process a single initializer file, based on its extension. we define this\n# function here, so that initializer scripts (*.sh) can use the same logic,\n# potentially recursively, or override the logic used in subsequent calls)\nprocess_init_file() &#123;\n\tlocal f&#x3D;&quot;$1&quot;; shift\n\tlocal mysql&#x3D;( &quot;$@&quot; )\n\n\tcase &quot;$f&quot; in\n\t\t*.sh)     echo &quot;$0: running $f&quot;; . &quot;$f&quot; ;;\n\t\t*.sql)    echo &quot;$0: running $f&quot;; &quot;$&#123;mysql[@]&#125;&quot; &lt; &quot;$f&quot;; echo ;;\n\t\t*.sql.gz) echo &quot;$0: running $f&quot;; gunzip -c &quot;$f&quot; | &quot;$&#123;mysql[@]&#125;&quot;; echo ;;\n\t\t*)        echo &quot;$0: ignoring $f&quot; ;;\n\tesac\n\techo\n&#125;\n\n_check_config() &#123;\n\ttoRun&#x3D;( &quot;$@&quot; --verbose --help )\n\tif ! errors&#x3D;&quot;$(&quot;$&#123;toRun[@]&#125;&quot; 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null)&quot;; then\n\t\tcat &gt;&amp;2 &lt;&lt;-EOM\n\n\t\t\tERROR: mysqld failed while attempting to check config\n\t\t\tcommand was: &quot;$&#123;toRun[*]&#125;&quot;\n\n\t\t\t$errors\n\t\tEOM\n\t\texit 1\n\tfi\n&#125;\n\n# Fetch value from server config\n# We use mysqld --verbose --help instead of my_print_defaults because the\n# latter only show values present in config files, and not server defaults\n_get_config() &#123;\n\tlocal conf&#x3D;&quot;$1&quot;; shift\n\t&quot;$@&quot; --verbose --help --log-bin-index&#x3D;&quot;$(mktemp -u)&quot; 2&gt;&#x2F;dev&#x2F;null \\\n\t\t| awk &#39;$1 &#x3D;&#x3D; &quot;&#39;&quot;$conf&quot;&#39;&quot; &amp;&amp; &#x2F;^[^ \\t]&#x2F; &#123; sub(&#x2F;^[^ \\t]+[ \\t]+&#x2F;, &quot;&quot;); print; exit &#125;&#39;\n\t# match &quot;datadir      &#x2F;some&#x2F;path with&#x2F;spaces in&#x2F;it here&quot; but not &quot;--xyz&#x3D;abc\\n     datadir (xyz)&quot;\n&#125;\n\n# allow the container to be started with &#96;--user&#96;\nif [ &quot;$1&quot; &#x3D; &#39;mysqld&#39; -a -z &quot;$wantHelp&quot; -a &quot;$(id -u)&quot; &#x3D; &#39;0&#39; ]; then\n\t_check_config &quot;$@&quot;\n\tDATADIR&#x3D;&quot;$(_get_config &#39;datadir&#39; &quot;$@&quot;)&quot;\n\tmkdir -p &quot;$DATADIR&quot;\n\tchown -R mysql:mysql &quot;$DATADIR&quot;\n\texec gosu mysql &quot;$BASH_SOURCE&quot; &quot;$@&quot;\nfi\n\nif [ &quot;$1&quot; &#x3D; &#39;mysqld&#39; -a -z &quot;$wantHelp&quot; ]; then\n\t# still need to check config, container may have started with --user\n\t_check_config &quot;$@&quot;\n\t# Get config\n\tDATADIR&#x3D;&quot;$(_get_config &#39;datadir&#39; &quot;$@&quot;)&quot;\n\n\tif [ ! -d &quot;$DATADIR&#x2F;mysql&quot; ]; then\n\t\tfile_env &#39;MYSQL_ROOT_PASSWORD&#39;\n\t\tif [ -z &quot;$MYSQL_ROOT_PASSWORD&quot; -a -z &quot;$MYSQL_ALLOW_EMPTY_PASSWORD&quot; -a -z &quot;$MYSQL_RANDOM_ROOT_PASSWORD&quot; ]; then\n\t\t\techo &gt;&amp;2 &#39;error: database is uninitialized and password option is not specified &#39;\n\t\t\techo &gt;&amp;2 &#39;  You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD&#39;\n\t\t\texit 1\n\t\tfi\n\n\t\tmkdir -p &quot;$DATADIR&quot;\n\n\t\techo &#39;Initializing database&#39;\n\t\t&quot;$@&quot; --initialize-insecure\n\t\techo &#39;Database initialized&#39;\n\n\t\tif command -v mysql_ssl_rsa_setup &gt; &#x2F;dev&#x2F;null &amp;&amp; [ ! -e &quot;$DATADIR&#x2F;server-key.pem&quot; ]; then\n\t\t\t# https:&#x2F;&#x2F;github.com&#x2F;mysql&#x2F;mysql-server&#x2F;blob&#x2F;23032807537d8dd8ee4ec1c4d40f0633cd4e12f9&#x2F;packaging&#x2F;deb-in&#x2F;extra&#x2F;mysql-systemd-start#L81-L84\n\t\t\techo &#39;Initializing certificates&#39;\n\t\t\tmysql_ssl_rsa_setup --datadir&#x3D;&quot;$DATADIR&quot;\n\t\t\techo &#39;Certificates initialized&#39;\n\t\tfi\n\n\t\tSOCKET&#x3D;&quot;$(_get_config &#39;socket&#39; &quot;$@&quot;)&quot;\n\t\t&quot;$@&quot; --skip-networking --socket&#x3D;&quot;$&#123;SOCKET&#125;&quot; &amp;\n\t\tpid&#x3D;&quot;$!&quot;\n\n\t\tmysql&#x3D;( mysql --protocol&#x3D;socket -uroot -hlocalhost --socket&#x3D;&quot;$&#123;SOCKET&#125;&quot; )\n\n\t\tfor i in &#123;30..0&#125;; do\n\t\t\tif echo &#39;SELECT 1&#39; | &quot;$&#123;mysql[@]&#125;&quot; &amp;&gt; &#x2F;dev&#x2F;null; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\techo &#39;MySQL init process in progress...&#39;\n\t\t\tsleep 1\n\t\tdone\n\t\tif [ &quot;$i&quot; &#x3D; 0 ]; then\n\t\t\techo &gt;&amp;2 &#39;MySQL init process failed.&#39;\n\t\t\texit 1\n\t\tfi\n\n\t\tif [ -z &quot;$MYSQL_INITDB_SKIP_TZINFO&quot; ]; then\n\t\t\t# sed is for https:&#x2F;&#x2F;bugs.mysql.com&#x2F;bug.php?id&#x3D;20545\n\t\t\tmysql_tzinfo_to_sql &#x2F;usr&#x2F;share&#x2F;zoneinfo | sed &#39;s&#x2F;Local time zone must be set--see zic manual page&#x2F;FCTY&#x2F;&#39; | &quot;$&#123;mysql[@]&#125;&quot; mysql\n\t\tfi\n\n\t\tif [ ! -z &quot;$MYSQL_RANDOM_ROOT_PASSWORD&quot; ]; then\n\t\t\texport MYSQL_ROOT_PASSWORD&#x3D;&quot;$(pwgen -1 32)&quot;\n\t\t\techo &quot;GENERATED ROOT PASSWORD: $MYSQL_ROOT_PASSWORD&quot;\n\t\tfi\n\n\t\trootCreate&#x3D;\n\t\t# default root to listen for connections from anywhere\n\t\tfile_env &#39;MYSQL_ROOT_HOST&#39; &#39;%&#39;\n\t\tif [ ! -z &quot;$MYSQL_ROOT_HOST&quot; -a &quot;$MYSQL_ROOT_HOST&quot; !&#x3D; &#39;localhost&#39; ]; then\n\t\t\t# no, we don&#39;t care if read finds a terminating character in this heredoc\n\t\t\t# https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;265149&#x2F;why-is-set-o-errexit-breaking-this-read-heredoc-expression&#x2F;265151#265151\n\t\t\tread -r -d &#39;&#39; rootCreate &lt;&lt;-EOSQL || true\n\t\t\t\tCREATE USER &#39;root&#39;@&#39;$&#123;MYSQL_ROOT_HOST&#125;&#39; IDENTIFIED BY &#39;$&#123;MYSQL_ROOT_PASSWORD&#125;&#39; ;\n\t\t\t\tGRANT ALL ON *.* TO &#39;root&#39;@&#39;$&#123;MYSQL_ROOT_HOST&#125;&#39; WITH GRANT OPTION ;\n\t\t\tEOSQL\n\t\tfi\n\n\t\t&quot;$&#123;mysql[@]&#125;&quot; &lt;&lt;-EOSQL\n\t\t\t-- What&#39;s done in this file shouldn&#39;t be replicated\n\t\t\t--  or products like mysql-fabric won&#39;t work\n\t\t\tSET @@SESSION.SQL_LOG_BIN&#x3D;0;\n\n\t\t\tALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;$&#123;MYSQL_ROOT_PASSWORD&#125;&#39; ;\n\t\t\tGRANT ALL ON *.* TO &#39;root&#39;@&#39;localhost&#39; WITH GRANT OPTION ;\n\t\t\t$&#123;rootCreate&#125;\n\t\t\tDROP DATABASE IF EXISTS test ;\n\t\t\tFLUSH PRIVILEGES ;\n\t\tEOSQL\n\n\t\tif [ ! -z &quot;$MYSQL_ROOT_PASSWORD&quot; ]; then\n\t\t\tmysql+&#x3D;( -p&quot;$&#123;MYSQL_ROOT_PASSWORD&#125;&quot; )\n\t\tfi\n\n\t\tfile_env &#39;MYSQL_DATABASE&#39;\n\t\tif [ &quot;$MYSQL_DATABASE&quot; ]; then\n\t\t\techo &quot;CREATE DATABASE IF NOT EXISTS \\&#96;$MYSQL_DATABASE\\&#96; ;&quot; | &quot;$&#123;mysql[@]&#125;&quot;\n\t\t\tmysql+&#x3D;( &quot;$MYSQL_DATABASE&quot; )\n\t\tfi\n\n\t\tfile_env &#39;MYSQL_USER&#39;\n\t\tfile_env &#39;MYSQL_PASSWORD&#39;\n\t\tif [ &quot;$MYSQL_USER&quot; -a &quot;$MYSQL_PASSWORD&quot; ]; then\n\t\t\techo &quot;CREATE USER &#39;$MYSQL_USER&#39;@&#39;%&#39; IDENTIFIED BY &#39;$MYSQL_PASSWORD&#39; ;&quot; | &quot;$&#123;mysql[@]&#125;&quot;\n\n\t\t\tif [ &quot;$MYSQL_DATABASE&quot; ]; then\n\t\t\t\techo &quot;GRANT ALL ON \\&#96;$MYSQL_DATABASE\\&#96;.* TO &#39;$MYSQL_USER&#39;@&#39;%&#39; ;&quot; | &quot;$&#123;mysql[@]&#125;&quot;\n\t\t\tfi\n\n\t\t\techo &#39;FLUSH PRIVILEGES ;&#39; | &quot;$&#123;mysql[@]&#125;&quot;\n\t\tfi\n\n\t\techo\n\t\tls &#x2F;docker-entrypoint-initdb.d&#x2F; &gt; &#x2F;dev&#x2F;null\n\t\tfor f in &#x2F;docker-entrypoint-initdb.d&#x2F;*; do\n\t\t\tprocess_init_file &quot;$f&quot; &quot;$&#123;mysql[@]&#125;&quot;\n\t\tdone\n\n\t\tif [ ! -z &quot;$MYSQL_ONETIME_PASSWORD&quot; ]; then\n\t\t\t&quot;$&#123;mysql[@]&#125;&quot; &lt;&lt;-EOSQL\n\t\t\t\tALTER USER &#39;root&#39;@&#39;%&#39; PASSWORD EXPIRE;\n\t\t\tEOSQL\n\t\tfi\n\t\tif ! kill -s TERM &quot;$pid&quot; || ! wait &quot;$pid&quot;; then\n\t\t\techo &gt;&amp;2 &#39;MySQL init process failed.&#39;\n\t\t\texit 1\n\t\tfi\n\n\t\techo\n\t\techo &#39;MySQL init process done. Ready for start up.&#39;\n\t\techo\n\tfi\nfi\n\nexec &quot;$@&quot;</code></pre>\n<p>在启动容器时，可以通过shell脚本执行些预处理逻辑，然后通过exec “$@”，把启动容器入口正式交给使用者</p>\n<h2 id=\"文件编辑\"><a href=\"#文件编辑\" class=\"headerlink\" title=\"文件编辑\"></a>文件编辑</h2><h4 id=\"set-e\"><a href=\"#set-e\" class=\"headerlink\" title=\"set -e\"></a>set -e</h4><p>你写的每个脚本都应该在文件开头加上set -e, 这句语句告诉bash如果任何语句的执行结果不是true则应该退出.<br>这样的好处是防止错误像滚雪球般变大导致一个致命的错误, 而这些错误本应该在之前就被处理掉. 如果要增加可<br>读性, 可以使用set -o errexit, 它的作用与set -e相同</p>\n<h4 id=\"set-o-pipefail\"><a href=\"#set-o-pipefail\" class=\"headerlink\" title=\"set -o pipefail\"></a>set -o pipefail</h4><p>设计用途同上, 就是希望在执行错误之后立即退出, 不要再向下执行了. 而 -o pipefail 的作用域是管道, 也<br>就是说在Linux脚本中的管道, 如果前面的命令执行出了问题, 应该立即退出</p>\n<h4 id=\"shopt-s-nullglob\"><a href=\"#shopt-s-nullglob\" class=\"headerlink\" title=\"shopt -s nullglob\"></a>shopt -s nullglob</h4><p>在使用Linux中的通配符时 * ?等如果没有匹配到任何文件, 不会报 No such file or directory 而是将命<br>令后面的参数去掉执行</p>\n<h4 id=\"if-“-1-0-1-”-x3D-‘-‘-then…\"><a href=\"#if-“-1-0-1-”-x3D-‘-‘-then…\" class=\"headerlink\" title=\"if [ “${1:0:1}” &#x3D; ‘-‘ ]; then…\"></a>if [ “${1:0:1}” &#x3D; ‘-‘ ]; then…</h4><p>这是一个判断语句, 在官方文件中, 上一行已经给出了注释: if command starts with an option, prepend<br>mysqld 这个判断语句是 ${1:0:1} 意思是判断 $1(调用该脚本的第一个参数), 偏移量0(不偏移), 取一个字符<br>(取字符串的长度)如果判断出来调用这个脚本后面所跟的参数第一个字符是-中横线的话, 就认为后面的所有字符串都<br>是 mysqld 的启动参数 上面的这个操作类似于 Python 的字符串切片</p>\n<h4 id=\"set-–-mysqld-“-”\"><a href=\"#set-–-mysqld-“-”\" class=\"headerlink\" title=\"set – mysqld “$@”\"></a>set – mysqld “$@”</h4><p>在上面判断完第一个参数是-开头之后, 紧接着就执行了 set – mysqld “$@” 这个命令. 使用了 set – 的用<br>法. set —会将他后面所有以空格区分的字符串, 按顺序分别存储到$1, $2, $3 变量中, 其中新的$@ 为 set —<br>后面的全部内容<br>举例来说: bash docker-entrypoint.sh -f xxx.conf<br>在这种情况下, set – mysqld “$@” 中的 $@ 的值为 -f xxx.conf<br>当执行完 set – mysqld “$@” 这条命令后:<br>$1&#x3D;mysqld<br>$2&#x3D;-f<br>$3&#x3D;xxx.conf<br>$@&#x3D;mysqld -f xxx.conf<br>可以看到, 当执行 docker-entrypoint.sh脚本的时候后面加了 -x形式的参数之后, $@的值发生的改变, 在原有<br>$@值的基础之上, 在前面又预添加了 mysqld 命令</p>\n<h4 id=\"exec-“-”\"><a href=\"#exec-“-”\" class=\"headerlink\" title=\"exec “$@”\"></a>exec “$@”</h4><p>几乎在每个 docker-entrypoint.sh 脚本的最后一行, 执行的都是 exec “$@”命令<br>这个命令的意义在于你已经为你的镜像预想到了应该有的调用情况, 当实际使用镜像的人执行了你没有预料到的可执行<br>命令时, 将会走到脚本的这最后一行, 去执行用户新的可执行命令</p>\n<h4 id=\"情况判断\"><a href=\"#情况判断\" class=\"headerlink\" title=\"情况判断\"></a>情况判断</h4><p>上面直接说了脚本的最后一行, 在之前的脚本中, 需要充分的去考虑你自己的脚本可能会被调用的情况. 还是拿MySQL<br>官方的dockerfile来说, 他判断以下情况:<br>开头是 - , 认为是参数的情况<br>开头是 mysqld, 且用户 id 为0 (root 用户) 的情况<br>开头是 mysqld 的情况<br>判断完自己应用的所有调用形态之后, 最后应该加上exec “$@” 命令兜底</p>\n<h4 id=\"mysql\"><a href=\"#mysql\" class=\"headerlink\" title=\"${mysql[@]}\"></a>${mysql[@]}</h4><p>Shell 中的数组, 直接执行 ${mysql[@]} 会把这个数组当做可执行程序来执行</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mysql&#x3D;( mysql --protocol&#x3D;socket -uroot -hlocalhost --socket&#x3D;&quot;$&#123;SOCKET&#125;&quot; )\necho $&#123;mysql[1]&#125;\n#mysql\necho $&#123;mysql[2]&#125;\n#--protocol&#x3D;socket\necho $&#123;mysql[3]&#125;\n#-uroot\necho $&#123;mysql[4]&#125;\n#-hlocalhost\necho $&#123;mysql[@]&#125;\nmysql --protocol&#x3D;socket -uroot -hlocalhost --socket&#x3D;</code></pre>\n<h4 id=\"exec-gosu-mysql-“-BASH-SOURCE”-“-”\"><a href=\"#exec-gosu-mysql-“-BASH-SOURCE”-“-”\" class=\"headerlink\" title=\"exec gosu mysql “$BASH_SOURCE” “$@”\"></a>exec gosu mysql “$BASH_SOURCE” “$@”</h4><p>这里的 gosu 命令, 是 Linux 中 sudo 命令的轻量级”替代品”<br>gosu 是一个 golang 语言开发的工具, 用来取代 shell 中的 sudo 命令. su 和 sudo 命令有一些缺陷, 主要<br>是会引起不确定的 TTY, 对信号量的转发也存在问题. 如果仅仅为了使用特定的用户运行程序, 使用 su 或 sudo 显<br>得太重了, 为此 gosu 应运而生.<br>gosu 直接借用了 libcontainer 在容器中启动应用程序的原理, 使用 &#x2F;etc&#x2F;passwd 处理应用程序. gosu 首先<br>找出指定的用户或用户组, 然后切换到该用户或用户组. 接下来, 使用 exec 启动应用程序. 到此为止, gosu 完成<br>了它的工作, 不会参与到应用程序后面的声明周期中. 使用这种方式避免了 gosu 处理 TTY 和转发信号量的问题, 把<br>这两个工作直接交给了应用程序去完成</p>\n","text":"出处很多著名库的Dockerfile文件中，通常都是ENTRYPOINT字段是这样： ENTRYPOINT [&quot;docker-entrypoint.sh&quot;] 用处我们参考分析下MySQL的Dockerfile文件，来认识下docker-entrypoint.s...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":5,"path":"api/tags/docker.json"},{"name":"docker-entrypoint.sh","slug":"docker-entrypoint-sh","count":1,"path":"api/tags/docker-entrypoint-sh.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BA%E5%A4%84\"><span class=\"toc-text\">出处</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E5%A4%84\"><span class=\"toc-text\">用处</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91\"><span class=\"toc-text\">文件编辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#set-e\"><span class=\"toc-text\">set -e</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#set-o-pipefail\"><span class=\"toc-text\">set -o pipefail</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#shopt-s-nullglob\"><span class=\"toc-text\">shopt -s nullglob</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#if-%E2%80%9C-1-0-1-%E2%80%9D-x3D-%E2%80%98-%E2%80%98-then%E2%80%A6\"><span class=\"toc-text\">if [ “${1:0:1}” &#x3D; ‘-‘ ]; then…</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#set-%E2%80%93-mysqld-%E2%80%9C-%E2%80%9D\"><span class=\"toc-text\">set – mysqld “$@”</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#exec-%E2%80%9C-%E2%80%9D\"><span class=\"toc-text\">exec “$@”</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B5%E5%88%A4%E6%96%AD\"><span class=\"toc-text\">情况判断</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#mysql\"><span class=\"toc-text\">${mysql[@]}</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#exec-gosu-mysql-%E2%80%9C-BASH-SOURCE%E2%80%9D-%E2%80%9C-%E2%80%9D\"><span class=\"toc-text\">exec gosu mysql “$BASH_SOURCE” “$@”</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"shell脚本编辑","uid":"26dd4557ea6b40d458e20ec9154add38","slug":"linux/shell脚本编辑","date":"2023-06-09T06:44:00.000Z","updated":"2023-07-03T09:32:59.599Z","comments":true,"path":"api/articles/linux/shell脚本编辑.json","keywords":"chriswood blogs sharing","cover":null,"text":"shell 脚本语法1.demo.sh#!&#x2F;bin&#x2F;bash echo hello world! 给shell脚本可运行权限 chmod +x demo.sh 2.read命令#!&#x2F;bin&#x2F;bash echo &quot;please in...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"shell","slug":"shell","count":1,"path":"api/categories/shell.json"}],"tags":[{"name":"shell","slug":"shell","count":1,"path":"api/tags/shell.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"kubectl多集群环境切换","uid":"a04e64b279ef00352d55ff2b0588cef8","slug":"kubernetes/kubectl多集群环境切换","date":"2023-06-09T03:05:35.000Z","updated":"2023-07-03T09:32:59.599Z","comments":true,"path":"api/articles/kubernetes/kubectl多集群环境切换.json","keywords":"chriswood blogs sharing","cover":null,"text":"官网Referencehttps://kubernetes.io/docs/reference/kubectl/https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands 查看配置文件kubect...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"kubernetes","slug":"kubernetes","count":6,"path":"api/categories/kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":7,"path":"api/tags/kubernetes.json"},{"name":"kubectl","slug":"kubectl","count":1,"path":"api/tags/kubectl.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
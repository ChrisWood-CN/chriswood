{"title":"istio入门","uid":"983f96d2354b5cf26dadd3c84b063a40","slug":"kubernetes/istio入门","date":"2023-06-20T00:14:34.000Z","updated":"2023-07-09T14:30:28.769Z","comments":true,"path":"api/articles/kubernetes/istio入门.json","keywords":"chriswood blogs sharing","cover":null,"content":"<p>##简单部署及开放入口</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>minikube安装</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a></p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">minikube start</code></pre>\n<p>helm安装istio</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://istio.io/latest/zh/docs/setup/install/helm/\">https://istio.io/latest/zh/docs/setup/install/helm/</a></p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">helm repo add istio https:&#x2F;&#x2F;istio-release.storage.googleapis.com&#x2F;charts\nhelm install istio-base istio&#x2F;base -n istio-system --create-namespace\nhelm install istiod istio&#x2F;istiod -n istio-system --wait\nhelm ls -n istio-system\nhelm install istio-ingress istio&#x2F;gateway -n istio-ingress --create-namespace --wait</code></pre>\n<h3 id=\"部署示例应用\"><a href=\"#部署示例应用\" class=\"headerlink\" title=\"部署示例应用\"></a>部署示例应用</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#添加标签，Istio在部署应用的时候，自动注入Envoy代理\nkubectl create namespace bookinfo\nkubectl label namespace bookinfo istio-injection&#x3D;enabled</code></pre>\n<p>kubectl apply -f <a href=\"https://raw.githubusercontent.com/istio/istio/release-1.18/samples/bookinfo/platform/kube/bookinfo.yaml\">bookinfo.yaml</a><br>kubectl apply -f <a href=\"https://raw.githubusercontent.com/istio/istio/release-1.18/samples/bookinfo/networking/bookinfo-gateway.yaml\">bookinfo-gateway.yaml</a></p>\n<h3 id=\"开放入口\"><a href=\"#开放入口\" class=\"headerlink\" title=\"开放入口\"></a>开放入口</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 启动istio ingress后需要开启minikube通道访问容器的网络入口\nminikube tunnel\n# 查看相应地址和端口 并 验证外部访问\nkubectl -n istio-ingress get svc istio-ingressgateway -o yaml</code></pre>\n<h2 id=\"配置请求路由\"><a href=\"#配置请求路由\" class=\"headerlink\" title=\"配置请求路由\"></a>配置请求路由</h2><p>Bookinfo示例包含四个独立的微服务，每个微服务都有多个版本。其中一个微服务reviews的三个不同版本已经部署并同时运行。<br>在浏览器中访问Bookinfo应用程序的&#x2F;productpage并刷新几次。有时书评的输出包含星级评分，有时则不包含。这是因为没有<br>明确的默认服务版本可路由，Istio将以循环方式将请求路由到所有可用版本</p>\n<h3 id=\"路由到版本reviews的版本1\"><a href=\"#路由到版本reviews的版本1\" class=\"headerlink\" title=\"路由到版本reviews的版本1\"></a>路由到版本reviews的版本1</h3><p>有2种实现方式,1.基于k8s规范的gateway.networking.k8s.io&#x2F;v1beta1，HTTPRoute，2.istio自身的networking.istio.io&#x2F;v1alpha3，VirtualService<br>这里用istio自身的VirtualService，需要使用HTTPRoute的参看<a href=\"https://istio.io/latest/zh/docs/tasks/traffic-management/request-routing/\">官网实现</a></p>\n<h4 id=\"DestinationRule\"><a href=\"#DestinationRule\" class=\"headerlink\" title=\"DestinationRule\"></a>DestinationRule</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">--- # DestinationRule - productpage\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: productpage\n  namespace: bookinfo\nspec:\n  host: productpage\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n--- # DestinationRule - reviews\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: reviews\n  namespace: bookinfo\nspec:\n  host: reviews\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2\n    - name: v3\n      labels:\n        version: v3\n--- # DestinationRule - ratings\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: ratings\n  namespace: bookinfo\nspec:\n  host: ratings\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2\n    - name: v2-mysql\n      labels:\n        version: v2-mysql\n    - name: v2-mysql-vm\n      labels:\n        version: v2-mysql-vm\n--- # DestinationRule - details\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: details\n  namespace: bookinfo\nspec:\n  host: details\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2</code></pre>\n<h4 id=\"VirtualService\"><a href=\"#VirtualService\" class=\"headerlink\" title=\"VirtualService\"></a>VirtualService</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">--- # DestinationRule - productpage\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: productpage\n  namespace: bookinfo\nspec:\n  hosts:\n    - productpage\n  http:\n    - route:\n        - destination:\n            host: productpage\n            subset: v1\n--- # DestinationRule - reviews\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\n  namespace: bookinfo\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v3\n--- # DestinationRule - ratings\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: ratings\n  namespace: bookinfo\nspec:\n  hosts:\n    - ratings\n  http:\n    - route:\n        - destination:\n            host: ratings\n            subset: v1 #指定目的地\n--- # DestinationRule - details\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: details\n  namespace: bookinfo\nspec:\n  hosts:\n    - details\n  http:\n    - route:\n        - destination:\n            host: details\n            subset: v1</code></pre>\n<h3 id=\"基于用户身份的路由\"><a href=\"#基于用户身份的路由\" class=\"headerlink\" title=\"基于用户身份的路由\"></a>基于用户身份的路由</h3><p>修改并更新VirtualService-reviews</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    route:\n    - destination:\n        host: reviews\n        subset: v2  #来自名为Jason的用户的所有流量将被路由到服务 reviews:v2\n  - route:\n    - destination:\n        host: reviews\n        subset: v1</code></pre>\n<h2 id=\"故障注入\"><a href=\"#故障注入\" class=\"headerlink\" title=\"故障注入\"></a>故障注入</h2><h3 id=\"注入HTTP延迟故障\"><a href=\"#注入HTTP延迟故障\" class=\"headerlink\" title=\"注入HTTP延迟故障\"></a>注入HTTP延迟故障</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    fault:\n      delay:\n        percentage:\n          value: 100.0\n        fixedDelay: 7s\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n  - route:\n    - destination:\n        host: ratings\n        subset: v1</code></pre>\n<p>按照预期，我们引入的7秒延迟不会影响到reviews服务，因为reviews和ratings服务间的超时被硬编码为10秒。<br>但是，在productpage和reviews服务之间也有一个3秒的硬编码的超时，再加1次重试，一共6秒。 结果<br>productpage对reviews的调用在6秒后提前超时并抛出错误。</p>\n<h5 id=\"错误修复：\"><a href=\"#错误修复：\" class=\"headerlink\" title=\"错误修复：\"></a>错误修复：</h5><p>1.增加 productpage 与 reviews 服务之间的超时或降低 reviews 与 ratings 的超时<br>2.终止并重启修复后的微服务<br>3.确认 &#x2F;productpage 页面正常响应且没有任何错误</p>\n<h3 id=\"注入-HTTP-abort故障\"><a href=\"#注入-HTTP-abort故障\" class=\"headerlink\" title=\"注入 HTTP abort故障\"></a>注入 HTTP abort故障</h3><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - match:\n    - headers:\n        end-user:\n          exact: jason\n    fault:\n      abort:\n        percentage:\n          value: 100.0\n        httpStatus: 500\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n  - route:\n    - destination:\n        host: ratings\n        subset: v1</code></pre>\n\n<h2 id=\"流量转移\"><a href=\"#流量转移\" class=\"headerlink\" title=\"流量转移\"></a>流量转移</h2><p>如何将流量从微服务的一个版本逐步迁移到另一个版本，把50％的流量发送到reviews:v1，另外，50％的流量发送到reviews:v3。<br>接着，再把 100％ 的流量发送到 reviews:v3 来完成迁移<br>先50%过渡，修改并应用VirtualService-reviews</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 50  #权重路由功能\n    - destination:\n        host: reviews\n        subset: v3\n      weight: 50  #权重路由功能</code></pre>\n<p>最后v3版本完全稳定之后，全部修改为v3版本</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v3</code></pre>\n<h2 id=\"TCP流量转移\"><a href=\"#TCP流量转移\" class=\"headerlink\" title=\"TCP流量转移\"></a>TCP流量转移</h2><p>如何将TCP流量从微服务的一个版本迁移到另一个版本，把100%的TCP流量分配到tcp-echo:v1。<br>接着，再通过配置Istio路由权重把20%的TCP流量分配到tcp-echo:v2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl create namespace istio-io-tcp-traffic-shifting\nkubectl label namespace istio-io-tcp-traffic-shifting istio-injection&#x3D;enabled\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;sleep&#x2F;sleep.yaml -n istio-io-tcp-traffic-shifting\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;tcp-echo&#x2F;tcp-echo-services.yaml -n istio-io-tcp-traffic-shifting\n#将所有 TCP 流量路由到微服务 tcp-echo 的 v1 版本。\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;tcp-echo&#x2F;tcp-echo-all-v1.yaml -n istio-io-tcp-traffic-shifting</code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># tcp-echo-all-v1.yaml\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: tcp-echo-gateway\nspec:\n  selector:\n    istio: ingressgateway\n  servers:\n  - port:\n      number: 31400\n      name: tcp\n      protocol: TCP\n    hosts:\n    - &quot;*&quot;\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: tcp-echo-destination\nspec:\n  host: tcp-echo\n  subsets:\n  - name: v1\n    labels:\n      version: v1\n  - name: v2\n    labels:\n      version: v2\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: tcp-echo\nspec:\n  hosts:\n  - &quot;*&quot;\n  gateways:\n  - tcp-echo-gateway\n  tcp:\n  - match:\n    - port: 31400\n    route:\n    - destination:\n        host: tcp-echo\n        port:\n          number: 9000\n        subset: v1</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export SLEEP&#x3D;$(kubectl get pod -l app&#x3D;sleep -n istio-io-tcp-traffic-shifting -o jsonpath&#x3D;&#123;.items..metadata.name&#125;)\n$ for i in &#123;1..20&#125;; do \\\nkubectl exec &quot;$SLEEP&quot; -c sleep -n istio-io-tcp-traffic-shifting -- sh -c &quot;(date; sleep 1) | nc $INGRESS_HOST $TCP_INGRESS_PORT&quot;; \\\ndone</code></pre>\n<p>修改并应用VirtualService-tcp-echo</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: tcp-echo\nspec:\n  hosts:\n  - &quot;*&quot;\n  gateways:\n  - tcp-echo-gateway\n  tcp:\n  - match:\n    - port: 31400\n    route:\n    - destination:\n        host: tcp-echo\n        port:\n          number: 9000\n        subset: v1\n      weight: 80\n    - destination:\n        host: tcp-echo\n        port:\n          number: 9000\n        subset: v2\n      weight: 20 #20%流量转移到v2版本</code></pre>\n<h2 id=\"设置请求超时\"><a href=\"#设置请求超时\" class=\"headerlink\" title=\"设置请求超时\"></a>设置请求超时</h2><h3 id=\"请求超时\"><a href=\"#请求超时\" class=\"headerlink\" title=\"请求超时\"></a>请求超时</h3><p>HTTP 请求的超时可以用路由规则的 timeout 字段来指定。默认情况下，超时是禁用的，把reviews<br>服务的超时设置为 1 秒。 为了观察效果，还需要在对 ratings 服务的调用上人为引入2秒的延迟</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: ratings\nspec:\n  hosts:\n  - ratings\n  http:\n  - fault: \n      delay:\n        percent: 100\n        fixedDelay: 2s # 人为引入2秒的延迟\n    route:\n    - destination:\n        host: ratings\n        subset: v1\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n    - route:\n        - destination:\n            host: reviews\n            subset: v2\n      timeout: 0.5s # 设置超时为0.5s\n# 刷新 Bookinfo 页面。应该看到 1秒钟就会返回，但 reviews是不可用的\n# 即使超时配置为半秒，响应仍需要 1 秒，是因为 productpage 服务中存在硬编码重试， \n# 因此它在返回之前调用 reviews 服务超时两次</code></pre>\n<h2 id=\"熔断\"><a href=\"#熔断\" class=\"headerlink\" title=\"熔断\"></a>熔断</h2><p>如何为连接、请求以及异常检测配置熔断，配置熔断规则，然后通过有意的使熔断器“跳闸”来测试配置</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label namespace default istio-injection&#x3D;enabled\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;httpbin&#x2F;httpbin.yaml</code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: httpbin\nspec:\n  host: httpbin\n  trafficPolicy:\n    connectionPool:\n      tcp:\n        maxConnections: 1\n      http:\n        http1MaxPendingRequests: 1\n        maxRequestsPerConnection: 1\n    outlierDetection:\n      consecutive5xxErrors: 1\n      interval: 1s\n      baseEjectionTime: 3m\n      maxEjectionPercent: 100</code></pre>\n<p>创建客户端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;httpbin&#x2F;sample-client&#x2F;fortio-deploy.yaml -n  \nexport FORTIO_POD&#x3D;$(kubectl get pods -l app&#x3D;fortio -o &#39;jsonpath&#x3D;&#123;.items[0].metadata.name&#125;&#39;)\nkubectl exec &quot;$FORTIO_POD&quot; -c fortio -- &#x2F;usr&#x2F;bin&#x2F;fortio curl -quiet http:&#x2F;&#x2F;httpbin:8000&#x2F;get</code></pre>\n<p>触发熔断器</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec &quot;$FORTIO_POD&quot; -c fortio -- &#x2F;usr&#x2F;bin&#x2F;fortio load -c 2 -qps 0 -n 20 -loglevel Warning http:&#x2F;&#x2F;httpbin:8000&#x2F;get\nkubectl exec &quot;$FORTIO_POD&quot; -c fortio -- &#x2F;usr&#x2F;bin&#x2F;fortio load -c 3 -qps 0 -n 30 -loglevel Warning http:&#x2F;&#x2F;httpbin:8000&#x2F;get\n#开始看到预期的熔断行为\n#查询istio-proxy状态以了解更多熔断详情\nkubectl exec &quot;$FORTIO_POD&quot; -c istio-proxy -- pilot-agent request GET stats | grep httpbin | grep pending</code></pre>\n<h2 id=\"流量镜像\"><a href=\"#流量镜像\" class=\"headerlink\" title=\"流量镜像\"></a>流量镜像</h2><p>流量镜像，也称为影子流量，是一个以尽可能低的风险为生产带来变化的强大的功能。 镜像会将实时流量的副本发送到镜像服务。<br>镜像流量发生在主服务的关键请求路径之外。首先把流量全部路由到测试服务的v1版本。然后，执行规则将一部分流量镜像到v2版本</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">--- #httpbin-v1\napiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: httpbin-v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: httpbin\n      version: v1\n  template:\n    metadata:\n      labels:\n        app: httpbin\n        version: v1\n    spec:\n      containers:\n      - image: docker.io&#x2F;kennethreitz&#x2F;httpbin\n        imagePullPolicy: IfNotPresent\n        name: httpbin\n        command: [&quot;gunicorn&quot;, &quot;--access-logfile&quot;, &quot;-&quot;, &quot;-b&quot;, &quot;0.0.0.0:80&quot;, &quot;httpbin:app&quot;]\n        ports:\n        - containerPort: 80\n--- #httpbin-v2\napiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: httpbin-v2\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: httpbin\n      version: v2\n  template:\n    metadata:\n      labels:\n        app: httpbin\n        version: v2\n    spec:\n      containers:\n        - image: docker.io&#x2F;kennethreitz&#x2F;httpbin\n          imagePullPolicy: IfNotPresent\n          name: httpbin\n          command: [&quot;gunicorn&quot;, &quot;--access-logfile&quot;, &quot;-&quot;, &quot;-b&quot;, &quot;0.0.0.0:80&quot;, &quot;httpbin:app&quot;]\n          ports:\n            - containerPort: 80\n--- # Service-httpbin\napiVersion: v1\nkind: Service\nmetadata:\n  name: httpbin\n  labels:\n    app: httpbin\nspec:\n  ports:\n    - name: http\n      port: 8000\n      targetPort: 80\n  selector:\n    app: httpbin\n--- # VirtualService-httpbin\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin\nspec:\n  hosts:\n    - httpbin\n  http:\n    - route:\n        - destination:\n            host: httpbin\n            subset: v1\n          weight: 100\n--- # DestinationRule-httpbin\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: httpbin\nspec:\n  host: httpbin\n  subsets:\n    - name: v1\n      labels:\n        version: v1\n    - name: v2\n      labels:\n        version: v2</code></pre>\n<p>更新VirtualService-httpbin，镜像流量到 v2</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin\nspec:\n  hosts:\n    - httpbin\n  http:\n  - route:\n    - destination:\n        host: httpbin\n        subset: v1\n      weight: 100\n    mirror:\n      host: httpbin\n      subset: v2\n    mirrorPercentage:\n      value: 100.0\n# 这个路由规则发送 100% 流量到 v1 版本。最后一节表示将 100% 的相同流量镜像（即发送）到 httpbin:v2服务。 \n# 当流量被镜像时，请求将发送到镜像服务中，并在 headers 中的 Host&#x2F;Authority 属性值上追加 -shadow。 \n# 例如 cluster-1 变为 cluster-1-shadow</code></pre>\n\n<h2 id=\"地域负载均衡\"><a href=\"#地域负载均衡\" class=\"headerlink\" title=\"地域负载均衡\"></a>地域负载均衡</h2><p>待完善</p>\n<h2 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h2><p>控制 Istio 服务网格的入口流量</p>\n<h3 id=\"入口网关\"><a href=\"#入口网关\" class=\"headerlink\" title=\"入口网关\"></a>入口网关</h3><p>除了支持 Kubernetes Ingress，Istio还提供了另一种配置模式，Istio Gateway。与 Ingress 相比，Gateway<br>提供了更广泛的自定义和灵活性，并允许将 Istio 功能（例如监控和路由规则）应用于进入集群的流量</p>\n<h4 id=\"使用网关配置-Ingress\"><a href=\"#使用网关配置-Ingress\" class=\"headerlink\" title=\"使用网关配置 Ingress\"></a>使用网关配置 Ingress</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;httpbin&#x2F;httpbin.yaml</code></pre>\n<p>为 HTTP 流量在 80 端口上配置 Gateway</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: httpbin-gateway\nspec:\n  selector:\n    istio: ingressgateway # use Istio default gateway implementation\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts: # &quot;*&quot;\n    - &quot;httpbin.example.com&quot;  \n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin\nspec:\n  hosts: # &quot;*&quot;\n    - &quot;httpbin.example.com&quot;   \n  gateways:\n    - httpbin-gateway #绑定网关\n  http:\n    - match:\n        - uri:\n            prefix: &#x2F;status\n        - uri:\n            prefix: &#x2F;delay\n      route:\n        - destination:\n            port:\n              number: 8000\n            host: httpbin</code></pre>\n<h5 id=\"确定-Ingress-IP-和端口\"><a href=\"#确定-Ingress-IP-和端口\" class=\"headerlink\" title=\"确定 Ingress IP 和端口\"></a>确定 Ingress IP 和端口</h5><p>每个Gateway由类型为LoadBalancer的服务支撑，该服务的外部负载均衡器 IP 和端口用于访问 Gateway。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get svc istio-ingressgateway -n istio-ingress\n# 得到$INGRESS_HOST和$INGRESS_PORT</code></pre>\n<h4 id=\"访问-Ingress-服务\"><a href=\"#访问-Ingress-服务\" class=\"headerlink\" title=\"访问 Ingress 服务\"></a>访问 Ingress 服务</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -s -I -HHost:httpbin.example.com &quot;http:&#x2F;&#x2F;$INGRESS_HOST:$INGRESS_PORT&#x2F;status&#x2F;200&quot;</code></pre>\n<h3 id=\"安全网关\"><a href=\"#安全网关\" class=\"headerlink\" title=\"安全网关\"></a>安全网关</h3><p>描述如何使用TLS或mTLS公开安全的HTTPS服务。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;httpbin&#x2F;httpbin.yaml</code></pre>\n<h4 id=\"生成客户端和服务器证书和密钥\"><a href=\"#生成客户端和服务器证书和密钥\" class=\"headerlink\" title=\"生成客户端和服务器证书和密钥\"></a>生成客户端和服务器证书和密钥</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">#创建用于服务签名的根证书和私钥\nmkdir example_certs1\nopenssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj &#39;&#x2F;O&#x3D;example Inc.&#x2F;CN&#x3D;example.com&#39; -keyout example_certs1&#x2F;example.com.key -out example_certs1&#x2F;example.com.crt\n#为 httpbin.example.com 创建证书和私钥\nopenssl req -out example_certs1&#x2F;httpbin.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs1&#x2F;httpbin.example.com.key -subj &quot;&#x2F;CN&#x3D;httpbin.example.com&#x2F;O&#x3D;httpbin organization&quot;\nopenssl x509 -req -sha256 -days 365 -CA example_certs1&#x2F;example.com.crt -CAkey example_certs1&#x2F;example.com.key -set_serial 0 -in example_certs1&#x2F;httpbin.example.com.csr -out example_certs1&#x2F;httpbin.example.com.crt\n#创建第二组相同类型的证书和密钥\nmkdir example_certs2\nopenssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj &#39;&#x2F;O&#x3D;example Inc.&#x2F;CN&#x3D;example.com&#39; -keyout example_certs2&#x2F;example.com.key -out example_certs2&#x2F;example.com.crt\nopenssl req -out example_certs2&#x2F;httpbin.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs2&#x2F;httpbin.example.com.key -subj &quot;&#x2F;CN&#x3D;httpbin.example.com&#x2F;O&#x3D;httpbin organization&quot;\nopenssl x509 -req -sha256 -days 365 -CA example_certs2&#x2F;example.com.crt -CAkey example_certs2&#x2F;example.com.key -set_serial 0 -in example_certs2&#x2F;httpbin.example.com.csr -out example_certs2&#x2F;httpbin.example.com.crt\n\n\n#为 helloworld.example.com 生成证书和私钥\nopenssl req -out example_certs1&#x2F;helloworld.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs1&#x2F;helloworld.example.com.key -subj &quot;&#x2F;CN&#x3D;helloworld.example.com&#x2F;O&#x3D;helloworld organization&quot;\nopenssl x509 -req -sha256 -days 365 -CA example_certs1&#x2F;example.com.crt -CAkey example_certs1&#x2F;example.com.key -set_serial 1 -in example_certs1&#x2F;helloworld.example.com.csr -out example_certs1&#x2F;helloworld.example.com.crt\n#生成客户端证书和私钥\nopenssl req -out example_certs1&#x2F;client.example.com.csr -newkey rsa:2048 -nodes -keyout example_certs1&#x2F;client.example.com.key -subj &quot;&#x2F;CN&#x3D;client.example.com&#x2F;O&#x3D;client organization&quot;\nopenssl x509 -req -sha256 -days 365 -CA example_certs1&#x2F;example.com.crt -CAkey example_certs1&#x2F;example.com.key -set_serial 1 -in example_certs1&#x2F;client.example.com.csr -out example_certs1&#x2F;client.example.com.crt</code></pre>\n<h4 id=\"配置单机TLS入口网关\"><a href=\"#配置单机TLS入口网关\" class=\"headerlink\" title=\"配置单机TLS入口网关\"></a>配置单机TLS入口网关</h4><p>1.为 Ingress Gateway 创建 Secret</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl create -n istio-system secret tls httpbin-credential \\\n  --key&#x3D;example_certs1&#x2F;httpbin.example.com.key \\\n  --cert&#x3D;example_certs1&#x2F;httpbin.example.com.crt</code></pre>\n<p>2.配置入口网关</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: mygateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default ingress gateway\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: SIMPLE\n      credentialName: httpbin-credential # 必须和上一步创建的secret同名\n    hosts:\n    - httpbin.example.com # 和上一步secret的域名一致\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin\nspec:\n  hosts:\n    - &quot;httpbin.example.com&quot;\n  gateways:\n    - mygateway\n  http:\n    - match:\n        - uri:\n            prefix: &#x2F;status\n        - uri:\n            prefix: &#x2F;delay\n      route:\n        - destination:\n            port:\n              number: 8000\n            host: httpbin</code></pre>\n<p>3.测试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v -HHost:httpbin.example.com --resolve &quot;httpbin.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n  --cacert example_certs1&#x2F;example.com.crt &quot;https:&#x2F;&#x2F;httpbin.example.com:$SECURE_INGRESS_PORT&#x2F;status&#x2F;418&quot;</code></pre>\n<p>4.删除第一个证书，使用第二个</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl -n istio-system delete secret httpbin-credential\nkubectl create -n istio-system secret tls httpbin-credential \\\n  --key&#x3D;example_certs2&#x2F;httpbin.example.com.key \\\n  --cert&#x3D;example_certs2&#x2F;httpbin.example.com.crt</code></pre>\n<p>5.使用旧的证书链和curl来访问httpbin服务会失败，需要使用新的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v -HHost:httpbin.example.com --resolve &quot;httpbin.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n  --cacert example_certs2&#x2F;example.com.crt &quot;https:&#x2F;&#x2F;httpbin.example.com:$SECURE_INGRESS_PORT&#x2F;status&#x2F;418&quot;</code></pre>\n<h4 id=\"为多个主机配置TLS入口网关\"><a href=\"#为多个主机配置TLS入口网关\" class=\"headerlink\" title=\"为多个主机配置TLS入口网关\"></a>为多个主机配置TLS入口网关</h4><p>1.启动 helloworld-v1 示例，创建 helloworld-credential Secret</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;helloworld&#x2F;helloworld.yaml -l service&#x3D;helloworld\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;helloworld&#x2F;helloworld.yaml -l version&#x3D;v1\nkubectl create -n istio-system secret tls helloworld-credential --key&#x3D;helloworld-v1.example.com.key --cert&#x3D;helloworld-v1.example.com.crt</code></pre>\n<p>2.使用 httpbin.example.com 和 helloworld.example.com 主机配置入口网关</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#为 443 端口定义一个具有两个服务器部分的网关。将每个端口上的 credentialName 值分别设置为 httpbin-credential \n#和 helloworld-credential。将 TLS 模式设置为 SIMPLE。\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: mygateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default ingress gateway\n  servers:\n    - port:\n        number: 443\n        name: https-httpbin\n        protocol: HTTPS\n      tls:\n        mode: SIMPLE\n        credentialName: httpbin-credential\n      hosts:\n        - httpbin.example.com\n    - port:\n        number: 443\n        name: https-helloworld\n        protocol: HTTPS\n      tls:\n        mode: SIMPLE\n        credentialName: helloworld-credential\n      hosts:\n        - helloworld.example.com\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: helloworld\nspec:\n  hosts:\n    - helloworld.example.com\n  gateways:\n    - mygateway\n  http:\n    - match:\n        - uri:\n            exact: &#x2F;hello\n      route:\n        - destination:\n            host: helloworld\n            port:\n              number: 5000</code></pre>\n<p>3.测试</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v -HHost:helloworld.example.com --resolve &quot;helloworld.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n  --cacert example_certs1&#x2F;example.com.crt &quot;https:&#x2F;&#x2F;helloworld.example.com:$SECURE_INGRESS_PORT&#x2F;hello&quot;\n  \ncurl -v -HHost:httpbin.example.com --resolve &quot;httpbin.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n  --cacert example_certs1&#x2F;example.com.crt &quot;https:&#x2F;&#x2F;httpbin.example.com:$SECURE_INGRESS_PORT&#x2F;status&#x2F;418&quot;</code></pre>\n<h4 id=\"配置双向TLS入口网关\"><a href=\"#配置双向TLS入口网关\" class=\"headerlink\" title=\"配置双向TLS入口网关\"></a>配置双向TLS入口网关</h4><p>1.通过删除其Secret并创建一个新的来更改入口网关的凭据。服务器使用CA证书来验证其客户端</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl -n istio-system delete secret httpbin-credential\nkubectl create -n istio-system secret generic httpbin-credential \\\n  --from-file&#x3D;tls.key&#x3D;example_certs1&#x2F;httpbin.example.com.key \\\n  --from-file&#x3D;tls.crt&#x3D;example_certs1&#x2F;httpbin.example.com.crt \\\n  --from-file&#x3D;ca.crt&#x3D;example_certs1&#x2F;example.com.crt</code></pre>\n<p>2.更改网关的定义以将 TLS 模式设置为 MUTUAL</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: mygateway\nspec:\n  selector:\n    istio: ingressgateway # use istio default ingress gateway\n  servers:\n  - port:\n      number: 443\n      name: https\n      protocol: HTTPS\n    tls:\n      mode: MUTUAL\n      credentialName: httpbin-credential # must be the same as secret\n    hosts:\n    - httpbin.example.com</code></pre>\n<p>3.尝试使用之前的方法发送 HTTPS 请求，失败</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v -HHost:httpbin.example.com --resolve &quot;httpbin.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n--cacert example_certs1&#x2F;example.com.crt &quot;https:&#x2F;&#x2F;httpbin.example.com:$SECURE_INGRESS_PORT&#x2F;status&#x2F;418&quot;</code></pre>\n<p>4.将客户端证书和私钥传递给 curl 并重新发送请求。将带有 –cert 标志的客户证书和带有 –key 标志的私钥传递给 curl</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">curl -v -HHost:httpbin.example.com --resolve &quot;httpbin.example.com:$SECURE_INGRESS_PORT:$INGRESS_HOST&quot; \\\n  --cacert example_certs1&#x2F;example.com.crt \\\n  --cert example_certs1&#x2F;client.example.com.crt \\\n  --key example_certs1&#x2F;client.example.com.key \\\n  &quot;https:&#x2F;&#x2F;httpbin.example.com:$SECURE_INGRESS_PORT&#x2F;status&#x2F;418&quot;</code></pre>\n<h4 id=\"Kubernetes-Ingress\"><a href=\"#Kubernetes-Ingress\" class=\"headerlink\" title=\"Kubernetes Ingress\"></a>Kubernetes Ingress</h4><p>描述如何使用Kubernetes Ingress为Istio配置入口网关以暴露服务网格集群内的服务</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.k8s.io&#x2F;v1\nkind: Ingress\nmetadata:\n  annotations:\n    #需要使用 kubernetes.io&#x2F;ingress.class 注解来告知 Istio 网关控制器它应该处理此 Ingress，否则它将被忽略\n    kubernetes.io&#x2F;ingress.class: istio\n  name: ingress\nspec:\n  rules:\n  - host: httpbin.example.com\n    http:\n      paths:\n      - path: &#x2F;status\n        pathType: Prefix\n        backend:\n          service:\n            name: httpbin\n            port:\n              number: 8000</code></pre>\n<h4 id=\"Kubernetes-Gateway-API\"><a href=\"#Kubernetes-Gateway-API\" class=\"headerlink\" title=\"Kubernetes Gateway API\"></a>Kubernetes Gateway API</h4><p>描述 Istio 和 Kubernetes API 之间的差异，并提供了一个简单的例子，演示如何配置 Istio<br>以使用Gateway API在服务网格集群外部暴露服务。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Gateway API暂时还不稳定，处于快速迭代中</p></blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 在大多数 Kubernetes 集群中，默认情况下不会安装 Gateway API，需要安装\nkubectl get crd gateways.gateway.networking.k8s.io &amp;&gt; &#x2F;dev&#x2F;null || \\\n  &#123; kubectl kustomize &quot;github.com&#x2F;kubernetes-sigs&#x2F;gateway-api&#x2F;config&#x2F;crd?ref&#x3D;v0.6.2&quot; | kubectl apply -f -; &#125;</code></pre>\n<p>1.区别</p>\n<ul>\n<li>Istio API 中的 Gateway 仅配置已部署的现有网关 Deployment&#x2F;Service， 而在 Gateway API<br>中的 Gateway 资源不仅配置也会部署网关。 有关更多信息，请参阅具体部署方法 。</li>\n<li>在 Istio VirtualService 中，所有协议都在单一的资源中配置， 而在 Gateway API 中，每种协议<br>类型都有自己的资源，例如 HTTPRoute 和 TCPRoute。</li>\n<li>虽然 Gateway API 提供了大量丰富的路由功能，但它还没有涵盖 Istio 的全部特性。 因此，正在进行<br>的工作是扩展 API 以覆盖这些用例，以及利用 API 的可拓展性 来更好地暴露 Istio 的功能<br>2.使用（待完善）</li>\n</ul>\n<h2 id=\"Egress\"><a href=\"#Egress\" class=\"headerlink\" title=\"Egress\"></a>Egress</h2><p>控制Istio服务网格的出口流量。</p>\n<h3 id=\"访问外部服务\"><a href=\"#访问外部服务\" class=\"headerlink\" title=\"访问外部服务\"></a>访问外部服务</h3><p>访问外部服务的三种方法：</p>\n<ul>\n<li>允许 Envoy 代理将请求传递到未在网格内配置过的服务。</li>\n<li>配置 service entry 以提供对外部服务的受控访问。</li>\n<li>对于特定范围的 IP，完全绕过 Envoy 代理</li>\n</ul>\n<h4 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;sleep&#x2F;sleep.yaml\nexport SOURCE_POD&#x3D;$(kubectl get pod -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;)</code></pre>\n<h4 id=\"Envoy-转发流量到外部服务\"><a href=\"#Envoy-转发流量到外部服务\" class=\"headerlink\" title=\"Envoy 转发流量到外部服务\"></a>Envoy 转发流量到外部服务</h4><p>Istio 有一个安装选项， global.outboundTrafficPolicy.mode，它配置 Sidecar 对外部服务（那些没有在<br>Istio 的内部服务注册中定义的服务）的处理方式。如果这个选项设置为 ALLOW_ANY， Istio 代理允许调用未知的<br>服务。如果这个选项设置为 REGISTRY_ONLY，那么 Istio 代理会阻止任何没有在网格中定义的 HTTP 服务或<br>service entry 的主机。ALLOW_ANY 是默认值，不控制对外部服务的访问。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec &quot;$SOURCE_POD&quot; -c sleep -- curl -sSI https:&#x2F;&#x2F;www.google.com | grep  &quot;HTTP&#x2F;&quot;; \nkubectl exec &quot;$SOURCE_POD&quot; -c sleep -- curl -sI https:&#x2F;&#x2F;edition.cnn.com | grep &quot;HTTP&#x2F;&quot;</code></pre>\n<p>这种访问外部服务的简单方法有一个缺点，即丢失了对外部服务流量的 Istio 监控和控制； 比如，外部服务的调用<br>没有记录到 Mixer 的日志中。</p>\n<h4 id=\"控制对外部服务的访问\"><a href=\"#控制对外部服务的访问\" class=\"headerlink\" title=\"控制对外部服务的访问\"></a>控制对外部服务的访问</h4><h5 id=\"更改为默认的封锁策略\"><a href=\"#更改为默认的封锁策略\" class=\"headerlink\" title=\"更改为默认的封锁策略\"></a>更改为默认的封锁策略</h5><p>执行以下命令来将 global.outboundTrafficPolicy.mode 选项改为 REGISTRY_ONLY</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spec:\n  meshConfig:\n    outboundTrafficPolicy:\n      mode: REGISTRY_ONLY</code></pre>\n<h5 id=\"访问一个外部的-HTTP-服务\"><a href=\"#访问一个外部的-HTTP-服务\" class=\"headerlink\" title=\"访问一个外部的 HTTP 服务\"></a>访问一个外部的 HTTP 服务</h5><p>1.创建一个 ServiceEntry，以允许访问一个外部的 HTTP 服务</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: httpbin-ext\nspec:\n  hosts:\n  - httpbin.org\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n  resolution: DNS\n  location: MESH_EXTERNAL</code></pre>\n<p>2.访问外部HTTP服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec -it $SOURCE_POD -c sleep -- curl http:&#x2F;&#x2F;httpbin.org&#x2F;headers\n#&#123;\n#  &quot;headers&quot;: &#123;\n#  &quot;Accept&quot;: &quot;*&#x2F;*&quot;,\n#  &quot;Connection&quot;: &quot;close&quot;,\n#  &quot;Host&quot;: &quot;httpbin.org&quot;,\n#  ...\n#  &quot;X-Envoy-Decorator-Operation&quot;: &quot;httpbin.org:80&#x2F;*&quot;,\n#  &#125;\n#&#125;\n# 注意由 Istio sidecar 代理添加的 headers: X-Envoy-Decorator-Operation</code></pre>\n<h5 id=\"访问外部-HTTPS-服务\"><a href=\"#访问外部-HTTPS-服务\" class=\"headerlink\" title=\"访问外部 HTTPS 服务\"></a>访问外部 HTTPS 服务</h5><p>1.创建一个 ServiceEntry，允许对外部服务的访问</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: google\nspec:\n  hosts:\n  - www.google.com\n  ports:\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS\n  location: MESH_EXTERNAL</code></pre>\n<p>2.访问外部HTTPS服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec -it $SOURCE_POD -c sleep -- curl -I https:&#x2F;&#x2F;www.google.com | grep  &quot;HTTP&#x2F;&quot;\n#HTTP&#x2F;2 200</code></pre>\n<h5 id=\"管理到外部服务的流量\"><a href=\"#管理到外部服务的流量\" class=\"headerlink\" title=\"管理到外部服务的流量\"></a>管理到外部服务的流量</h5><p>与集群内的请求相似，也可以为使用 ServiceEntry 配置访问的外部服务设置 Istio 路由规则。<br>1.设置调用外部服务 httpbin.org 的超时时间为 3 秒</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: httpbin-ext\nspec:\n  hosts:\n    - httpbin.org\n  http:\n  - timeout: 3s #设置超时3s\n    route:\n      - destination:\n          host: httpbin.org\n        weight: 100</code></pre>\n<p>2.访问</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec &quot;$SOURCE_POD&quot; -c sleep -- time curl -o &#x2F;dev&#x2F;null -s -w &quot;%&#123;http_code&#125;\\n&quot; http:&#x2F;&#x2F;httpbin.org&#x2F;delay&#x2F;5</code></pre>\n<h5 id=\"直接访问外部服务\"><a href=\"#直接访问外部服务\" class=\"headerlink\" title=\"直接访问外部服务\"></a>直接访问外部服务</h5><p>让特定范围的IP完全绕过Istio，可以配置Envoy Sidecars以防止它们拦截外部请求，要设置绕过<br>Istio，更改global.proxy.includeIPRanges或global.proxy.excludeIPRanges配置参数</p>\n<ul>\n<li>排除所有外部 IP 重定向到 Sidecar 代理的一种简单方法是将 global.proxy.includeIPRanges<br>配置选项设置为内部集群服务使用的 IP 范围</li>\n</ul>\n<h3 id=\"出口网关\"><a href=\"#出口网关\" class=\"headerlink\" title=\"出口网关\"></a>出口网关</h3><p>如何配置Istio以通过专用的 egress gateway 服务间接调用外部服务</p>\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>1.服务网格所有的出站流量必须经过一组专用节点， 这些专用节点用于实施 egress 流量的策略。<br>2.集群中的应用节点没有公有IP，节点上运行的网格Service无法访问互联网。通过定义 egress gateway，<br>将公有IP分配给egress gateway节点，用它引导所有的出站流量，可以使应用节点以受控方式访问外部服务</p>\n<h5 id=\"部署-Istio-egress-gateway\"><a href=\"#部署-Istio-egress-gateway\" class=\"headerlink\" title=\"部署 Istio egress gateway\"></a>部署 Istio egress gateway</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pod -l istio&#x3D;egressgateway -n istio-ingress</code></pre>\n<p>使用 IstioOperator CR 安装 Istio，请在配置中添加以下字段</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spec:\n  components:\n    egressGateways:\n      - name: istio-egressgateway\n        enabled: true</code></pre>\n<p>istioctl</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">istioctl install &lt;flags-you-used-to-install-Istio&gt; \\\n                   --set components.egressGateways[0].name&#x3D;istio-egressgateway \\\n                   --set components.egressGateways[0].enabled&#x3D;true</code></pre>\n<h5 id=\"定义-Egress-gateway-并引导-HTTP-流量\"><a href=\"#定义-Egress-gateway-并引导-HTTP-流量\" class=\"headerlink\" title=\"定义 Egress gateway 并引导 HTTP 流量\"></a>定义 Egress gateway 并引导 HTTP 流量</h5><p>1.为 edition.cnn.com 定义一个 ServiceEntry</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: cnn\nspec:\n  hosts:\n  - edition.cnn.com\n  ports:\n  - number: 80\n    name: http-port\n    protocol: HTTP\n  - number: 443\n    name: https\n    protocol: HTTPS\n  resolution: DNS</code></pre>\n<p>2.为 edition.cnn.com 端口 80 创建 egress Gateway。并为指向 egress gateway 的流量创建一个 destination rule。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: istio-egressgateway\nspec:\n  selector:\n    istio: egressgateway\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - edition.cnn.com\n---\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: egressgateway-for-cnn\nspec:\n  host: istio-egressgateway.istio-system.svc.cluster.local\n  subsets:\n  - name: cnn</code></pre>\n<p>3.定义一个 VirtualService，将流量从 Sidecar 引导至 Egress Gateway， 再从 Egress Gateway 引导至外部服务</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: direct-cnn-through-egress-gateway\nspec:\n  hosts:\n  - edition.cnn.com\n  gateways:\n  - istio-egressgateway\n  - mesh\n  http:\n  - match:\n    - gateways:\n      - mesh\n      port: 80\n    route:\n    - destination:\n        host: istio-egressgateway.istio-system.svc.cluster.local\n        subset: cnn\n        port:\n          number: 80\n      weight: 100\n  - match:\n    - gateways:\n      - istio-egressgateway\n      port: 80\n    route:\n    - destination:\n        host: edition.cnn.com\n        port:\n          number: 80\n      weight: 100</code></pre>\n<h5 id=\"用-Egress-gateway-发起-HTTPS-请求\"><a href=\"#用-Egress-gateway-发起-HTTPS-请求\" class=\"headerlink\" title=\"用 Egress gateway 发起 HTTPS 请求\"></a>用 Egress gateway 发起 HTTPS 请求</h5><p>1.为 edition.cnn.com 定义 ServiceEntry</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: cnn\nspec:\n  hosts:\n  - edition.cnn.com\n  ports:\n  - number: 443\n    name: tls\n    protocol: TLS\n  resolution: DNS</code></pre>\n<p>2.发送 HTTPS 请求到 <a href=\"https://edition.cnn.com/politics%EF%BC%8C\">https://edition.cnn.com/politics，</a> 验证ServiceEntry是否已正确生效</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec &quot;$SOURCE_POD&quot; -c sleep -- curl -sSL -o &#x2F;dev&#x2F;null -D - https:&#x2F;&#x2F;edition.cnn.com&#x2F;politics</code></pre>\n<p>3.为 edition.cnn.com 创建一个 egress Gateway。还需要创建一个 destination rule 和一个 virtualservice，<br>用来引导流量通过Egress Gateway， 并通过Egress Gateway与外部服务通信</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"># Gateway\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: Gateway\nmetadata:\n  name: istio-egressgateway\nspec:\n  selector:\n    istio: egressgateway\n  servers:\n  - port:\n      number: 443\n      name: tls\n      protocol: TLS\n    hosts:\n    - edition.cnn.com\n    tls:\n      mode: PASSTHROUGH\n--- # DestinationRule\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: egressgateway-for-cnn\nspec:\n  host: istio-egressgateway.istio-system.svc.cluster.local\n  subsets:\n  - name: cnn\n--- # VirtualService\napiVersion: networking.istio.io&#x2F;v1alpha3\nkind: VirtualService\nmetadata:\n  name: direct-cnn-through-egress-gateway\nspec:\n  hosts:\n  - edition.cnn.com\n  gateways:\n  - mesh\n  - istio-egressgateway\n  tls:\n  - match:\n    - gateways:\n      - mesh\n      port: 443\n      sni_hosts:\n      - edition.cnn.com\n    route:\n    - destination:\n        host: istio-egressgateway.istio-system.svc.cluster.local\n        subset: cnn\n        port:\n          number: 443\n  - match:\n    - gateways:\n      - istio-egressgateway\n      port: 443\n      sni_hosts:\n      - edition.cnn.com\n    route:\n    - destination:\n        host: edition.cnn.com\n        port:\n          number: 443\n      weight: 100</code></pre>\n<p>4.发送 HTTPS 请求到 <a href=\"https://edition.cnn.com/politics\">https://edition.cnn.com/politics</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec &quot;$SOURCE_POD&quot; -c sleep -- curl -sSL -o &#x2F;dev&#x2F;null -D - https:&#x2F;&#x2F;edition.cnn.com&#x2F;politics</code></pre>\n<h5 id=\"应用-Kubernetes-网络策略\"><a href=\"#应用-Kubernetes-网络策略\" class=\"headerlink\" title=\"应用 Kubernetes 网络策略\"></a>应用 Kubernetes 网络策略</h5><p>如何创建 Kubernetes 网络策略 来阻止绕过 egress gateway 的出站流量.<br>1.创建 test-egress 命名空间</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl create namespace test-egress</code></pre>\n<p>2.在 test-egress 命名空间中部署 sleep 示例应用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -n test-egress -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;sleep&#x2F;sleep.yaml</code></pre>\n<p>3.检查生成的 Pod，其中应该只有一个容器，也就是说没有注入IstioSidecar</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pod $(kubectl get pod -n test-egress -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;) -n test-egress</code></pre>\n<p>4.从 test-egress 命名空间的 sleep Pod 中向 <a href=\"https://edition.cnn.com/politics\">https://edition.cnn.com/politics</a> 发送 HTTPS 请求。因为没有任何限制，所以这一请求应该会成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec -it $(kubectl get pod -n test-egress -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;) -n test-egress -c sleep -- curl -s -o &#x2F;dev&#x2F;null -w &quot;%&#123;http_code&#125;\\n&quot;  https:&#x2F;&#x2F;edition.cnn.com&#x2F;politics\n#200</code></pre>\n<p>5.给 Istio 组件（控制平面和 gateway）所在的命名空间打上标签</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label namespace istio-system istio&#x3D;system</code></pre>\n<p>6.给 kube-system 命名空间打标签</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label ns kube-system kube-system&#x3D;true</code></pre>\n<p>7.创建一个 NetworkPolicy，来限制 test-egress 命名空间的出站流量， 只允许目标为 kube-system DNS（端口 53）的请求，以及目标为 istio-system 命名空间的所有请求</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.k8s.io&#x2F;v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-egress-to-istio-system-and-kube-dns\nspec:\n  podSelector: &#123;&#125;\n  policyTypes:\n  - Egress\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          kube-system: &quot;true&quot;\n    ports:\n    - protocol: UDP\n      port: 53\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          istio: system</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>网络策略由Kubernetes集群中的网络插件实现。以下情况可能不会阻止下面的步骤</p></blockquote>\n<p>8.重新发送前面的 HTTPS 请求到 <a href=\"https://edition.cnn.com/politics%EF%BC%8C%E8%BF%99%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%B5%81%E9%87%8F%E8%A2%AB%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5%E6%8B%A6%E6%88%AA%E4%BA%86\">https://edition.cnn.com/politics，这次请求就不会成功了，这是因为流量被网络策略拦截了</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec -it $(kubectl get pod -n test-egress -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;) -n test-egress -c sleep -- curl -v https:&#x2F;&#x2F;edition.cnn.com&#x2F;politics\n#Hostname was NOT found in DNS cache\n#  Trying 151.101.65.67...\n#  Trying 2a04:4e42:200::323...</code></pre>\n<p>9.接下来在 test-egress 命名空间的 sleep Pod 上注入 Sidecar，启用 test-egress 命名空间的自动注入</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl label namespace test-egress istio-injection&#x3D;enabled</code></pre>\n<p>10.重新部署 sleep</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete deployment sleep -n test-egress\nkubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;istio&#x2F;istio&#x2F;release-1.18&#x2F;samples&#x2F;sleep&#x2F;sleep.yaml</code></pre>\n<p>11.检查生成的 Pod，其中应该有了两个容器，其中包含了注入的 sidecar（istio-proxy）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl get pod $(kubectl get pod -n test-egress -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;) -n test-egress -o jsonpath&#x3D;&#39;&#123;.spec.containers[*].name&#125;&#39;</code></pre>\n<p>12.在 default 命名空间中创建一个与 sleep pod 类似的目标规则，用来引导 test-egress 命名空间内的流量经过 egress 网关</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.istio.io&#x2F;v1alpha3\nkind: DestinationRule\nmetadata:\n  name: egressgateway-for-cnn\nspec:\n  host: istio-egressgateway.istio-system.svc.cluster.local\n  subsets:\n  - name: cnn</code></pre>\n<p>13.向 <a href=\"https://edition.cnn.com/politics\">https://edition.cnn.com/politics</a> 发送 HTTP 请求，这次会成功，原因是网络策略允许流量流向 istio-system<br>中的 istio-egressgateway。 istio-egressgateway 最终把流量转发到 edition.cnn.com</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl exec -it $(kubectl get pod -n test-egress -l app&#x3D;sleep -o jsonpath&#x3D;&#123;.items..metadata.name&#125;) -n test-egress -c sleep -- curl -s -o &#x2F;dev&#x2F;null -w &quot;%&#123;http_code&#125;\\n&quot; https:&#x2F;&#x2F;edition.cnn.com&#x2F;politics\n#200</code></pre>\n","text":"##简单部署及开放入口 安装minikube安装 https://minikube.sigs.k8s.io/docs/start/ minikube start helm安装istio https://istio.io/latest/zh/docs/setup/install/h...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"31 mins."},"categories":[{"name":"kubernetes","slug":"kubernetes","count":6,"path":"api/categories/kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":7,"path":"api/tags/kubernetes.json"},{"name":"istio","slug":"istio","count":2,"path":"api/tags/istio.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E7%A4%BA%E4%BE%8B%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">部署示例应用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E6%94%BE%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">开放入口</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E8%AF%B7%E6%B1%82%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">配置请求路由</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1%E5%88%B0%E7%89%88%E6%9C%ACreviews%E7%9A%84%E7%89%88%E6%9C%AC1\"><span class=\"toc-text\">路由到版本reviews的版本1</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DestinationRule\"><span class=\"toc-text\">DestinationRule</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#VirtualService\"><span class=\"toc-text\">VirtualService</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E7%9A%84%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">基于用户身份的路由</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%85%E9%9A%9C%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">故障注入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5HTTP%E5%BB%B6%E8%BF%9F%E6%95%85%E9%9A%9C\"><span class=\"toc-text\">注入HTTP延迟故障</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D%EF%BC%9A\"><span class=\"toc-text\">错误修复：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5-HTTP-abort%E6%95%85%E9%9A%9C\"><span class=\"toc-text\">注入 HTTP abort故障</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E9%87%8F%E8%BD%AC%E7%A7%BB\"><span class=\"toc-text\">流量转移</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#TCP%E6%B5%81%E9%87%8F%E8%BD%AC%E7%A7%BB\"><span class=\"toc-text\">TCP流量转移</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">设置请求超时</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E8%B6%85%E6%97%B6\"><span class=\"toc-text\">请求超时</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%86%94%E6%96%AD\"><span class=\"toc-text\">熔断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E9%87%8F%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">流量镜像</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%B0%E5%9F%9F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"><span class=\"toc-text\">地域负载均衡</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Ingress\"><span class=\"toc-text\">Ingress</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A5%E5%8F%A3%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">入口网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E7%BD%91%E5%85%B3%E9%85%8D%E7%BD%AE-Ingress\"><span class=\"toc-text\">使用网关配置 Ingress</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A-Ingress-IP-%E5%92%8C%E7%AB%AF%E5%8F%A3\"><span class=\"toc-text\">确定 Ingress IP 和端口</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE-Ingress-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">访问 Ingress 服务</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E5%85%A8%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">安全网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6%E5%92%8C%E5%AF%86%E9%92%A5\"><span class=\"toc-text\">生成客户端和服务器证书和密钥</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%8D%95%E6%9C%BATLS%E5%85%A5%E5%8F%A3%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">配置单机TLS入口网关</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E5%A4%9A%E4%B8%AA%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AETLS%E5%85%A5%E5%8F%A3%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">为多个主机配置TLS入口网关</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%8F%8C%E5%90%91TLS%E5%85%A5%E5%8F%A3%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">配置双向TLS入口网关</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kubernetes-Ingress\"><span class=\"toc-text\">Kubernetes Ingress</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Kubernetes-Gateway-API\"><span class=\"toc-text\">Kubernetes Gateway API</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Egress\"><span class=\"toc-text\">Egress</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">访问外部服务</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">开始</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Envoy-%E8%BD%AC%E5%8F%91%E6%B5%81%E9%87%8F%E5%88%B0%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">Envoy 转发流量到外部服务</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%AF%B9%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">控制对外部服务的访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%94%B9%E4%B8%BA%E9%BB%98%E8%AE%A4%E7%9A%84%E5%B0%81%E9%94%81%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">更改为默认的封锁策略</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%A4%96%E9%83%A8%E7%9A%84-HTTP-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">访问一个外部的 HTTP 服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8-HTTPS-%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">访问外部 HTTPS 服务</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E7%90%86%E5%88%B0%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%B5%81%E9%87%8F\"><span class=\"toc-text\">管理到外部服务的流量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">直接访问外部服务</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BA%E5%8F%A3%E7%BD%91%E5%85%B3\"><span class=\"toc-text\">出口网关</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">使用场景</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2-Istio-egress-gateway\"><span class=\"toc-text\">部署 Istio egress gateway</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-Egress-gateway-%E5%B9%B6%E5%BC%95%E5%AF%BC-HTTP-%E6%B5%81%E9%87%8F\"><span class=\"toc-text\">定义 Egress gateway 并引导 HTTP 流量</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%94%A8-Egress-gateway-%E5%8F%91%E8%B5%B7-HTTPS-%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">用 Egress gateway 发起 HTTPS 请求</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8-Kubernetes-%E7%BD%91%E7%BB%9C%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">应用 Kubernetes 网络策略</span></a></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"crontab命令","uid":"7e88b6e7d56f70f641065fe39e058881","slug":"linux/crontab命令","date":"2023-06-20T01:58:10.000Z","updated":"2023-07-09T14:30:28.773Z","comments":true,"path":"api/articles/linux/crontab命令.json","keywords":"chriswood blogs sharing","cover":null,"text":"简介crontab命令常见于Unix和类Unix的操作系统之中，用于设置周期性被执行的指令。该命令从标准输入设备读取指令，并将其存放于“crontab”文件中（是“cron table”的简写） 使用检查crontab服务crontab -l #显示‘no crontab for...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"crontab","slug":"crontab","count":1,"path":"api/tags/crontab.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"Linux-iptables学习","uid":"8fa7fefe6aa0f69b9eef61d9ade88e6e","slug":"linux/Linux-iptables学习","date":"2023-06-15T05:43:19.000Z","updated":"2023-07-09T14:30:28.773Z","comments":true,"path":"api/articles/linux/Linux-iptables学习.json","keywords":"chriswood blogs sharing","cover":null,"text":"iptables介绍iptables组成Linux平台下的包过滤防火墙，与大多数的Linux软件一样，这个包过滤防火墙是免费的，在安装系统的时候就已经自带 基础概念1.规则（rules）规则（rules）其实就是网络管理员预定义的条件，规则一般的定义为“如果数据包头符合这样的条件...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"Linux","slug":"Linux","count":2,"path":"api/categories/Linux.json"}],"tags":[{"name":"Linux","slug":"Linux","count":2,"path":"api/tags/Linux.json"},{"name":"iptables","slug":"iptables","count":1,"path":"api/tags/iptables.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"kubernetes常用模板","uid":"c6c4eb3658a2985f9be6afa8980c8ae8","slug":"kubernetes/kubernetes常用模板","date":"2023-05-18T06:56:26.000Z","updated":"2023-06-19T07:29:17.970Z","comments":true,"path":"api/articles/kubernetes/kubernetes常用模板.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h3 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h3><p>Deployment是Kubernetes系统的⼀个核⼼概念，主要职责和RC⼀样的都是保证Pod的数量和健康， 二者⼤部分功能都是完全⼀致，可以看成是⼀个升级版的RC控制器</p>\n<ul>\n<li>确保 Pod 数量</li>\n<li>确保 Pod 健康</li>\n<li>事件和状态查看</li>\n<li>回滚</li>\n<li>版本记录</li>\n<li>暂停和启动</li>\n</ul>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: apps&#x2F;v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n        - name: my-container\n          image: my-image\n          ports:\n            - containerPort: 80</code></pre>\n\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h3><p>Service是⼀种抽象的对象，它定义了⼀组Pod的逻辑集合和⼀个⽤于访问它们的策略，其实这个概念和微服务⾮常类似。 ⼀个Serivce下⾯包含的Pod集合⼀般是由LabelSelector来决定的</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: v1\nkind: Service\nmetadata:\n  name: my-service\nspec:\n  selector:\n    app: my-app\n  ports:\n    - name: http\n      port: 80\n      targetPort: 80\n  type: ClusterIP</code></pre>\n\n<h3 id=\"Horizontal-Pod-Autoscaler（HPA）\"><a href=\"#Horizontal-Pod-Autoscaler（HPA）\" class=\"headerlink\" title=\"Horizontal Pod Autoscaler（HPA）\"></a>Horizontal Pod Autoscaler（HPA）</h3><p>通过⼿⼯执⾏kubectl scale命令和在Dashboard上操作可以实现Pod的扩缩容，但纯手工方式不现实， Kubernetes提供了这样⼀个资源对象：Horizontal Pod<br>Autoscaling（Pod⽔平⾃动伸缩）。HPA通过 监控分析RC或者Deployment控制的所有Pod的负载变化情况来确定是否需要调整Pod的副本数量。<br>HPA根据CPU利用率、内存利用率等指标自动扩容或缩容Pod的副本数量，从而保证应用程序的性能和可用性。</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#autoscaling&#x2F;v1版本\napiVersion: autoscaling&#x2F;v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps&#x2F;v1\n    kind: Deployment\n    name: my-deployment\n  minReplicas: 1\n  maxReplicas: 10\n  targetCPUUtilizationPercentage: 90</code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">#autoscaling&#x2F;v2版本\napiVersion: autoscaling&#x2F;v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: my-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps&#x2F;v1\n    kind: Deployment\n    name: my-deployment\n  minReplicas: 2\n  maxReplicas: 10\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 90\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: AverageValue\n          averageValue: 1000Mi</code></pre>\n<h3 id=\"Ingress\"><a href=\"#Ingress\" class=\"headerlink\" title=\"Ingress\"></a>Ingress</h3><p>Ingress将外部流量路由到Kubernetes集群内部的Service或Pod中</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: networking.k8s.io&#x2F;v1\nkind: Ingress\nmetadata:\n  name: my-ingress\n  annotations:\n    #  使用了nginx.ingress.kubernetes.io&#x2F;rewrite-target注解，将请求的路径重写为&#x2F;，从而避免了请求的路径中包含&#x2F;my-app\n    nginx.ingress.kubernetes.io&#x2F;rewrite-target: &#x2F;\nspec:\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: &#x2F;my-app\n        pathType: Prefix\n        backend:\n          service:\n            name: my-service\n            port:\n              name: http</code></pre>\n","text":"DeploymentDeployment是Kubernetes系统的⼀个核⼼概念，主要职责和RC⼀样的都是保证Pod的数量和健康， 二者⼤部分功能都是完全⼀致，可以看成是⼀个升级版的RC控制器 确保 Pod 数量 确保 Pod 健康 事件和状态查看 回滚 版本记录 暂停和启动 a...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"kubernetes","slug":"kubernetes","count":5,"path":"api/categories/kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":5,"path":"api/tags/kubernetes.json"},{"name":"template","slug":"template","count":1,"path":"api/tags/template.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Deployment\"><span class=\"toc-text\">Deployment</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Service\"><span class=\"toc-text\">Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Horizontal-Pod-Autoscaler%EF%BC%88HPA%EF%BC%89\"><span class=\"toc-text\">Horizontal Pod Autoscaler（HPA）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Ingress\"><span class=\"toc-text\">Ingress</span></a></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"batch命令","uid":"b1ff30b25dc544eb8f6f0dca1a68289c","slug":"windows/batch命令","date":"2023-05-25T08:49:26.000Z","updated":"2023-06-19T07:29:17.974Z","comments":true,"path":"api/articles/windows/batch命令.json","keywords":"chriswood blogs sharing","cover":null,"text":"echo &amp; @回显命令：命令行中要不要显示在bat脚本中输入的语句 @ 关闭单行回显 echo off 从下一行开始关闭回显 @echo off 从本行开始关闭回显（一般的脚本都以这个开头） echo on 从下一行开始打开回显 echo 显示当前是echo off 还...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"batch","slug":"batch","count":1,"path":"api/categories/batch.json"}],"tags":[{"name":"windows","slug":"windows","count":1,"path":"api/tags/windows.json"},{"name":"batch","slug":"batch","count":1,"path":"api/tags/batch.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"maven项目pom.xml配置说明","uid":"2af2a4517d6bfc676756f25e15eedeab","slug":"java/maven/maven项目pom-xml配置说明","date":"2023-05-18T05:06:21.000Z","updated":"2023-06-19T07:29:17.970Z","comments":true,"path":"api/articles/java/maven/maven项目pom-xml配置说明.json","keywords":"chriswood blogs sharing","cover":null,"text":"settings.xml 用来设置maven参数的配置文件 settings.xml是maven的全局配置文件。pom.xml文件是所在项目的局部配置 settings.xml中包含本地仓储位置、修改远程仓储服务器、认证信息等配置 https://maven.apache.org...","link":"","photos":[],"count_time":{"symbolsCount":"59k","symbolsTime":"54 mins."},"categories":[{"name":"maven","slug":"maven","count":1,"path":"api/categories/maven.json"}],"tags":[{"name":"Java","slug":"Java","count":2,"path":"api/tags/Java.json"},{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"},{"name":"pom","slug":"pom","count":1,"path":"api/tags/pom.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"kubectl多集群环境切换","uid":"a04e64b279ef00352d55ff2b0588cef8","slug":"kubernetes/kubectl多集群环境切换","date":"2023-06-09T03:05:35.000Z","updated":"2023-08-17T02:25:16.558Z","comments":true,"path":"api/articles/kubernetes/kubectl多集群环境切换.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"官网Reference\"><a href=\"#官网Reference\" class=\"headerlink\" title=\"官网Reference\"></a>官网Reference</h2><p><a href=\"https://kubernetes.io/docs/reference/kubectl/\">https://kubernetes.io/docs/reference/kubectl/</a><br><a href=\"https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands\">https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands</a></p>\n<h2 id=\"查看配置文件\"><a href=\"#查看配置文件\" class=\"headerlink\" title=\"查看配置文件\"></a>查看配置文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl config view\n# get the password for the e2e user\nkubectl config view -o jsonpath&#x3D;&#39;&#123;.users[?(@.name &#x3D;&#x3D; &quot;e2e&quot;)].user.password&#125;&#39;\nkubectl config view -o jsonpath&#x3D;&#39;&#123;.users[].name&#125;&#39;    # display the first user\nkubectl config view -o jsonpath&#x3D;&#39;&#123;.users[*].name&#125;&#39;   # get a list of users\nkubectl config get-contexts                          # display list of contexts\nkubectl config current-context                       # display the current-context\nkubectl config use-context my-cluster-name           # set the default context to my-cluster-name\nkubectl config set-cluster my-cluster-name           # set a cluster entry in the kubeconfig\n</code></pre>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">apiVersion: v1\nclusters:\n  - cluster:\n      certificate-authority-data: DATA+OMITTED\n      server: https:&#x2F;&#x2F;kubernetes.docker.internal:6443\n    name: docker-desktop\n  - cluster:\n      certificate-authority-data: DATA+OMITTED\n      server: https:&#x2F;&#x2F;106.15.181.25:6443\n    name: kubernetes\ncontexts:\n  - context:\n      cluster: docker-desktop\n      user: docker-desktop\n    name: docker-desktop\n  - context:\n      cluster: kubernetes\n      user: kubernetes-admin\n    name: kubernetes-admin-c1f6703b626054a46bd22a3872051501c\ncurrent-context: docker-desktop\nkind: Config\npreferences: &#123; &#125;\nusers:\n  - name: docker-desktop\n    user:\n      client-certificate-data: REDACTED\n      client-key-data: REDACTED\n  - name: kubernetes-admin\n    user:\n      client-certificate-data: REDACTED\n      client-key-data: REDACTED</code></pre>\n<h2 id=\"切换集群\"><a href=\"#切换集群\" class=\"headerlink\" title=\"切换集群\"></a>切换集群</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl config use-context docker-desktop\nkubectl get ns\n#查看所有上下文\nkubectl config get-contexts\n#查看当前的上下文\nkubectl config current-context</code></pre>\n<h2 id=\"kubectl常用命令\"><a href=\"#kubectl常用命令\" class=\"headerlink\" title=\"kubectl常用命令\"></a>kubectl常用命令</h2><h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><p>可以使用文件扩展名 .yaml、.yml 和 .json</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl apply -f .&#x2F;my-manifest.yaml            # create resource(s)\nkubectl apply -f .&#x2F;my1.yaml -f .&#x2F;my2.yaml      # create from multiple files\nkubectl apply -f .&#x2F;dir                         # create resource(s) in all manifest files in dir\nkubectl apply -f https:&#x2F;&#x2F;git.io&#x2F;vPieo          # create resource(s) from url\nkubectl create deployment nginx --image&#x3D;nginx  # start a single instance of nginx\n\n# create a Job which prints &quot;Hello World&quot;\nkubectl create job hello --image&#x3D;busybox:1.28 -- echo &quot;Hello World&quot;\n\n# create a CronJob that prints &quot;Hello World&quot; every minute\nkubectl create cronjob hello --image&#x3D;busybox:1.28   --schedule&#x3D;&quot;*&#x2F;1 * * * *&quot; -- echo &quot;Hello World&quot;\n\nkubectl explain pods                           # get the documentation for pod manifests\n\n# Create multiple YAML objects from stdin\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox-sleep\nspec:\n  containers:\n  - name: busybox\n    image: busybox:1.28\n    args:\n    - sleep\n    - &quot;1000000&quot;\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: busybox-sleep-less\nspec:\n  containers:\n  - name: busybox\n    image: busybox:1.28\n    args:\n    - sleep\n    - &quot;1000&quot;\nEOF\n\n# Create a secret with several keys\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  password: $(echo -n &quot;s33msi4&quot; | base64 -w0)\n  username: $(echo -n &quot;jane&quot; | base64 -w0)\nEOF</code></pre>\n<h3 id=\"查看和查找资源\"><a href=\"#查看和查找资源\" class=\"headerlink\" title=\"查看和查找资源\"></a>查看和查找资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Get commands with basic output\nkubectl get services                          # List all services in the namespace\nkubectl get pods --all-namespaces             # List all pods in all namespaces\nkubectl get pods -o wide                      # List all pods in the current namespace, with more details\nkubectl get deployment my-dep                 # List a particular deployment\nkubectl get pods                              # List all pods in the namespace\nkubectl get pod my-pod -o yaml                # Get a pod&#39;s YAML\n\n# Describe commands with verbose output\nkubectl describe nodes my-node\nkubectl describe pods my-pod\n\n# List Services Sorted by Name\nkubectl get services --sort-by&#x3D;.metadata.name\n\n# List pods Sorted by Restart Count\nkubectl get pods --sort-by&#x3D;&#39;.status.containerStatuses[0].restartCount&#39;\n\n# List PersistentVolumes sorted by capacity\nkubectl get pv --sort-by&#x3D;.spec.capacity.storage\n\n# Get the version label of all pods with label app&#x3D;cassandra\nkubectl get pods --selector&#x3D;app&#x3D;cassandra -o \\\n  jsonpath&#x3D;&#39;&#123;.items[*].metadata.labels.version&#125;&#39;\n\n# Retrieve the value of a key with dots, e.g. &#39;ca.crt&#39;\nkubectl get configmap myconfig \\\n  -o jsonpath&#x3D;&#39;&#123;.data.ca\\.crt&#125;&#39;\n\n# Retrieve a base64 encoded value with dashes instead of underscores.\nkubectl get secret my-secret --template&#x3D;&#39;&#123;&#123;index .data &quot;key-name-with-dashes&quot;&#125;&#125;&#39;\n\n# Get all worker nodes (use a selector to exclude results that have a label\n# named &#39;node-role.kubernetes.io&#x2F;control-plane&#39;)\nkubectl get node --selector&#x3D;&#39;!node-role.kubernetes.io&#x2F;control-plane&#39;\n\n# Get all running pods in the namespace\nkubectl get pods --field-selector&#x3D;status.phase&#x3D;Running\n\n# Get ExternalIPs of all nodes\nkubectl get nodes -o jsonpath&#x3D;&#39;&#123;.items[*].status.addresses[?(@.type&#x3D;&#x3D;&quot;ExternalIP&quot;)].address&#125;&#39;\n\n# List Names of Pods that belong to Particular RC\n# &quot;jq&quot; command useful for transformations that are too complex for jsonpath, it can be found at https:&#x2F;&#x2F;stedolan.github.io&#x2F;jq&#x2F;\nsel&#x3D;$&#123;$(kubectl get rc my-rc --output&#x3D;json | jq -j &#39;.spec.selector | to_entries | .[] | &quot;\\(.key)&#x3D;\\(.value),&quot;&#39;)%?&#125;\necho $(kubectl get pods --selector&#x3D;$sel --output&#x3D;jsonpath&#x3D;&#123;.items..metadata.name&#125;)\n\n# Show labels for all pods (or any other Kubernetes object that supports labelling)\nkubectl get pods --show-labels\n\n# Check which nodes are ready\nJSONPATH&#x3D;&#39;&#123;range .items[*]&#125;&#123;@.metadata.name&#125;:&#123;range @.status.conditions[*]&#125;&#123;@.type&#125;&#x3D;&#123;@.status&#125;;&#123;end&#125;&#123;end&#125;&#39; \\\n &amp;&amp; kubectl get nodes -o jsonpath&#x3D;&quot;$JSONPATH&quot; | grep &quot;Ready&#x3D;True&quot;\n\n# Output decoded secrets without external tools\nkubectl get secret my-secret -o go-template&#x3D;&#39;&#123;&#123;range $k,$v :&#x3D; .data&#125;&#125;&#123;&#123;&quot;### &quot;&#125;&#125;&#123;&#123;$k&#125;&#125;&#123;&#123;&quot;\\n&quot;&#125;&#125;&#123;&#123;$v|base64decode&#125;&#125;&#123;&#123;&quot;\\n\\n&quot;&#125;&#125;&#123;&#123;end&#125;&#125;&#39;\n\n# List all Secrets currently in use by a pod\nkubectl get pods -o json | jq &#39;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&#39; | grep -v null | sort | uniq\n\n# List all containerIDs of initContainer of all pods\n# Helpful when cleaning up stopped containers, while avoiding removal of initContainers.\nkubectl get pods --all-namespaces -o jsonpath&#x3D;&#39;&#123;range .items[*].status.initContainerStatuses[*]&#125;&#123;.containerID&#125;&#123;&quot;\\n&quot;&#125;&#123;end&#125;&#39; | cut -d&#x2F; -f3\n\n# List Events sorted by timestamp\nkubectl get events --sort-by&#x3D;.metadata.creationTimestamp\n\n# List all warning events\nkubectl events --types&#x3D;Warning\n\n# Compares the current state of the cluster against the state that the cluster would be in if the manifest was applied.\nkubectl diff -f .&#x2F;my-manifest.yaml\n\n# Produce a period-delimited tree of all keys returned for nodes\n# Helpful when locating a key within a complex nested JSON structure\nkubectl get nodes -o json | jq -c &#39;paths|join(&quot;.&quot;)&#39;\n\n# Produce a period-delimited tree of all keys returned for pods, etc\nkubectl get pods -o json | jq -c &#39;paths|join(&quot;.&quot;)&#39;\n\n# Produce ENV for all pods, assuming you have a default container for the pods, default namespace and the &#96;env&#96; command is supported.\n# Helpful when running any supported command across all pods, not just &#96;env&#96;\nfor pod in $(kubectl get po --output&#x3D;jsonpath&#x3D;&#123;.items..metadata.name&#125;); do echo $pod &amp;&amp; kubectl exec -it $pod -- env; done\n\n# Get a deployment&#39;s status subresource\nkubectl get deployment nginx-deployment --subresource&#x3D;status</code></pre>\n<h3 id=\"更新资源\"><a href=\"#更新资源\" class=\"headerlink\" title=\"更新资源\"></a>更新资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl set image deployment&#x2F;frontend www&#x3D;image:v2               # Rolling update &quot;www&quot; containers of &quot;frontend&quot; deployment, updating the image\nkubectl rollout history deployment&#x2F;frontend                      # Check the history of deployments including the revision\nkubectl rollout undo deployment&#x2F;frontend                         # Rollback to the previous deployment\nkubectl rollout undo deployment&#x2F;frontend --to-revision&#x3D;2         # Rollback to a specific revision\nkubectl rollout status -w deployment&#x2F;frontend                    # Watch rolling update status of &quot;frontend&quot; deployment until completion\nkubectl rollout restart deployment&#x2F;frontend                      # Rolling restart of the &quot;frontend&quot; deployment\n\ncat pod.json | kubectl replace -f -                              # Replace a pod based on the JSON passed into stdin\n\n# Force replace, delete and then re-create the resource. Will cause a service outage.\nkubectl replace --force -f .&#x2F;pod.json\n\n# Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000\nkubectl expose rc nginx --port&#x3D;80 --target-port&#x3D;8000\n\n# Update a single-container pod&#39;s image version (tag) to v4\nkubectl get pod mypod -o yaml | sed &#39;s&#x2F;\\(image: myimage\\):.*$&#x2F;\\1:v4&#x2F;&#39; | kubectl replace -f -\n\nkubectl label pods my-pod new-label&#x3D;awesome                      # Add a Label\nkubectl label pods my-pod new-label-                             # Remove a label\nkubectl label pods my-pod new-label&#x3D;new-value --overwrite        # Overwrite an existing value\nkubectl annotate pods my-pod icon-url&#x3D;http:&#x2F;&#x2F;goo.gl&#x2F;XXBTWq       # Add an annotation\nkubectl annotate pods my-pod icon-                               # Remove annotation\nkubectl autoscale deployment foo --min&#x3D;2 --max&#x3D;10                # Auto scale a deployment &quot;foo&quot;</code></pre>\n<h3 id=\"修补资源\"><a href=\"#修补资源\" class=\"headerlink\" title=\"修补资源\"></a>修补资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># Partially update a node\nkubectl patch node k8s-node-1 -p &#39;&#123;&quot;spec&quot;:&#123;&quot;unschedulable&quot;:true&#125;&#125;&#39;\n\n# Update a container&#39;s image; spec.containers[*].name is required because it&#39;s a merge key\nkubectl patch pod valid-pod -p &#39;&#123;&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;name&quot;:&quot;kubernetes-serve-hostname&quot;,&quot;image&quot;:&quot;new image&quot;&#125;]&#125;&#125;&#39;\n\n# Update a container&#39;s image using a json patch with positional arrays\nkubectl patch pod valid-pod --type&#x3D;&#39;json&#39; -p&#x3D;&#39;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;&#x2F;spec&#x2F;containers&#x2F;0&#x2F;image&quot;, &quot;value&quot;:&quot;new image&quot;&#125;]&#39;\n\n# Disable a deployment livenessProbe using a json patch with positional arrays\nkubectl patch deployment valid-deployment  --type json   -p&#x3D;&#39;[&#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;&#x2F;spec&#x2F;template&#x2F;spec&#x2F;containers&#x2F;0&#x2F;livenessProbe&quot;&#125;]&#39;\n\n# Add a new element to a positional array\nkubectl patch sa default --type&#x3D;&#39;json&#39; -p&#x3D;&#39;[&#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;&#x2F;secrets&#x2F;1&quot;, &quot;value&quot;: &#123;&quot;name&quot;: &quot;whatever&quot; &#125; &#125;]&#39;\n\n# Update a deployment&#39;s replica count by patching its scale subresource\nkubectl patch deployment nginx-deployment --subresource&#x3D;&#39;scale&#39; --type&#x3D;&#39;merge&#39; -p &#39;&#123;&quot;spec&quot;:&#123;&quot;replicas&quot;:2&#125;&#125;&#39;</code></pre>\n<h3 id=\"编辑资源\"><a href=\"#编辑资源\" class=\"headerlink\" title=\"编辑资源\"></a>编辑资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl edit svc&#x2F;docker-registry                      # Edit the service named docker-registry\nKUBE_EDITOR&#x3D;&quot;nano&quot; kubectl edit svc&#x2F;docker-registry   # 使用nano编辑器编辑svc&#x2F;docker-registry配置文件</code></pre>\n<h3 id=\"伸缩资源\"><a href=\"#伸缩资源\" class=\"headerlink\" title=\"伸缩资源\"></a>伸缩资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl scale --replicas&#x3D;3 rs&#x2F;foo                                 # Scale a replicaset named &#39;foo&#39; to 3\nkubectl scale --replicas&#x3D;3 -f foo.yaml                            # Scale a resource specified in &quot;foo.yaml&quot; to 3\nkubectl scale --current-replicas&#x3D;2 --replicas&#x3D;3 deployment&#x2F;mysql  # If the deployment named mysql&#39;s current size is 2, scale mysql to 3\nkubectl scale --replicas&#x3D;5 rc&#x2F;foo rc&#x2F;bar rc&#x2F;baz                   # Scale multiple replication controllers</code></pre>\n<h3 id=\"删除资源\"><a href=\"#删除资源\" class=\"headerlink\" title=\"删除资源\"></a>删除资源</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl delete -f .&#x2F;pod.json                                      # Delete a pod using the type and name specified in pod.json\nkubectl delete pod unwanted --now                                 # Delete a pod with no grace period\nkubectl delete pod,service baz foo                                # Delete pods and services with same names &quot;baz&quot; and &quot;foo&quot;\nkubectl delete pods,services -l name&#x3D;myLabel                      # Delete pods and services with label name&#x3D;myLabel\nkubectl -n my-ns delete pod,svc --all                             # Delete all pods and services in namespace my-ns,\n# Delete all pods matching the awk pattern1 or pattern2\nkubectl get pods  -n mynamespace --no-headers&#x3D;true | awk &#39;&#x2F;pattern1|pattern2&#x2F;&#123;print $1&#125;&#39; | xargs  kubectl delete -n mynamespace pod</code></pre>\n<h3 id=\"与运行中的-Pod-交互\"><a href=\"#与运行中的-Pod-交互\" class=\"headerlink\" title=\"与运行中的 Pod 交互\"></a>与运行中的 Pod 交互</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl logs my-pod                                 # dump pod logs (stdout)\nkubectl logs -l name&#x3D;myLabel                        # dump pod logs, with label name&#x3D;myLabel (stdout)\nkubectl logs my-pod --previous                      # dump pod logs (stdout) for a previous instantiation of a container\nkubectl logs my-pod -c my-container                 # dump pod container logs (stdout, multi-container case)\nkubectl logs -l name&#x3D;myLabel -c my-container        # dump pod logs, with label name&#x3D;myLabel (stdout)\nkubectl logs my-pod -c my-container --previous      # dump pod container logs (stdout, multi-container case) for a previous instantiation of a container\nkubectl logs -f my-pod                              # stream pod logs (stdout)\nkubectl logs -f my-pod -c my-container              # stream pod container logs (stdout, multi-container case)\nkubectl logs -f -l name&#x3D;myLabel --all-containers    # stream all pods logs with label name&#x3D;myLabel (stdout)\nkubectl run -i --tty busybox --image&#x3D;busybox:1.28 -- sh  # Run pod as interactive shell\nkubectl run nginx --image&#x3D;nginx -n mynamespace      # Start a single instance of nginx pod in the namespace of mynamespace\nkubectl run nginx --image&#x3D;nginx --dry-run&#x3D;client -o yaml &gt; pod.yaml\n                                                    # Generate spec for running pod nginx and write it into a file called pod.yaml\nkubectl attach my-pod -i                            # Attach to Running Container\nkubectl port-forward my-pod 5000:6000               # Listen on port 5000 on the local machine and forward to port 6000 on my-pod\nkubectl exec my-pod -- ls &#x2F;                         # Run command in existing pod (1 container case)\nkubectl exec --stdin --tty my-pod -- &#x2F;bin&#x2F;sh        # Interactive shell access to a running pod (1 container case)\nkubectl exec my-pod -c my-container -- ls &#x2F;         # Run command in existing pod (multi-container case)\nkubectl top pod POD_NAME --containers               # Show metrics for a given pod and its containers\nkubectl top pod POD_NAME --sort-by&#x3D;cpu              # Show metrics for a given pod and sort it by &#39;cpu&#39; or &#39;memory&#39;</code></pre>\n<h3 id=\"将文件或目录复制到容器中或从容器中拷贝出来\"><a href=\"#将文件或目录复制到容器中或从容器中拷贝出来\" class=\"headerlink\" title=\"将文件或目录复制到容器中或从容器中拷贝出来\"></a>将文件或目录复制到容器中或从容器中拷贝出来</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">kubectl cp &#x2F;tmp&#x2F;foo_dir my-pod:&#x2F;tmp&#x2F;bar_dir            # Copy &#x2F;tmp&#x2F;foo_dir local directory to &#x2F;tmp&#x2F;bar_dir in a remote pod in the current namespace\nkubectl cp &#x2F;tmp&#x2F;foo my-pod:&#x2F;tmp&#x2F;bar -c my-container    # Copy &#x2F;tmp&#x2F;foo local file to &#x2F;tmp&#x2F;bar in a remote pod in a specific container\nkubectl cp &#x2F;tmp&#x2F;foo my-namespace&#x2F;my-pod:&#x2F;tmp&#x2F;bar       # Copy &#x2F;tmp&#x2F;foo local file to &#x2F;tmp&#x2F;bar in a remote pod in namespace my-namespace\nkubectl cp my-namespace&#x2F;my-pod:&#x2F;tmp&#x2F;foo &#x2F;tmp&#x2F;bar       # Copy &#x2F;tmp&#x2F;foo from a remote pod to &#x2F;tmp&#x2F;bar locally\n\ntar cf - &#x2F;tmp&#x2F;foo | kubectl exec -i -n my-namespace my-pod -- tar xf - -C &#x2F;tmp&#x2F;bar           # Copy &#x2F;tmp&#x2F;foo local file to &#x2F;tmp&#x2F;bar in a remote pod in namespace my-namespace\nkubectl exec -n my-namespace my-pod -- tar cf - &#x2F;tmp&#x2F;foo | tar xf - -C &#x2F;tmp&#x2F;bar    # Copy &#x2F;tmp&#x2F;foo from a remote pod to &#x2F;tmp&#x2F;bar locally</code></pre>\n<h3 id=\"与部署和服务交互\"><a href=\"#与部署和服务交互\" class=\"headerlink\" title=\"与部署和服务交互\"></a>与部署和服务交互</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 对节点进行更新时建议这样操作 先排除调度 去掉所有资源 更新完之后再恢复调度\nkubectl cordon my-node                                                # Mark my-node as unschedulable\nkubectl drain my-node                                                 # Drain my-node in preparation for maintenance\nkubectl uncordon my-node                                              # Mark my-node as schedulable\nkubectl top node my-node                                              # Show metrics for a given node\nkubectl cluster-info                                                  # Display addresses of the master and services\nkubectl cluster-info dump                                             # Dump current cluster state to stdout\nkubectl cluster-info dump --output-directory&#x3D;&#x2F;path&#x2F;to&#x2F;cluster-state   # Dump current cluster state to &#x2F;path&#x2F;to&#x2F;cluster-state\n\n# View existing taints on which exist on current nodes.\nkubectl get nodes -o&#x3D;&#39;custom-columns&#x3D;NodeName:.metadata.name,TaintKey:.spec.taints[*].key,TaintValue:.spec.taints[*].value,TaintEffect:.spec.taints[*].effect&#39;\n\n# If a taint with that key and effect already exists, its value is replaced as specified.\nkubectl taint nodes foo dedicated&#x3D;special-user:NoSchedule</code></pre>\n<h3 id=\"资源类型\"><a href=\"#资源类型\" class=\"headerlink\" title=\"资源类型\"></a>资源类型</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># 列出所有受支持的资源类型及其简称\nkubectl api-resources</code></pre>\n<h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-o&#x3D;custom-columns&#x3D;&lt;spec&gt;\t#Print a table using a comma separated list of custom columns\n-o&#x3D;custom-columns-file&#x3D;&lt;filename&gt;\t#Print a table using the custom columns template in the &lt;filename&gt; file\n-o&#x3D;json\t#Output a JSON formatted API object\n-o&#x3D;jsonpath&#x3D;&lt;template&gt;\t#Print the fields defined in a jsonpath expression\n-o&#x3D;jsonpath-file&#x3D;&lt;filename&gt;\t#Print the fields defined by the jsonpath expression in the &lt;filename&gt; file\n-o&#x3D;name\t#Print only the resource name and nothing else\n-o&#x3D;wide\t#Output in the plain-text format with any additional information, and for pods, the node name is included\n-o&#x3D;yaml\t#Output a YAML formatted API object</code></pre>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># All images running in a cluster\nkubectl get pods -A -o&#x3D;custom-columns&#x3D;&#39;IMAGE:spec.containers[*].image&#39;\n\n# All images running in namespace: default, grouped by Pod\nkubectl get pods --namespace default --output&#x3D;custom-columns&#x3D;&quot;NAME:.metadata.name,IMAGE:.spec.containers[*].image&quot;\n\n # All images excluding &quot;registry.k8s.io&#x2F;coredns:1.6.2&quot;\nkubectl get pods -A -o&#x3D;custom-columns&#x3D;&#39;DATA:spec.containers[?(@.image!&#x3D;&quot;registry.k8s.io&#x2F;coredns:1.6.2&quot;)].image&#39;\n\n# All fields under metadata regardless of name\nkubectl get pods -A -o&#x3D;custom-columns&#x3D;&#39;DATA:metadata.*&#39;</code></pre>\n<h3 id=\"输出详细信息和调试\"><a href=\"#输出详细信息和调试\" class=\"headerlink\" title=\"输出详细信息和调试\"></a>输出详细信息和调试</h3><p>Kubectl 详细程度由-v 或 –v 标志控制，后跟一个表示日志级别的整数。具体级别为0-9</p>\n","text":"官网Referencehttps://kubernetes.io/docs/reference/kubectl/https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands 查看配置文件kubect...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"kubernetes","slug":"kubernetes","count":7,"path":"api/categories/kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":8,"path":"api/tags/kubernetes.json"},{"name":"kubectl","slug":"kubectl","count":1,"path":"api/tags/kubectl.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%98%E7%BD%91Reference\"><span class=\"toc-text\">官网Reference</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">查看配置文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%87%E6%8D%A2%E9%9B%86%E7%BE%A4\"><span class=\"toc-text\">切换集群</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">kubectl常用命令</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">创建对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%92%8C%E6%9F%A5%E6%89%BE%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">查看和查找资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E6%96%B0%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">更新资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E8%A1%A5%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">修补资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%BE%91%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">编辑资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%B8%E7%BC%A9%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">伸缩资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">删除资源</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E8%BF%90%E8%A1%8C%E4%B8%AD%E7%9A%84-Pod-%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">与运行中的 Pod 交互</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%96%87%E4%BB%B6%E6%88%96%E7%9B%AE%E5%BD%95%E5%A4%8D%E5%88%B6%E5%88%B0%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%88%96%E4%BB%8E%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%8B%B7%E8%B4%9D%E5%87%BA%E6%9D%A5\"><span class=\"toc-text\">将文件或目录复制到容器中或从容器中拷贝出来</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E9%83%A8%E7%BD%B2%E5%92%8C%E6%9C%8D%E5%8A%A1%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">与部署和服务交互</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">资源类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%E5%92%8C%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">输出详细信息和调试</span></a></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"docker-entrypoint.sh脚本","uid":"bd89df672fae4e3ad93a3365c0b7431d","slug":"docker/docker-entrypoint-sh脚本","date":"2023-06-09T06:13:44.000Z","updated":"2023-08-17T02:25:16.558Z","comments":true,"path":"api/articles/docker/docker-entrypoint-sh脚本.json","keywords":"chriswood blogs sharing","cover":null,"text":"出处很多著名库的Dockerfile文件中，通常都是ENTRYPOINT字段是这样： ENTRYPOINT [&quot;docker-entrypoint.sh&quot;] 用处我们参考分析下MySQL的Dockerfile文件，来认识下docker-entrypoint.s...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"docker","slug":"docker","count":6,"path":"api/categories/docker.json"}],"tags":[{"name":"docker","slug":"docker","count":5,"path":"api/tags/docker.json"},{"name":"docker-entrypoint.sh","slug":"docker-entrypoint-sh","count":1,"path":"api/tags/docker-entrypoint-sh.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"kubernetes在阿里云上的应用","uid":"53f7dd1efa70a226f7a8abd166f55336","slug":"kubernetes/kubernetes在阿里云上的应用","date":"2023-06-07T09:34:32.000Z","updated":"2023-08-17T02:25:16.558Z","comments":true,"path":"api/articles/kubernetes/kubernetes在阿里云上的应用.json","keywords":"chriswood blogs sharing","cover":null,"text":"阿里云部署jeepayConfigMap--- apiVersion: v1 kind: ConfigMap metadata: name: pay-mysql-config namespace: pay data: # replace your filename of prop...","link":"","photos":[],"count_time":{"symbolsCount":"184k","symbolsTime":"2:47"},"categories":[{"name":"kubernetes","slug":"kubernetes","count":7,"path":"api/categories/kubernetes.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":8,"path":"api/tags/kubernetes.json"},{"name":"aliyun","slug":"aliyun","count":1,"path":"api/tags/aliyun.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
{"title":"springboot配置文件","uid":"38ca70cafbfd87b7f0418630bd7d0ad1","slug":"springboot/springboot配置文件","date":"2022-10-08T07:55:43.000Z","updated":"2023-02-07T07:03:00.000Z","comments":true,"path":"api/articles/springboot/springboot配置文件.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"springboot配置文件\"><a href=\"#springboot配置文件\" class=\"headerlink\" title=\"springboot配置文件\"></a>springboot配置文件</h2><p>在springboot 项目中一般默认的配置文件是application.properties,但是实际项目中我们一般会使用application.yml文件</p>\n<h3 id=\"yml文件读取顺序\"><a href=\"#yml文件读取顺序\" class=\"headerlink\" title=\"yml文件读取顺序\"></a>yml文件读取顺序</h3><h4 id=\"存放目录\"><a href=\"#存放目录\" class=\"headerlink\" title=\"存放目录\"></a>存放目录</h4><p>SpringBoot配置文件默认可以放到以下目录中，可以自动读取到：</p>\n<ul>\n<li>项目根目录中config目录下</li>\n<li>项目根目录下</li>\n<li>项目resources目录中config目录下</li>\n<li>项目的resources目录下</li>\n</ul>\n<h4 id=\"读取顺序\"><a href=\"#读取顺序\" class=\"headerlink\" title=\"读取顺序\"></a>读取顺序</h4><p>在不同的目录中存在多个配置文件，它的读取顺序是：<br>1、config&#x2F;application.properties（项目根目录中config目录下）<br>2、config&#x2F;application.yml<br>3、application.properties（项目根目录下）<br>4、application.yml<br>5、resources&#x2F;config&#x2F;application.properties（项目resources目录中config目录下）<br>6、resources&#x2F;config&#x2F;application.yml<br>7、resources&#x2F;application.properties（项目的resources目录下） 8、resources&#x2F;application.yml</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：1、如果同一个目录下，有application.yml也有application.properties，默认先读取application.properties。<br>2、如果同一个配置属性，在多个配置文件都配置了，默认使用第1个读取到的，后面读取的不覆盖前面读取到的。<br>3、创建SpringBoot项目时，一般的配置文件放置在“项目的resources目录下</p></blockquote>\n<h3 id=\"yml文件读取方式\"><a href=\"#yml文件读取方式\" class=\"headerlink\" title=\"yml文件读取方式\"></a>yml文件读取方式</h3><h4 id=\"yml文件规则\"><a href=\"#yml文件规则\" class=\"headerlink\" title=\"yml文件规则\"></a>yml文件规则</h4><ul>\n<li>yml文件的好处，天然的树状结构，一目了然，实质上跟properties是差不多</li>\n<li>不支持tab缩进</li>\n<li>可以使用 “-小写字母” 或 “_小写字母”来 代替 “大写字母”,如 userName 与 user-name ,user_name 含义是一样的,key: value 格式书写 key,后面跟着冒号,再后面跟着一个空格,然后是值</li>\n</ul>\n<h4 id=\"几种数据格式的表示方式\"><a href=\"#几种数据格式的表示方式\" class=\"headerlink\" title=\"几种数据格式的表示方式\"></a>几种数据格式的表示方式</h4><h5 id=\"1-普通的值（数字，字符串，布尔）\"><a href=\"#1-普通的值（数字，字符串，布尔）\" class=\"headerlink\" title=\"1.普通的值（数字，字符串，布尔）\"></a>1.普通的值（数字，字符串，布尔）</h5><p>key: value ,如:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">age: 18\nname: zhangsan</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：字符串默认不用加上单引号或者双引号；<br>“”：双引号不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思 name: “zhangsan \\n lisi”：输出；zhangsan 换行 lisi<br>‘’：单引号会转义特殊字符，特殊字符最终只是一个普通的字符串数据 name: ‘zhangsan \\n lisi’：输出；zhangsan \\n lisi</p></blockquote>\n<h5 id=\"2-对象、Map（属性和值）（键值对）\"><a href=\"#2-对象、Map（属性和值）（键值对）\" class=\"headerlink\" title=\"2.对象、Map（属性和值）（键值对）\"></a>2.对象、Map（属性和值）（键值对）</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">person:\n  age: 18\n  name: mysgk\nmap:\n  name: 刘德华\n  age: 10</code></pre>\n\n<h5 id=\"3-数组（List、Set）\"><a href=\"#3-数组（List、Set）\" class=\"headerlink\" title=\"3.数组（List、Set）\"></a>3.数组（List、Set）</h5><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">hands:\n  - left\n  - right\nlist: 列表1,列表2,列表3\nset: [ 集合1,集合2,集合3 ]</code></pre>\n\n<h4 id=\"读取配置的方式\"><a href=\"#读取配置的方式\" class=\"headerlink\" title=\"读取配置的方式\"></a>读取配置的方式</h4><h5 id=\"1-Value\"><a href=\"#1-Value\" class=\"headerlink\" title=\"1.@Value\"></a>1.@Value</h5><p>直接在对应的变量上添加@Value注解即可，此时配置的key可以不与变量名相同</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">server:\n  port: 8081</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Value(&quot;$&#123;server.port&#125;&quot;)\npublic String serverPort;</code></pre>\n\n<h5 id=\"2-ConfigurationProperties\"><a href=\"#2-ConfigurationProperties\" class=\"headerlink\" title=\"2.@ConfigurationProperties\"></a>2.@ConfigurationProperties</h5><p>新增一个Student类，同时添加@ConfigurationProperties注解</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">student:\n  name: 刘德华\n  age: 40</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Data\n@ConfigurationProperties(prefix &#x3D; &quot;student&quot;)\npublic class Student &#123;    \n    String name;    \n    int age;\n&#125;</code></pre>\n\n<h5 id=\"3-Environment\"><a href=\"#3-Environment\" class=\"headerlink\" title=\"3.@Environment\"></a>3.@Environment</h5><p>用的很少，了解即可</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">test:\n  msg: aaa</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Autowired\nprivate Environment env\n\npublic static void main() &#123;\n    System.out.println(env.getProperty(&quot;test.msg&quot;));\n&#125;</code></pre>\n","text":"springboot配置文件在springboot 项目中一般默认的配置文件是application.properties,但是实际项目中我们一般会使用application.yml文件 yml文件读取顺序存放目录SpringBoot配置文件默认可以放到以下目录中，可以自动读取到...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"springboot","slug":"springboot","count":2,"path":"api/categories/springboot.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"},{"name":"springboot配置","slug":"springboot配置","count":2,"path":"api/tags/springboot配置.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">springboot配置文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yml%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">yml文件读取顺序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">存放目录</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">读取顺序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#yml%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">yml文件读取方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#yml%E6%96%87%E4%BB%B6%E8%A7%84%E5%88%99\"><span class=\"toc-text\">yml文件规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%87%A0%E7%A7%8D%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">几种数据格式的表示方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E6%99%AE%E9%80%9A%E7%9A%84%E5%80%BC%EF%BC%88%E6%95%B0%E5%AD%97%EF%BC%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%B8%83%E5%B0%94%EF%BC%89\"><span class=\"toc-text\">1.普通的值（数字，字符串，布尔）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%AF%B9%E8%B1%A1%E3%80%81Map%EF%BC%88%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC%EF%BC%89%EF%BC%88%E9%94%AE%E5%80%BC%E5%AF%B9%EF%BC%89\"><span class=\"toc-text\">2.对象、Map（属性和值）（键值对）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E6%95%B0%E7%BB%84%EF%BC%88List%E3%80%81Set%EF%BC%89\"><span class=\"toc-text\">3.数组（List、Set）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">读取配置的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-Value\"><span class=\"toc-text\">1.@Value</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-ConfigurationProperties\"><span class=\"toc-text\">2.@ConfigurationProperties</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-Environment\"><span class=\"toc-text\">3.@Environment</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Java高并发专题-JUC线程池","uid":"ab71b7b05749a5527c735a9fb6d5af98","slug":"java/concurrent/Java高并发专题-JUC线程池","date":"2022-10-08T08:55:43.000Z","updated":"2023-08-16T07:51:26.879Z","comments":true,"path":"api/articles/java/concurrent/Java高并发专题-JUC线程池.json","keywords":"chriswood blogs sharing","cover":null,"text":"线程池Executor框架接口 Executors.newCachedThreadPool() 创建缓存线程池public class ThreadPoolExample1 &#123; public static void main(String[] args) &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"}],"tags":[{"name":"Java高并发","slug":"Java高并发","count":1,"path":"api/tags/Java高并发.json"},{"name":"JUC","slug":"JUC","count":1,"path":"api/tags/JUC.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Mysql基础","uid":"e92c64341ee2ef385eda6a1d1f832be9","slug":"mysql/base/Mysql基础","date":"2022-10-01T04:55:09.000Z","updated":"2023-08-16T07:51:26.883Z","comments":true,"path":"api/articles/mysql/base/Mysql基础.json","keywords":"chriswood blogs sharing","cover":null,"text":"Mysql常见数据库 MYSQL：开源免费的数据库，小型的数据库.已经被Oracle收购了.MySQL6.x版本也开始收费。 Oracle：收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。 DB2 ：IBM公司的数据库产品,收费的。常应用在银...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/categories/Mysql.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/tags/Mysql.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}
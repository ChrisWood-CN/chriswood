{"title":"springboot日志配置","uid":"6bb5feb5ebe53be9e2c2838a6f221b1e","slug":"springboot/springboot日志配置","date":"2023-02-07T06:59:47.000Z","updated":"2023-06-09T05:39:02.819Z","comments":true,"path":"api/articles/springboot/springboot日志配置.json","keywords":"chriswood blogs sharing","cover":null,"content":"<h2 id=\"默认日志-Logback\"><a href=\"#默认日志-Logback\" class=\"headerlink\" title=\"默认日志 Logback\"></a>默认日志 Logback</h2><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。 spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot<br>默认的日志框架 logback。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>日志级别从低到高分为 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果设置为 WARN ，则低于 WARN 的信息都不会输出。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台</p></blockquote>\n<p>还可以通过启动您的应用程序 –debug 标志来启用“调试”模式。</p>\n<ul>\n<li>在运行命令后加入–debug标志，如</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$ java -jar springTest.jar --debug</code></pre>\n\n<ul>\n<li>在application.properties中配置debug&#x3D;true</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是自己应用的日志并不会输出为DEBUG级别</p></blockquote>\n<h2 id=\"文件输出\"><a href=\"#文件输出\" class=\"headerlink\" title=\"文件输出\"></a>文件输出</h2><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。</p>\n<ul>\n<li>在application.properties或application.yml配置。 这样只能配置简单的场景，保存路径、日志格式等，复杂的场景（区分 info 和 error 的日志、每天产生一个日志文件等）满足不了，只能自定义配置</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">logging:\n  level:\n    root: info #整个项目的日志级别为info\n    com.taotao: debug  #com.taotao包下所有class以debug级别输出\n    org.springframework: warn #org.springframework包下所有class以warn级别输出\n  pattern:\n    console: &quot;%d-%msg%n&quot;\n  path: .&#x2F;logs  #默认会在设置的 path 生成一个spring.log 文件\n  file: .&#x2F;logs&#x2F;test-log #指定文件名</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：path file 二者不能同时使用，如若同时使用，则只有logging.file生效 默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO</p></blockquote>\n<h2 id=\"自定义日志配置\"><a href=\"#自定义日志配置\" class=\"headerlink\" title=\"自定义日志配置\"></a>自定义日志配置</h2><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载</p>\n<ul>\n<li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li>\n<li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li>\n<li>Log4j2：log4j2-spring.xml, log4j2.xml</li>\n<li>JDK (Java Util Logging)：logging.properties</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。 默认的命名规则，并且放在 src&#x2F;main&#x2F;resources 下面即可</p></blockquote>\n<p>如果想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，application.yml可以通过logging.config属性指定自定义的名字</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">logging:\n  config: classpath:log.xml</code></pre>\n\n<h3 id=\"根节点-configuration\"><a href=\"#根节点-configuration\" class=\"headerlink\" title=\"根节点 configuration\"></a>根节点 configuration</h3><p>1.configuration有5个子节点 2.configuration属性</p>\n<ul>\n<li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li>\n<li>scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li>\n<li>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;\n\n&lt;configuration&gt;\n    &lt;property name&#x3D;&quot;log.path&quot; value&#x3D;&quot;&#x2F;pethouse&#x2F;server&#x2F;log&quot;&#x2F;&gt;\n    &lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml&quot;&#x2F;&gt;\n    &lt;!--  ...--&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<h3 id=\"子节点一-root\"><a href=\"#子节点一-root\" class=\"headerlink\" title=\"子节点一 root\"></a>子节点一 root</h3><ul>\n<li>1.root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</li>\n<li>2.level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。</li>\n<li>3.可以包含零个或多个元素，标识这个appender将会添加到这个loger</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">    &lt;!-- 系统日志输出 --&gt;\n&lt;appender name&#x3D;&quot;file_info&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n    &lt;file&gt;$&#123;log.path&#125;&#x2F;sys-info.log&lt;&#x2F;file&gt;\n    &lt;!-- 循环政策：基于时间创建日志文件 --&gt;\n    &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n        &lt;!-- 日志文件名格式 --&gt;\n        &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;sys-info.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;\n        &lt;!-- 日志最大的历史 60天 --&gt;\n        &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;\n    &lt;&#x2F;rollingPolicy&gt;\n    &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n        &lt;!-- 过滤的级别 --&gt;\n        &lt;level&gt;INFO&lt;&#x2F;level&gt;\n        &lt;!-- 匹配时的操作：接收（记录） --&gt;\n        &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;\n        &lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;\n        &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;\n    &lt;&#x2F;filter&gt;\n&lt;&#x2F;appender&gt;\n\n&lt;appender name&#x3D;&quot;file_error&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n  &lt;file&gt;$&#123;log.path&#125;&#x2F;sys-error.log&lt;&#x2F;file&gt;\n  &lt;!-- 循环政策：基于时间创建日志文件 --&gt;\n  &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n      &lt;!-- 日志文件名格式 --&gt;\n      &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;sys-error.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;\n      &lt;!-- 日志最大的历史 60天 --&gt;\n      &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;\n  &lt;&#x2F;rollingPolicy&gt;\n  &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n      &lt;!-- 过滤的级别 --&gt;\n      &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n      &lt;!-- 匹配时的操作：接收（记录） --&gt;\n      &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;\n      &lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;\n      &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;\n  &lt;&#x2F;filter&gt;\n&lt;&#x2F;appender&gt;\n\n&lt;!-- info异步输出 --&gt;\n&lt;appender name&#x3D;&quot;async_info&quot; class&#x3D;&quot;com.yomahub.tlog.core.enhance.logback.async.AspectLogbackAsyncAppender&quot;&gt;\n  &lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;\n  &lt;discardingThreshold&gt;0&lt;&#x2F;discardingThreshold&gt;\n  &lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;\n  &lt;queueSize&gt;512&lt;&#x2F;queueSize&gt;\n  &lt;!-- 添加附加的appender,最多只能添加一个 --&gt;\n  &lt;appender-ref ref&#x3D;&quot;file_info&quot;&#x2F;&gt;\n&lt;&#x2F;appender&gt;\n\n&lt;!-- error异步输出 --&gt;\n&lt;appender name&#x3D;&quot;async_error&quot; class&#x3D;&quot;com.yomahub.tlog.core.enhance.logback.async.AspectLogbackAsyncAppender&quot;&gt;\n  &lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;\n  &lt;discardingThreshold&gt;0&lt;&#x2F;discardingThreshold&gt;\n  &lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;\n  &lt;queueSize&gt;512&lt;&#x2F;queueSize&gt;\n  &lt;!-- 添加附加的appender,最多只能添加一个 --&gt;\n  &lt;appender-ref ref&#x3D;&quot;file_error&quot;&#x2F;&gt;\n&lt;&#x2F;appender&gt;\n&lt;root level&#x3D;&quot;info&quot;&gt;\n  &lt;appender-ref ref&#x3D;&quot;console&quot;&#x2F;&gt;\n  &lt;appender-ref ref&#x3D;&quot;async_info&quot;&#x2F;&gt;\n  &lt;appender-ref ref&#x3D;&quot;async_error&quot;&#x2F;&gt;\n  &lt;appender-ref ref&#x3D;&quot;file_console&quot;&#x2F;&gt;\n&lt;&#x2F;root&gt;</code></pre>\n\n<h3 id=\"子节点二-contextName-设置上下文名称\"><a href=\"#子节点二-contextName-设置上下文名称\" class=\"headerlink\" title=\"子节点二 contextName 设置上下文名称\"></a>子节点二 contextName 设置上下文名称</h3><ul>\n<li>1.每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。</li>\n<li>2.一旦设置，不能修改,可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性，可有可无。<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;contextName&gt;pethouse-server&lt;&#x2F;contextName&gt;</code></pre></li>\n</ul>\n<h3 id=\"子节点三-property-设置变量\"><a href=\"#子节点三-property-设置变量\" class=\"headerlink\" title=\"子节点三 property 设置变量\"></a>子节点三 property 设置变量</h3><ul>\n<li>1.用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。</li>\n<li>2.通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;property name&#x3D;&quot;log.path&quot; value&#x3D;&quot;&#x2F;pethouse&#x2F;server&#x2F;log&quot;&#x2F;&gt;</code></pre></li>\n</ul>\n<h3 id=\"子节点四-appender\"><a href=\"#子节点四-appender\" class=\"headerlink\" title=\"子节点四 appender\"></a>子节点四 appender</h3><ul>\n<li>1.appender用来格式化日志输出节点，有2个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。</li>\n</ul>\n<h5 id=\"控制台输出-ConsoleAppender\"><a href=\"#控制台输出-ConsoleAppender\" class=\"headerlink\" title=\"控制台输出 ConsoleAppender\"></a>控制台输出 ConsoleAppender</h5><pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;encoder&gt;表示对日志进行编码：\n%d&#123;HH: mm:ss.SSS&#125;——日志输出时间\n%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用\n%-5level——日志级别，并且使用5个字符靠左对齐\n%logger&#123;36&#125;——日志输出者的名字\n%msg——日志消息\n%n——平台的换行符\nThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志</code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;configuration&gt;\n    &lt;contextName&gt;pethouse-server&lt;&#x2F;contextName&gt;\n    &lt;!-- 彩色日志 --&gt;\n    &lt;!-- 彩色日志依赖的渲染类 --&gt;\n    &lt;conversionRule conversionWord&#x3D;&quot;clr&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ColorConverter&quot;&#x2F;&gt;\n    &lt;conversionRule conversionWord&#x3D;&quot;wex&quot;\n                    converterClass&#x3D;&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;&#x2F;&gt;\n    &lt;conversionRule conversionWord&#x3D;&quot;wEx&quot;\n                    converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;&#x2F;&gt;\n    &lt;!-- 彩色日志格式 --&gt;\n    &lt;property name&#x3D;&quot;CONSOLE_LOG_PATTERN&quot;\n              value&#x3D;&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;&#x2F;&gt;\n    &lt;!--输出到控制台 ConsoleAppender--&gt;\n    &lt;appender name&#x3D;&quot;consoleLog1&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;!--展示格式 layout--&gt;\n        &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;\n            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;&#x2F;pattern&gt;\n        &lt;&#x2F;layout&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;appender name&#x3D;&quot;consoleLog2&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;\n            &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n        &lt;&#x2F;filter&gt;\n        &lt;encoder&gt;\n            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;&#x2F;Pattern&gt;\n            &lt;!-- 设置字符集 --&gt;\n            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;\n        &lt;&#x2F;encoder&gt;\n    &lt;&#x2F;appender&gt;\n    &lt;!--指定最基础的日志输出级别--&gt;\n    &lt;root level&#x3D;&quot;INFO&quot;&gt;\n        &lt;!--appender将会添加到这个loger--&gt;\n        &lt;appender-ref ref&#x3D;&quot;consoleLog1&quot;&#x2F;&gt;\n        &lt;appender-ref ref&#x3D;&quot;consoleLog2&quot;&#x2F;&gt;\n    &lt;&#x2F;root&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<h5 id=\"输出到文件-RollingFileAppender\"><a href=\"#输出到文件-RollingFileAppender\" class=\"headerlink\" title=\"输出到文件 RollingFileAppender\"></a>输出到文件 RollingFileAppender</h5><p>另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;appender name&#x3D;&quot;fileInfoLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n    &lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，\n    所以我们使用下面的策略，可以避免输出 Error 的日志--&gt;\n    &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n        &lt;!--过滤 Error--&gt;\n        &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n        &lt;!--匹配到就禁止--&gt;\n        &lt;onMatch&gt;DENY&lt;&#x2F;onMatch&gt;\n        &lt;!--没有匹配到就允许--&gt;\n        &lt;onMismatch&gt;ACCEPT&lt;&#x2F;onMismatch&gt;\n    &lt;&#x2F;filter&gt;\n    &lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\n        如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天\n        的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。\n    --&gt;\n    &lt;File&gt;$&#123;logback.logdir&#125;&#x2F;info.$&#123;logback.appname&#125;.log&lt;&#x2F;File&gt;\n    &lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;\n    &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n        &lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;\n        &lt;FileNamePattern&gt;$&#123;logback.logdir&#125;&#x2F;info.$&#123;logback.appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;FileNamePattern&gt;\n        &lt;!--只保留最近90天的日志--&gt;\n        &lt;maxHistory&gt;90&lt;&#x2F;maxHistory&gt;\n        &lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;\n        &lt;totalSizeCap&gt;1GB&lt;&#x2F;totalSizeCap&gt;\n    &lt;&#x2F;rollingPolicy&gt;\n    &lt;!--日志输出编码格式化--&gt;\n    &lt;encoder&gt;\n        &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;\n        &lt;pattern&gt;%d [%thread] %-5level %logger&#123;36&#125; %line - %msg%n&lt;&#x2F;pattern&gt;\n    &lt;&#x2F;encoder&gt;\n&lt;&#x2F;appender&gt;\n\n\n&lt;appender name&#x3D;&quot;fileErrorLog&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n&lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt;\n&lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;\n    &lt;level&gt;Error&lt;&#x2F;level&gt;\n&lt;&#x2F;filter&gt;\n&lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\n    如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天\n    的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。\n--&gt;\n&lt;File&gt;$&#123;logback.logdir&#125;&#x2F;error.$&#123;logback.appname&#125;.log&lt;&#x2F;File&gt;\n&lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;\n&lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n    &lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt;\n    &lt;FileNamePattern&gt;$&#123;logback.logdir&#125;&#x2F;error.$&#123;logback.appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;FileNamePattern&gt;\n    &lt;!--只保留最近90天的日志--&gt;\n    &lt;maxHistory&gt;90&lt;&#x2F;maxHistory&gt;\n    &lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;\n    &lt;totalSizeCap&gt;1GB&lt;&#x2F;totalSizeCap&gt;\n&lt;&#x2F;rollingPolicy&gt;\n&lt;!--日志输出编码格式化--&gt;\n&lt;encoder&gt;\n    &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;\n    &lt;pattern&gt;%d [%thread] %-5level %logger&#123;36&#125; %line - %msg%n&lt;&#x2F;pattern&gt;\n&lt;&#x2F;encoder&gt;\n&lt;&#x2F;appender&gt;</code></pre>\n\n<h5 id=\"异步输出-AspectLogbackAsyncAppender\"><a href=\"#异步输出-AspectLogbackAsyncAppender\" class=\"headerlink\" title=\"异步输出 AspectLogbackAsyncAppender\"></a>异步输出 AspectLogbackAsyncAppender</h5><p>基于以上两种基础输出做了一层异步处理的包装，每个AspectLogbackAsyncAppender最多只能包装一个appender</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;appender name&#x3D;&quot;file_error&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;\n  &lt;file&gt;$&#123;log.path&#125;&#x2F;sys-error.log&lt;&#x2F;file&gt;\n  &lt;!-- 循环政策：基于时间创建日志文件 --&gt;\n  &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;\n      &lt;!-- 日志文件名格式 --&gt;\n      &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;sys-error.%d&#123;yyyy-MM-dd&#125;.log&lt;&#x2F;fileNamePattern&gt;\n      &lt;!-- 日志最大的历史 60天 --&gt;\n      &lt;maxHistory&gt;60&lt;&#x2F;maxHistory&gt;\n  &lt;&#x2F;rollingPolicy&gt;\n  &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;\n      &lt;!-- 过滤的级别 --&gt;\n      &lt;level&gt;ERROR&lt;&#x2F;level&gt;\n      &lt;!-- 匹配时的操作：接收（记录） --&gt;\n      &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;\n      &lt;!-- 不匹配时的操作：拒绝（不记录） --&gt;\n      &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;\n  &lt;&#x2F;filter&gt;\n&lt;&#x2F;appender&gt;\n\n&lt;!-- error异步输出 --&gt;\n&lt;appender name&#x3D;&quot;async_error&quot; class&#x3D;&quot;com.yomahub.tlog.core.enhance.logback.async.AspectLogbackAsyncAppender&quot;&gt;\n  &lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;\n  &lt;discardingThreshold&gt;0&lt;&#x2F;discardingThreshold&gt;\n  &lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;\n  &lt;queueSize&gt;512&lt;&#x2F;queueSize&gt;\n  &lt;!-- 添加附加的appender,最多只能添加一个 --&gt;\n  &lt;appender-ref ref&#x3D;&quot;file_error&quot;&#x2F;&gt;\n&lt;&#x2F;appender&gt;</code></pre>\n\n<h3 id=\"子节点五-logger\"><a href=\"#子节点五-logger\" class=\"headerlink\" title=\"子节点五 logger\"></a>子节点五 logger</h3><h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><ul>\n<li>name:用来指定受此logger约束的某一个包或者具体的某一个类。</li>\n<li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，<br>代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</li>\n<li>addtivity:是否向上级logger传递打印信息。默认是true。</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。\n&lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性</code></pre>\n\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><ul>\n<li>1.带有logger的配置，不指定级别，不指定appender，logback-spring.xml增加 logger 配置如下：</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--控制com.taotao.pethouse.app.controller包下的所有类的日志的打印，--&gt;\n&lt;!--        没有设置打印级别，所以继承他的上级的日志级别“info”；--&gt;\n&lt;!--        没有设置addtivity，默认为true，将此loger的打印信息向上级传递；--&gt;\n&lt;!--        没有设置appender，此loger本身不打印任何信息。--&gt;\n&lt;logger name&#x3D;&quot;com.taotao.pethouse.app.controller&quot;&#x2F;&gt;\n        &lt;!--将级别为“info”及大于“info”的日志信息传递给root，本身并不打印--&gt;\n        &lt;!-- root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console” appender 将信息打印到控制台--&gt;</code></pre>\n\n<ul>\n<li>2.带有多个logger的配置，指定级别，指定appender</li>\n</ul>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;!--控制com.taotao.pethouse.app.controller类的日志打印，打印级别为“WARN”;--&gt;\n&lt;!--additivity属性为false，表示此loger的打印信息不再向上级传递;--&gt;\n&lt;!--指定了名字为“console”的appender--&gt;\n&lt;logger name&#x3D;&quot;com.taotao.pethouse.app.controller&quot; level&#x3D;&quot;WARN&quot; additivity&#x3D;&quot;false&quot;&gt;\n    &lt;appender-ref ref&#x3D;&quot;console&quot;&#x2F;&gt;\n&lt;&#x2F;logger&gt;\n        &lt;!--级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息--&gt;</code></pre>\n\n<h3 id=\"多环境日志输出\"><a href=\"#多环境日志输出\" class=\"headerlink\" title=\"多环境日志输出\"></a>多环境日志输出</h3><p>1.logback-spring.xml增加springProfile标签配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">\n&lt;configuration&gt;\n    &lt;!--    ...--&gt;\n    &lt;!--application.yml 传递参数，不能使用logback 自带的&lt;property&gt;标签 --&gt;\n    &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;appname&quot; source&#x3D;&quot;logback.appname&quot;&#x2F;&gt;\n    &lt;springProperty scope&#x3D;&quot;context&quot; name&#x3D;&quot;logdir&quot; source&#x3D;&quot;logback.logdir&quot;&#x2F;&gt;\n\n    &lt;contextName&gt;$&#123;appname&#125;&lt;&#x2F;contextName&gt;\n\n    &lt;!--输出到控制台 ConsoleAppender--&gt;\n    &lt;appender name&#x3D;&quot;console&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;\n        &lt;!--展示格式 layout--&gt;\n        &lt;layout class&#x3D;&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;\n            &lt;pattern&gt;\n                &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;&#x2F;pattern&gt;\n            &lt;&#x2F;pattern&gt;\n        &lt;&#x2F;layout&gt;\n    &lt;&#x2F;appender&gt;\n\n    &lt;!-- 测试环境+开发环境. 多个使用逗号隔开. --&gt;\n    &lt;springProfile name&#x3D;&quot;test,dev&quot;&gt;\n        &lt;logger name&#x3D;&quot;com.taotao.pethouse.app.controller&quot; level&#x3D;&quot;DEBUG&quot; additivity&#x3D;&quot;false&quot;&gt;\n            &lt;appender-ref ref&#x3D;&quot;console&quot;&#x2F;&gt;\n        &lt;&#x2F;logger&gt;\n    &lt;&#x2F;springProfile&gt;\n\n    &lt;!-- 生产环境. --&gt;\n    &lt;springProfile name&#x3D;&quot;prod&quot;&gt;\n        &lt;logger name&#x3D;&quot;com.taotao.pethouse.app.controller&quot; level&#x3D;&quot;INFO&quot; additivity&#x3D;&quot;false&quot;&gt;\n            &lt;appender-ref ref&#x3D;&quot;console&quot;&#x2F;&gt;\n        &lt;&#x2F;logger&gt;\n    &lt;&#x2F;springProfile&gt;\n&lt;&#x2F;configuration&gt;</code></pre>\n\n<p>2.application.yml增加环境选择的配置active: dev；自定义日志路径</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">spring:\n  profiles:\n    active: dev\nlogback:\n  logdir: .&#x2F;server&#x2F;log\n  appname: pethouse</code></pre>\n\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>参考：<a href=\"https://blog.csdn.net/inke88/article/details/75007649#comments?utm_source=tuicool&utm_medium=referral\">https://blog.csdn.net/inke88/article/details/75007649#comments?utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral</a></p></blockquote>\n","text":"默认日志 Logback默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。 spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot默认的日志框架 ...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"springboot","slug":"springboot","count":2,"path":"api/categories/springboot.json"}],"tags":[{"name":"springboot","slug":"springboot","count":2,"path":"api/tags/springboot.json"},{"name":"springboot配置","slug":"springboot配置","count":2,"path":"api/tags/springboot配置.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97-Logback\"><span class=\"toc-text\">默认日志 Logback</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">文件输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">自定义日志配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E8%8A%82%E7%82%B9-configuration\"><span class=\"toc-text\">根节点 configuration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%80-root\"><span class=\"toc-text\">子节点一 root</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%8A%82%E7%82%B9%E4%BA%8C-contextName-%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%B8%8B%E6%96%87%E5%90%8D%E7%A7%B0\"><span class=\"toc-text\">子节点二 contextName 设置上下文名称</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%89-property-%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">子节点三 property 设置变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%8A%82%E7%82%B9%E5%9B%9B-appender\"><span class=\"toc-text\">子节点四 appender</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA-ConsoleAppender\"><span class=\"toc-text\">控制台输出 ConsoleAppender</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6-RollingFileAppender\"><span class=\"toc-text\">输出到文件 RollingFileAppender</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%BC%82%E6%AD%A5%E8%BE%93%E5%87%BA-AspectLogbackAsyncAppender\"><span class=\"toc-text\">异步输出 AspectLogbackAsyncAppender</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E8%8A%82%E7%82%B9%E4%BA%94-logger\"><span class=\"toc-text\">子节点五 logger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">用法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%8E%AF%E5%A2%83%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">多环境日志输出</span></a></li></ol></li></ol>","author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"docker镜像构建方式","uid":"05c6b7bccc0f16753e9101299bf620c9","slug":"docker/docker镜像构建方式","date":"2023-02-08T03:04:06.000Z","updated":"2023-06-09T05:39:02.811Z","comments":true,"path":"api/articles/docker/docker镜像构建方式.json","keywords":"chriswood blogs sharing","cover":null,"text":"创建镜像的方法主要有三种： 基于已有镜像的容器创建 基于本地模板导入 基于Dockerfile创建 一、基于容器创建镜像基于已有容器构建镜像主要是通过docker commit命令来构建新的镜像，语法规则如下： docker commit [OPTIONS] CONTAINER ...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"docker","slug":"docker","count":5,"path":"api/categories/docker.json"}],"tags":[{"name":"docker镜像构建","slug":"docker镜像构建","count":1,"path":"api/tags/docker镜像构建.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"docker部署hbase","uid":"f55822a9843defac7c7cd98d8f77df10","slug":"hbase/docker部署hbase","date":"2023-02-06T07:22:50.000Z","updated":"2023-06-09T05:39:02.811Z","comments":true,"path":"api/articles/hbase/docker部署hbase.json","keywords":"chriswood blogs sharing","cover":null,"text":"docker搭建hbase环境Linux系统：centos 7.6 Hbase：harisekhon&#x2F;hbase Hbase1.拉取镜像 并部署启动 方式一 手动分配所有端口 docker run -d -p 2181:2181 \\ -p 8080:8080 -p 80...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"hbase","slug":"hbase","count":1,"path":"api/categories/hbase.json"}],"tags":[{"name":"docker","slug":"docker","count":3,"path":"api/tags/docker.json"},{"name":"hbase","slug":"hbase","count":1,"path":"api/tags/hbase.json"}],"author":{"name":"ChrisWood","slug":"blog-author","avatar":"https://chriswood-blog.oss-cn-shanghai.aliyuncs.com/me/avatar.png","link":"/","description":"Think like an artist, code like an artisan.","socials":{"github":"https://github.com/chriswoodcn","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}